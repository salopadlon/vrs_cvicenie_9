
i2c_comm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035f8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003780  08003780  00013780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003798  08003798  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08003798  08003798  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003798  08003798  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003798  08003798  00013798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800379c  0800379c  0001379c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080037a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000018  080037b4  00020018  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  080037b4  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007db5  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018a0  00000000  00000000  00027df9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000938  00000000  00000000  000296a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000860  00000000  00000000  00029fd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000490a  00000000  00000000  0002a838  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000061e3  00000000  00000000  0002f142  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00078ff5  00000000  00000000  00035325  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ae31a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002460  00000000  00000000  000ae398  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003768 	.word	0x08003768

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08003768 	.word	0x08003768

080001c8 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80001d0:	4b05      	ldr	r3, [pc, #20]	; (80001e8 <LL_EXTI_EnableIT_0_31+0x20>)
 80001d2:	681a      	ldr	r2, [r3, #0]
 80001d4:	4904      	ldr	r1, [pc, #16]	; (80001e8 <LL_EXTI_EnableIT_0_31+0x20>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	4313      	orrs	r3, r2
 80001da:	600b      	str	r3, [r1, #0]
}
 80001dc:	bf00      	nop
 80001de:	370c      	adds	r7, #12
 80001e0:	46bd      	mov	sp, r7
 80001e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e6:	4770      	bx	lr
 80001e8:	40010400 	.word	0x40010400

080001ec <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80001f4:	4b05      	ldr	r3, [pc, #20]	; (800020c <LL_EXTI_EnableIT_32_63+0x20>)
 80001f6:	6a1a      	ldr	r2, [r3, #32]
 80001f8:	4904      	ldr	r1, [pc, #16]	; (800020c <LL_EXTI_EnableIT_32_63+0x20>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4313      	orrs	r3, r2
 80001fe:	620b      	str	r3, [r1, #32]
}
 8000200:	bf00      	nop
 8000202:	370c      	adds	r7, #12
 8000204:	46bd      	mov	sp, r7
 8000206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020a:	4770      	bx	lr
 800020c:	40010400 	.word	0x40010400

08000210 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8000218:	4b06      	ldr	r3, [pc, #24]	; (8000234 <LL_EXTI_DisableIT_0_31+0x24>)
 800021a:	681a      	ldr	r2, [r3, #0]
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	43db      	mvns	r3, r3
 8000220:	4904      	ldr	r1, [pc, #16]	; (8000234 <LL_EXTI_DisableIT_0_31+0x24>)
 8000222:	4013      	ands	r3, r2
 8000224:	600b      	str	r3, [r1, #0]
}
 8000226:	bf00      	nop
 8000228:	370c      	adds	r7, #12
 800022a:	46bd      	mov	sp, r7
 800022c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000230:	4770      	bx	lr
 8000232:	bf00      	nop
 8000234:	40010400 	.word	0x40010400

08000238 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8000240:	4b06      	ldr	r3, [pc, #24]	; (800025c <LL_EXTI_DisableIT_32_63+0x24>)
 8000242:	6a1a      	ldr	r2, [r3, #32]
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	43db      	mvns	r3, r3
 8000248:	4904      	ldr	r1, [pc, #16]	; (800025c <LL_EXTI_DisableIT_32_63+0x24>)
 800024a:	4013      	ands	r3, r2
 800024c:	620b      	str	r3, [r1, #32]
}
 800024e:	bf00      	nop
 8000250:	370c      	adds	r7, #12
 8000252:	46bd      	mov	sp, r7
 8000254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000258:	4770      	bx	lr
 800025a:	bf00      	nop
 800025c:	40010400 	.word	0x40010400

08000260 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8000260:	b480      	push	{r7}
 8000262:	b083      	sub	sp, #12
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8000268:	4b05      	ldr	r3, [pc, #20]	; (8000280 <LL_EXTI_EnableEvent_0_31+0x20>)
 800026a:	685a      	ldr	r2, [r3, #4]
 800026c:	4904      	ldr	r1, [pc, #16]	; (8000280 <LL_EXTI_EnableEvent_0_31+0x20>)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	4313      	orrs	r3, r2
 8000272:	604b      	str	r3, [r1, #4]

}
 8000274:	bf00      	nop
 8000276:	370c      	adds	r7, #12
 8000278:	46bd      	mov	sp, r7
 800027a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027e:	4770      	bx	lr
 8000280:	40010400 	.word	0x40010400

08000284 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800028c:	4b05      	ldr	r3, [pc, #20]	; (80002a4 <LL_EXTI_EnableEvent_32_63+0x20>)
 800028e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000290:	4904      	ldr	r1, [pc, #16]	; (80002a4 <LL_EXTI_EnableEvent_32_63+0x20>)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	4313      	orrs	r3, r2
 8000296:	624b      	str	r3, [r1, #36]	; 0x24
}
 8000298:	bf00      	nop
 800029a:	370c      	adds	r7, #12
 800029c:	46bd      	mov	sp, r7
 800029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a2:	4770      	bx	lr
 80002a4:	40010400 	.word	0x40010400

080002a8 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80002b0:	4b06      	ldr	r3, [pc, #24]	; (80002cc <LL_EXTI_DisableEvent_0_31+0x24>)
 80002b2:	685a      	ldr	r2, [r3, #4]
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	43db      	mvns	r3, r3
 80002b8:	4904      	ldr	r1, [pc, #16]	; (80002cc <LL_EXTI_DisableEvent_0_31+0x24>)
 80002ba:	4013      	ands	r3, r2
 80002bc:	604b      	str	r3, [r1, #4]
}
 80002be:	bf00      	nop
 80002c0:	370c      	adds	r7, #12
 80002c2:	46bd      	mov	sp, r7
 80002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	40010400 	.word	0x40010400

080002d0 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80002d8:	4b06      	ldr	r3, [pc, #24]	; (80002f4 <LL_EXTI_DisableEvent_32_63+0x24>)
 80002da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	43db      	mvns	r3, r3
 80002e0:	4904      	ldr	r1, [pc, #16]	; (80002f4 <LL_EXTI_DisableEvent_32_63+0x24>)
 80002e2:	4013      	ands	r3, r2
 80002e4:	624b      	str	r3, [r1, #36]	; 0x24
}
 80002e6:	bf00      	nop
 80002e8:	370c      	adds	r7, #12
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	40010400 	.word	0x40010400

080002f8 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8000300:	4b05      	ldr	r3, [pc, #20]	; (8000318 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000302:	689a      	ldr	r2, [r3, #8]
 8000304:	4904      	ldr	r1, [pc, #16]	; (8000318 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	4313      	orrs	r3, r2
 800030a:	608b      	str	r3, [r1, #8]

}
 800030c:	bf00      	nop
 800030e:	370c      	adds	r7, #12
 8000310:	46bd      	mov	sp, r7
 8000312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000316:	4770      	bx	lr
 8000318:	40010400 	.word	0x40010400

0800031c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800031c:	b480      	push	{r7}
 800031e:	b083      	sub	sp, #12
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8000324:	4b05      	ldr	r3, [pc, #20]	; (800033c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8000326:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000328:	4904      	ldr	r1, [pc, #16]	; (800033c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	4313      	orrs	r3, r2
 800032e:	628b      	str	r3, [r1, #40]	; 0x28
}
 8000330:	bf00      	nop
 8000332:	370c      	adds	r7, #12
 8000334:	46bd      	mov	sp, r7
 8000336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033a:	4770      	bx	lr
 800033c:	40010400 	.word	0x40010400

08000340 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000340:	b480      	push	{r7}
 8000342:	b083      	sub	sp, #12
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8000348:	4b06      	ldr	r3, [pc, #24]	; (8000364 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800034a:	689a      	ldr	r2, [r3, #8]
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	43db      	mvns	r3, r3
 8000350:	4904      	ldr	r1, [pc, #16]	; (8000364 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8000352:	4013      	ands	r3, r2
 8000354:	608b      	str	r3, [r1, #8]

}
 8000356:	bf00      	nop
 8000358:	370c      	adds	r7, #12
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	40010400 	.word	0x40010400

08000368 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8000370:	4b06      	ldr	r3, [pc, #24]	; (800038c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8000372:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	43db      	mvns	r3, r3
 8000378:	4904      	ldr	r1, [pc, #16]	; (800038c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800037a:	4013      	ands	r3, r2
 800037c:	628b      	str	r3, [r1, #40]	; 0x28
}
 800037e:	bf00      	nop
 8000380:	370c      	adds	r7, #12
 8000382:	46bd      	mov	sp, r7
 8000384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop
 800038c:	40010400 	.word	0x40010400

08000390 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8000398:	4b05      	ldr	r3, [pc, #20]	; (80003b0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800039a:	68da      	ldr	r2, [r3, #12]
 800039c:	4904      	ldr	r1, [pc, #16]	; (80003b0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	4313      	orrs	r3, r2
 80003a2:	60cb      	str	r3, [r1, #12]
}
 80003a4:	bf00      	nop
 80003a6:	370c      	adds	r7, #12
 80003a8:	46bd      	mov	sp, r7
 80003aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ae:	4770      	bx	lr
 80003b0:	40010400 	.word	0x40010400

080003b4 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 80003b4:	b480      	push	{r7}
 80003b6:	b083      	sub	sp, #12
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80003bc:	4b05      	ldr	r3, [pc, #20]	; (80003d4 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80003be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80003c0:	4904      	ldr	r1, [pc, #16]	; (80003d4 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	4313      	orrs	r3, r2
 80003c6:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80003c8:	bf00      	nop
 80003ca:	370c      	adds	r7, #12
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	40010400 	.word	0x40010400

080003d8 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80003d8:	b480      	push	{r7}
 80003da:	b083      	sub	sp, #12
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80003e0:	4b06      	ldr	r3, [pc, #24]	; (80003fc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80003e2:	68da      	ldr	r2, [r3, #12]
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	43db      	mvns	r3, r3
 80003e8:	4904      	ldr	r1, [pc, #16]	; (80003fc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80003ea:	4013      	ands	r3, r2
 80003ec:	60cb      	str	r3, [r1, #12]
}
 80003ee:	bf00      	nop
 80003f0:	370c      	adds	r7, #12
 80003f2:	46bd      	mov	sp, r7
 80003f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f8:	4770      	bx	lr
 80003fa:	bf00      	nop
 80003fc:	40010400 	.word	0x40010400

08000400 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8000408:	4b06      	ldr	r3, [pc, #24]	; (8000424 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800040a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	43db      	mvns	r3, r3
 8000410:	4904      	ldr	r1, [pc, #16]	; (8000424 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8000412:	4013      	ands	r3, r2
 8000414:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8000416:	bf00      	nop
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	40010400 	.word	0x40010400

08000428 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b084      	sub	sp, #16
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8000430:	2300      	movs	r3, #0
 8000432:	73fb      	strb	r3, [r7, #15]
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	7a1b      	ldrb	r3, [r3, #8]
 8000438:	2b00      	cmp	r3, #0
 800043a:	f000 80c2 	beq.w	80005c2 <LL_EXTI_Init+0x19a>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	2b00      	cmp	r3, #0
 8000444:	d05b      	beq.n	80004fe <LL_EXTI_Init+0xd6>
    {
      switch (EXTI_InitStruct->Mode)
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	7a5b      	ldrb	r3, [r3, #9]
 800044a:	2b01      	cmp	r3, #1
 800044c:	d00e      	beq.n	800046c <LL_EXTI_Init+0x44>
 800044e:	2b02      	cmp	r3, #2
 8000450:	d017      	beq.n	8000482 <LL_EXTI_Init+0x5a>
 8000452:	2b00      	cmp	r3, #0
 8000454:	d120      	bne.n	8000498 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4618      	mov	r0, r3
 800045c:	f7ff ff24 	bl	80002a8 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4618      	mov	r0, r3
 8000466:	f7ff feaf 	bl	80001c8 <LL_EXTI_EnableIT_0_31>
          break;
 800046a:	e018      	b.n	800049e <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4618      	mov	r0, r3
 8000472:	f7ff fecd 	bl	8000210 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4618      	mov	r0, r3
 800047c:	f7ff fef0 	bl	8000260 <LL_EXTI_EnableEvent_0_31>
          break;
 8000480:	e00d      	b.n	800049e <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4618      	mov	r0, r3
 8000488:	f7ff fe9e 	bl	80001c8 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4618      	mov	r0, r3
 8000492:	f7ff fee5 	bl	8000260 <LL_EXTI_EnableEvent_0_31>
          break;
 8000496:	e002      	b.n	800049e <LL_EXTI_Init+0x76>
        default:
          status = ERROR;
 8000498:	2301      	movs	r3, #1
 800049a:	73fb      	strb	r3, [r7, #15]
          break;
 800049c:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	7a9b      	ldrb	r3, [r3, #10]
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d02b      	beq.n	80004fe <LL_EXTI_Init+0xd6>
      {
        switch (EXTI_InitStruct->Trigger)
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	7a9b      	ldrb	r3, [r3, #10]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d00e      	beq.n	80004cc <LL_EXTI_Init+0xa4>
 80004ae:	2b03      	cmp	r3, #3
 80004b0:	d017      	beq.n	80004e2 <LL_EXTI_Init+0xba>
 80004b2:	2b01      	cmp	r3, #1
 80004b4:	d120      	bne.n	80004f8 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	4618      	mov	r0, r3
 80004bc:	f7ff ff8c 	bl	80003d8 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4618      	mov	r0, r3
 80004c6:	f7ff ff17 	bl	80002f8 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80004ca:	e019      	b.n	8000500 <LL_EXTI_Init+0xd8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4618      	mov	r0, r3
 80004d2:	f7ff ff35 	bl	8000340 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	4618      	mov	r0, r3
 80004dc:	f7ff ff58 	bl	8000390 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80004e0:	e00e      	b.n	8000500 <LL_EXTI_Init+0xd8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4618      	mov	r0, r3
 80004e8:	f7ff ff06 	bl	80002f8 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4618      	mov	r0, r3
 80004f2:	f7ff ff4d 	bl	8000390 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80004f6:	e003      	b.n	8000500 <LL_EXTI_Init+0xd8>
          default:
            status = ERROR;
 80004f8:	2301      	movs	r3, #1
 80004fa:	73fb      	strb	r3, [r7, #15]
            break;
 80004fc:	e000      	b.n	8000500 <LL_EXTI_Init+0xd8>
        }
      }
 80004fe:	bf00      	nop
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	685b      	ldr	r3, [r3, #4]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d071      	beq.n	80005ec <LL_EXTI_Init+0x1c4>
    {
      switch (EXTI_InitStruct->Mode)
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	7a5b      	ldrb	r3, [r3, #9]
 800050c:	2b01      	cmp	r3, #1
 800050e:	d00e      	beq.n	800052e <LL_EXTI_Init+0x106>
 8000510:	2b02      	cmp	r3, #2
 8000512:	d017      	beq.n	8000544 <LL_EXTI_Init+0x11c>
 8000514:	2b00      	cmp	r3, #0
 8000516:	d120      	bne.n	800055a <LL_EXTI_Init+0x132>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	685b      	ldr	r3, [r3, #4]
 800051c:	4618      	mov	r0, r3
 800051e:	f7ff fed7 	bl	80002d0 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	685b      	ldr	r3, [r3, #4]
 8000526:	4618      	mov	r0, r3
 8000528:	f7ff fe60 	bl	80001ec <LL_EXTI_EnableIT_32_63>
          break;
 800052c:	e018      	b.n	8000560 <LL_EXTI_Init+0x138>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	685b      	ldr	r3, [r3, #4]
 8000532:	4618      	mov	r0, r3
 8000534:	f7ff fe80 	bl	8000238 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	685b      	ldr	r3, [r3, #4]
 800053c:	4618      	mov	r0, r3
 800053e:	f7ff fea1 	bl	8000284 <LL_EXTI_EnableEvent_32_63>
          break;
 8000542:	e00d      	b.n	8000560 <LL_EXTI_Init+0x138>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	685b      	ldr	r3, [r3, #4]
 8000548:	4618      	mov	r0, r3
 800054a:	f7ff fe4f 	bl	80001ec <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	685b      	ldr	r3, [r3, #4]
 8000552:	4618      	mov	r0, r3
 8000554:	f7ff fe96 	bl	8000284 <LL_EXTI_EnableEvent_32_63>
          break;
 8000558:	e002      	b.n	8000560 <LL_EXTI_Init+0x138>
        default:
          status = ERROR;
 800055a:	2301      	movs	r3, #1
 800055c:	73fb      	strb	r3, [r7, #15]
          break;
 800055e:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	7a9b      	ldrb	r3, [r3, #10]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d041      	beq.n	80005ec <LL_EXTI_Init+0x1c4>
      {
        switch (EXTI_InitStruct->Trigger)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	7a9b      	ldrb	r3, [r3, #10]
 800056c:	2b02      	cmp	r3, #2
 800056e:	d00e      	beq.n	800058e <LL_EXTI_Init+0x166>
 8000570:	2b03      	cmp	r3, #3
 8000572:	d017      	beq.n	80005a4 <LL_EXTI_Init+0x17c>
 8000574:	2b01      	cmp	r3, #1
 8000576:	d120      	bne.n	80005ba <LL_EXTI_Init+0x192>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	685b      	ldr	r3, [r3, #4]
 800057c:	4618      	mov	r0, r3
 800057e:	f7ff ff3f 	bl	8000400 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	685b      	ldr	r3, [r3, #4]
 8000586:	4618      	mov	r0, r3
 8000588:	f7ff fec8 	bl	800031c <LL_EXTI_EnableRisingTrig_32_63>
            break;
 800058c:	e02f      	b.n	80005ee <LL_EXTI_Init+0x1c6>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	685b      	ldr	r3, [r3, #4]
 8000592:	4618      	mov	r0, r3
 8000594:	f7ff fee8 	bl	8000368 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	4618      	mov	r0, r3
 800059e:	f7ff ff09 	bl	80003b4 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80005a2:	e024      	b.n	80005ee <LL_EXTI_Init+0x1c6>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	685b      	ldr	r3, [r3, #4]
 80005a8:	4618      	mov	r0, r3
 80005aa:	f7ff feb7 	bl	800031c <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	685b      	ldr	r3, [r3, #4]
 80005b2:	4618      	mov	r0, r3
 80005b4:	f7ff fefe 	bl	80003b4 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80005b8:	e019      	b.n	80005ee <LL_EXTI_Init+0x1c6>
          default:
            status = ERROR;
 80005ba:	2301      	movs	r3, #1
 80005bc:	73fb      	strb	r3, [r7, #15]
            break;
 80005be:	bf00      	nop
 80005c0:	e015      	b.n	80005ee <LL_EXTI_Init+0x1c6>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4618      	mov	r0, r3
 80005c8:	f7ff fe22 	bl	8000210 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4618      	mov	r0, r3
 80005d2:	f7ff fe69 	bl	80002a8 <LL_EXTI_DisableEvent_0_31>
#if defined(EXTI_32_63_SUPPORT)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	685b      	ldr	r3, [r3, #4]
 80005da:	4618      	mov	r0, r3
 80005dc:	f7ff fe2c 	bl	8000238 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	685b      	ldr	r3, [r3, #4]
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff fe73 	bl	80002d0 <LL_EXTI_DisableEvent_32_63>
 80005ea:	e000      	b.n	80005ee <LL_EXTI_Init+0x1c6>
      }
 80005ec:	bf00      	nop
#endif
  }
  return status;
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3710      	adds	r7, #16
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b089      	sub	sp, #36	; 0x24
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	60f8      	str	r0, [r7, #12]
 8000600:	60b9      	str	r1, [r7, #8]
 8000602:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	681a      	ldr	r2, [r3, #0]
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800060c:	697b      	ldr	r3, [r7, #20]
 800060e:	fa93 f3a3 	rbit	r3, r3
 8000612:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000614:	693b      	ldr	r3, [r7, #16]
 8000616:	fab3 f383 	clz	r3, r3
 800061a:	005b      	lsls	r3, r3, #1
 800061c:	2103      	movs	r1, #3
 800061e:	fa01 f303 	lsl.w	r3, r1, r3
 8000622:	43db      	mvns	r3, r3
 8000624:	401a      	ands	r2, r3
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800062a:	69fb      	ldr	r3, [r7, #28]
 800062c:	fa93 f3a3 	rbit	r3, r3
 8000630:	61bb      	str	r3, [r7, #24]
  return(result);
 8000632:	69bb      	ldr	r3, [r7, #24]
 8000634:	fab3 f383 	clz	r3, r3
 8000638:	005b      	lsls	r3, r3, #1
 800063a:	6879      	ldr	r1, [r7, #4]
 800063c:	fa01 f303 	lsl.w	r3, r1, r3
 8000640:	431a      	orrs	r2, r3
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	601a      	str	r2, [r3, #0]
}
 8000646:	bf00      	nop
 8000648:	3724      	adds	r7, #36	; 0x24
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr

08000652 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000652:	b480      	push	{r7}
 8000654:	b085      	sub	sp, #20
 8000656:	af00      	add	r7, sp, #0
 8000658:	60f8      	str	r0, [r7, #12]
 800065a:	60b9      	str	r1, [r7, #8]
 800065c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	685a      	ldr	r2, [r3, #4]
 8000662:	68bb      	ldr	r3, [r7, #8]
 8000664:	43db      	mvns	r3, r3
 8000666:	401a      	ands	r2, r3
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	6879      	ldr	r1, [r7, #4]
 800066c:	fb01 f303 	mul.w	r3, r1, r3
 8000670:	431a      	orrs	r2, r3
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	605a      	str	r2, [r3, #4]
}
 8000676:	bf00      	nop
 8000678:	3714      	adds	r7, #20
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr

08000682 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000682:	b480      	push	{r7}
 8000684:	b089      	sub	sp, #36	; 0x24
 8000686:	af00      	add	r7, sp, #0
 8000688:	60f8      	str	r0, [r7, #12]
 800068a:	60b9      	str	r1, [r7, #8]
 800068c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	689a      	ldr	r2, [r3, #8]
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000696:	697b      	ldr	r3, [r7, #20]
 8000698:	fa93 f3a3 	rbit	r3, r3
 800069c:	613b      	str	r3, [r7, #16]
  return(result);
 800069e:	693b      	ldr	r3, [r7, #16]
 80006a0:	fab3 f383 	clz	r3, r3
 80006a4:	005b      	lsls	r3, r3, #1
 80006a6:	2103      	movs	r1, #3
 80006a8:	fa01 f303 	lsl.w	r3, r1, r3
 80006ac:	43db      	mvns	r3, r3
 80006ae:	401a      	ands	r2, r3
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006b4:	69fb      	ldr	r3, [r7, #28]
 80006b6:	fa93 f3a3 	rbit	r3, r3
 80006ba:	61bb      	str	r3, [r7, #24]
  return(result);
 80006bc:	69bb      	ldr	r3, [r7, #24]
 80006be:	fab3 f383 	clz	r3, r3
 80006c2:	005b      	lsls	r3, r3, #1
 80006c4:	6879      	ldr	r1, [r7, #4]
 80006c6:	fa01 f303 	lsl.w	r3, r1, r3
 80006ca:	431a      	orrs	r2, r3
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80006d0:	bf00      	nop
 80006d2:	3724      	adds	r7, #36	; 0x24
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr

080006dc <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80006dc:	b480      	push	{r7}
 80006de:	b089      	sub	sp, #36	; 0x24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	68da      	ldr	r2, [r3, #12]
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	fa93 f3a3 	rbit	r3, r3
 80006f6:	613b      	str	r3, [r7, #16]
  return(result);
 80006f8:	693b      	ldr	r3, [r7, #16]
 80006fa:	fab3 f383 	clz	r3, r3
 80006fe:	005b      	lsls	r3, r3, #1
 8000700:	2103      	movs	r1, #3
 8000702:	fa01 f303 	lsl.w	r3, r1, r3
 8000706:	43db      	mvns	r3, r3
 8000708:	401a      	ands	r2, r3
 800070a:	68bb      	ldr	r3, [r7, #8]
 800070c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	fa93 f3a3 	rbit	r3, r3
 8000714:	61bb      	str	r3, [r7, #24]
  return(result);
 8000716:	69bb      	ldr	r3, [r7, #24]
 8000718:	fab3 f383 	clz	r3, r3
 800071c:	005b      	lsls	r3, r3, #1
 800071e:	6879      	ldr	r1, [r7, #4]
 8000720:	fa01 f303 	lsl.w	r3, r1, r3
 8000724:	431a      	orrs	r2, r3
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	60da      	str	r2, [r3, #12]
}
 800072a:	bf00      	nop
 800072c:	3724      	adds	r7, #36	; 0x24
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr

08000736 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000736:	b480      	push	{r7}
 8000738:	b089      	sub	sp, #36	; 0x24
 800073a:	af00      	add	r7, sp, #0
 800073c:	60f8      	str	r0, [r7, #12]
 800073e:	60b9      	str	r1, [r7, #8]
 8000740:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	6a1a      	ldr	r2, [r3, #32]
 8000746:	68bb      	ldr	r3, [r7, #8]
 8000748:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800074a:	697b      	ldr	r3, [r7, #20]
 800074c:	fa93 f3a3 	rbit	r3, r3
 8000750:	613b      	str	r3, [r7, #16]
  return(result);
 8000752:	693b      	ldr	r3, [r7, #16]
 8000754:	fab3 f383 	clz	r3, r3
 8000758:	009b      	lsls	r3, r3, #2
 800075a:	210f      	movs	r1, #15
 800075c:	fa01 f303 	lsl.w	r3, r1, r3
 8000760:	43db      	mvns	r3, r3
 8000762:	401a      	ands	r2, r3
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000768:	69fb      	ldr	r3, [r7, #28]
 800076a:	fa93 f3a3 	rbit	r3, r3
 800076e:	61bb      	str	r3, [r7, #24]
  return(result);
 8000770:	69bb      	ldr	r3, [r7, #24]
 8000772:	fab3 f383 	clz	r3, r3
 8000776:	009b      	lsls	r3, r3, #2
 8000778:	6879      	ldr	r1, [r7, #4]
 800077a:	fa01 f303 	lsl.w	r3, r1, r3
 800077e:	431a      	orrs	r2, r3
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8000784:	bf00      	nop
 8000786:	3724      	adds	r7, #36	; 0x24
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr

08000790 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000790:	b480      	push	{r7}
 8000792:	b089      	sub	sp, #36	; 0x24
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	0a1b      	lsrs	r3, r3, #8
 80007a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007a6:	697b      	ldr	r3, [r7, #20]
 80007a8:	fa93 f3a3 	rbit	r3, r3
 80007ac:	613b      	str	r3, [r7, #16]
  return(result);
 80007ae:	693b      	ldr	r3, [r7, #16]
 80007b0:	fab3 f383 	clz	r3, r3
 80007b4:	009b      	lsls	r3, r3, #2
 80007b6:	210f      	movs	r1, #15
 80007b8:	fa01 f303 	lsl.w	r3, r1, r3
 80007bc:	43db      	mvns	r3, r3
 80007be:	401a      	ands	r2, r3
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	0a1b      	lsrs	r3, r3, #8
 80007c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	fa93 f3a3 	rbit	r3, r3
 80007cc:	61bb      	str	r3, [r7, #24]
  return(result);
 80007ce:	69bb      	ldr	r3, [r7, #24]
 80007d0:	fab3 f383 	clz	r3, r3
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	6879      	ldr	r1, [r7, #4]
 80007d8:	fa01 f303 	lsl.w	r3, r1, r3
 80007dc:	431a      	orrs	r2, r3
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80007e2:	bf00      	nop
 80007e4:	3724      	adds	r7, #36	; 0x24
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr

080007ee <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b088      	sub	sp, #32
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	6078      	str	r0, [r7, #4]
 80007f6:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	fa93 f3a3 	rbit	r3, r3
 800080c:	613b      	str	r3, [r7, #16]
  return(result);
 800080e:	693b      	ldr	r3, [r7, #16]
 8000810:	fab3 f383 	clz	r3, r3
 8000814:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000816:	e048      	b.n	80008aa <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	2101      	movs	r1, #1
 800081e:	69fb      	ldr	r3, [r7, #28]
 8000820:	fa01 f303 	lsl.w	r3, r1, r3
 8000824:	4013      	ands	r3, r2
 8000826:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8000828:	69bb      	ldr	r3, [r7, #24]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d03a      	beq.n	80008a4 <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	461a      	mov	r2, r3
 8000834:	69b9      	ldr	r1, [r7, #24]
 8000836:	6878      	ldr	r0, [r7, #4]
 8000838:	f7ff fede 	bl	80005f8 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d003      	beq.n	800084c <LL_GPIO_Init+0x5e>
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	2b02      	cmp	r3, #2
 800084a:	d106      	bne.n	800085a <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	689b      	ldr	r3, [r3, #8]
 8000850:	461a      	mov	r2, r3
 8000852:	69b9      	ldr	r1, [r7, #24]
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f7ff ff14 	bl	8000682 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	691b      	ldr	r3, [r3, #16]
 800085e:	461a      	mov	r2, r3
 8000860:	69b9      	ldr	r1, [r7, #24]
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f7ff ff3a 	bl	80006dc <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	2b02      	cmp	r3, #2
 800086e:	d119      	bne.n	80008a4 <LL_GPIO_Init+0xb6>
 8000870:	69bb      	ldr	r3, [r7, #24]
 8000872:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	fa93 f3a3 	rbit	r3, r3
 800087a:	60bb      	str	r3, [r7, #8]
  return(result);
 800087c:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800087e:	fab3 f383 	clz	r3, r3
 8000882:	2b07      	cmp	r3, #7
 8000884:	d807      	bhi.n	8000896 <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	695b      	ldr	r3, [r3, #20]
 800088a:	461a      	mov	r2, r3
 800088c:	69b9      	ldr	r1, [r7, #24]
 800088e:	6878      	ldr	r0, [r7, #4]
 8000890:	f7ff ff51 	bl	8000736 <LL_GPIO_SetAFPin_0_7>
 8000894:	e006      	b.n	80008a4 <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	695b      	ldr	r3, [r3, #20]
 800089a:	461a      	mov	r2, r3
 800089c:	69b9      	ldr	r1, [r7, #24]
 800089e:	6878      	ldr	r0, [r7, #4]
 80008a0:	f7ff ff76 	bl	8000790 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 80008a4:	69fb      	ldr	r3, [r7, #28]
 80008a6:	3301      	adds	r3, #1
 80008a8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	fa22 f303 	lsr.w	r3, r2, r3
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d1af      	bne.n	8000818 <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d003      	beq.n	80008c8 <LL_GPIO_Init+0xda>
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	2b02      	cmp	r3, #2
 80008c6:	d107      	bne.n	80008d8 <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	6819      	ldr	r1, [r3, #0]
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	461a      	mov	r2, r3
 80008d2:	6878      	ldr	r0, [r7, #4]
 80008d4:	f7ff febd 	bl	8000652 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 80008d8:	2300      	movs	r3, #0
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3720      	adds	r7, #32
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 80008e2:	b480      	push	{r7}
 80008e4:	b083      	sub	sp, #12
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	f043 0201 	orr.w	r2, r3, #1
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	601a      	str	r2, [r3, #0]
}
 80008f6:	bf00      	nop
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr

08000902 <LL_I2C_Disable>:
  * @rmtoll CR1          PE            LL_I2C_Disable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
 8000902:	b480      	push	{r7}
 8000904:	b083      	sub	sp, #12
 8000906:	af00      	add	r7, sp, #0
 8000908:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	f023 0201 	bic.w	r2, r3, #1
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	601a      	str	r2, [r3, #0]
}
 8000916:	bf00      	nop
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr

08000922 <LL_I2C_ConfigFilters>:
  *         This parameter is used to configure the digital noise filter on SDA and SCL input.
  *         The digital filter will filter spikes with a length of up to DNF[3:0]*ti2cclk.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigFilters(I2C_TypeDef *I2Cx, uint32_t AnalogFilter, uint32_t DigitalFilter)
{
 8000922:	b480      	push	{r7}
 8000924:	b085      	sub	sp, #20
 8000926:	af00      	add	r7, sp, #0
 8000928:	60f8      	str	r0, [r7, #12]
 800092a:	60b9      	str	r1, [r7, #8]
 800092c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	0219      	lsls	r1, r3, #8
 800093a:	68bb      	ldr	r3, [r7, #8]
 800093c:	430b      	orrs	r3, r1
 800093e:	431a      	orrs	r2, r3
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	601a      	str	r2, [r3, #0]
}
 8000944:	bf00      	nop
 8000946:	3714      	adds	r7, #20
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <LL_I2C_SetOwnAddress1>:
  *         @arg @ref LL_I2C_OWNADDRESS1_7BIT
  *         @arg @ref LL_I2C_OWNADDRESS1_10BIT
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress1(I2C_TypeDef *I2Cx, uint32_t OwnAddress1, uint32_t OwnAddrSize)
{
 8000950:	b480      	push	{r7}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
 8000956:	60f8      	str	r0, [r7, #12]
 8000958:	60b9      	str	r1, [r7, #8]
 800095a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	689b      	ldr	r3, [r3, #8]
 8000960:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000964:	f023 0307 	bic.w	r3, r3, #7
 8000968:	68b9      	ldr	r1, [r7, #8]
 800096a:	687a      	ldr	r2, [r7, #4]
 800096c:	430a      	orrs	r2, r1
 800096e:	431a      	orrs	r2, r3
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	609a      	str	r2, [r3, #8]
}
 8000974:	bf00      	nop
 8000976:	3714      	adds	r7, #20
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <LL_I2C_EnableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_EnableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	689b      	ldr	r3, [r3, #8]
 800098c:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	609a      	str	r2, [r3, #8]
}
 8000994:	bf00      	nop
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <LL_I2C_DisableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_DisableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress1(I2C_TypeDef *I2Cx)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	689b      	ldr	r3, [r3, #8]
 80009ac:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	609a      	str	r2, [r3, #8]
}
 80009b4:	bf00      	nop
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <LL_I2C_SetTiming>:
  * @param  Timing This parameter must be a value between Min_Data=0 and Max_Data=0xFFFFFFFF.
  * @note   This parameter is computed with the STM32CubeMX Tool.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTiming(I2C_TypeDef *I2Cx, uint32_t Timing)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	683a      	ldr	r2, [r7, #0]
 80009ce:	611a      	str	r2, [r3, #16]
}
 80009d0:	bf00      	nop
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	431a      	orrs	r2, r3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	601a      	str	r2, [r3, #0]
}
 80009f6:	bf00      	nop
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr

08000a02 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8000a02:	b480      	push	{r7}
 8000a04:	b083      	sub	sp, #12
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
 8000a0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	431a      	orrs	r2, r3
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	605a      	str	r2, [r3, #4]
}
 8000a1c:	bf00      	nop
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f7ff ff65 	bl	8000902 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	6899      	ldr	r1, [r3, #8]
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	461a      	mov	r2, r3
 8000a42:	6878      	ldr	r0, [r7, #4]
 8000a44:	f7ff ff6d 	bl	8000922 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	f7ff ffb6 	bl	80009c0 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8000a54:	6878      	ldr	r0, [r7, #4]
 8000a56:	f7ff ff44 	bl	80008e2 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8000a5a:	6878      	ldr	r0, [r7, #4]
 8000a5c:	f7ff ffa0 	bl	80009a0 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	6919      	ldr	r1, [r3, #16]
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	6878      	ldr	r0, [r7, #4]
 8000a6c:	f7ff ff70 	bl	8000950 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	691b      	ldr	r3, [r3, #16]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d002      	beq.n	8000a7e <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f7ff ff81 	bl	8000980 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4619      	mov	r1, r3
 8000a84:	6878      	ldr	r0, [r7, #4]
 8000a86:	f7ff ffa9 	bl	80009dc <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	695b      	ldr	r3, [r3, #20]
 8000a8e:	4619      	mov	r1, r3
 8000a90:	6878      	ldr	r0, [r7, #4]
 8000a92:	f7ff ffb6 	bl	8000a02 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8000a96:	2300      	movs	r3, #0
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	683a      	ldr	r2, [r7, #0]
 8000aae:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	683a      	ldr	r2, [r7, #0]
 8000aca:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000acc:	bf00      	nop
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	683a      	ldr	r2, [r7, #0]
 8000ae6:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000ae8:	bf00      	nop
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	683a      	ldr	r2, [r7, #0]
 8000b02:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000b04:	bf00      	nop
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	683a      	ldr	r2, [r7, #0]
 8000b1e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000b20:	bf00      	nop
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	683a      	ldr	r2, [r7, #0]
 8000b3a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	683a      	ldr	r2, [r7, #0]
 8000b56:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <LL_TIM_OC_SetCompareCH5>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH5 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH5(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR5, CompareValue);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	683a      	ldr	r2, [r7, #0]
 8000b72:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <LL_TIM_OC_SetCompareCH6>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH6 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH6(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	683a      	ldr	r2, [r7, #0]
 8000b8e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000b90:	bf00      	nop
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	695b      	ldr	r3, [r3, #20]
 8000ba8:	f043 0201 	orr.w	r2, r3, #1
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	615a      	str	r2, [r3, #20]
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4a2f      	ldr	r2, [pc, #188]	; (8000c90 <LL_TIM_Init+0xd4>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d007      	beq.n	8000be8 <LL_TIM_Init+0x2c>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bde:	d003      	beq.n	8000be8 <LL_TIM_Init+0x2c>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4a2c      	ldr	r2, [pc, #176]	; (8000c94 <LL_TIM_Init+0xd8>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d106      	bne.n	8000bf6 <LL_TIM_Init+0x3a>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4a25      	ldr	r2, [pc, #148]	; (8000c90 <LL_TIM_Init+0xd4>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d013      	beq.n	8000c26 <LL_TIM_Init+0x6a>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c04:	d00f      	beq.n	8000c26 <LL_TIM_Init+0x6a>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4a22      	ldr	r2, [pc, #136]	; (8000c94 <LL_TIM_Init+0xd8>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d00b      	beq.n	8000c26 <LL_TIM_Init+0x6a>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4a21      	ldr	r2, [pc, #132]	; (8000c98 <LL_TIM_Init+0xdc>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d007      	beq.n	8000c26 <LL_TIM_Init+0x6a>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4a20      	ldr	r2, [pc, #128]	; (8000c9c <LL_TIM_Init+0xe0>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d003      	beq.n	8000c26 <LL_TIM_Init+0x6a>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4a1f      	ldr	r2, [pc, #124]	; (8000ca0 <LL_TIM_Init+0xe4>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d106      	bne.n	8000c34 <LL_TIM_Init+0x78>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	68fa      	ldr	r2, [r7, #12]
 8000c38:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	4619      	mov	r1, r3
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f7ff ff3b 	bl	8000abc <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	881b      	ldrh	r3, [r3, #0]
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f7ff ff27 	bl	8000aa0 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4a0e      	ldr	r2, [pc, #56]	; (8000c90 <LL_TIM_Init+0xd4>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d00b      	beq.n	8000c72 <LL_TIM_Init+0xb6>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4a0e      	ldr	r2, [pc, #56]	; (8000c98 <LL_TIM_Init+0xdc>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d007      	beq.n	8000c72 <LL_TIM_Init+0xb6>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4a0d      	ldr	r2, [pc, #52]	; (8000c9c <LL_TIM_Init+0xe0>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d003      	beq.n	8000c72 <LL_TIM_Init+0xb6>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4a0c      	ldr	r2, [pc, #48]	; (8000ca0 <LL_TIM_Init+0xe4>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d105      	bne.n	8000c7e <LL_TIM_Init+0xc2>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	7c1b      	ldrb	r3, [r3, #16]
 8000c76:	4619      	mov	r1, r3
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f7ff ff2d 	bl	8000ad8 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f7ff ff8c 	bl	8000b9c <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40012c00 	.word	0x40012c00
 8000c94:	40000400 	.word	0x40000400
 8000c98:	40014000 	.word	0x40014000
 8000c9c:	40014400 	.word	0x40014400
 8000ca0:	40014800 	.word	0x40014800

08000ca4 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cba:	d01f      	beq.n	8000cfc <LL_TIM_OC_Init+0x58>
 8000cbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cc0:	d804      	bhi.n	8000ccc <LL_TIM_OC_Init+0x28>
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d00c      	beq.n	8000ce0 <LL_TIM_OC_Init+0x3c>
 8000cc6:	2b10      	cmp	r3, #16
 8000cc8:	d011      	beq.n	8000cee <LL_TIM_OC_Init+0x4a>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 8000cca:	e033      	b.n	8000d34 <LL_TIM_OC_Init+0x90>
  switch (Channel)
 8000ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cd0:	d022      	beq.n	8000d18 <LL_TIM_OC_Init+0x74>
 8000cd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000cd6:	d026      	beq.n	8000d26 <LL_TIM_OC_Init+0x82>
 8000cd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000cdc:	d015      	beq.n	8000d0a <LL_TIM_OC_Init+0x66>
      break;
 8000cde:	e029      	b.n	8000d34 <LL_TIM_OC_Init+0x90>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8000ce0:	6879      	ldr	r1, [r7, #4]
 8000ce2:	68f8      	ldr	r0, [r7, #12]
 8000ce4:	f000 f82c 	bl	8000d40 <OC1Config>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	75fb      	strb	r3, [r7, #23]
      break;
 8000cec:	e022      	b.n	8000d34 <LL_TIM_OC_Init+0x90>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8000cee:	6879      	ldr	r1, [r7, #4]
 8000cf0:	68f8      	ldr	r0, [r7, #12]
 8000cf2:	f000 f8a5 	bl	8000e40 <OC2Config>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	75fb      	strb	r3, [r7, #23]
      break;
 8000cfa:	e01b      	b.n	8000d34 <LL_TIM_OC_Init+0x90>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8000cfc:	6879      	ldr	r1, [r7, #4]
 8000cfe:	68f8      	ldr	r0, [r7, #12]
 8000d00:	f000 f922 	bl	8000f48 <OC3Config>
 8000d04:	4603      	mov	r3, r0
 8000d06:	75fb      	strb	r3, [r7, #23]
      break;
 8000d08:	e014      	b.n	8000d34 <LL_TIM_OC_Init+0x90>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8000d0a:	6879      	ldr	r1, [r7, #4]
 8000d0c:	68f8      	ldr	r0, [r7, #12]
 8000d0e:	f000 f99f 	bl	8001050 <OC4Config>
 8000d12:	4603      	mov	r3, r0
 8000d14:	75fb      	strb	r3, [r7, #23]
      break;
 8000d16:	e00d      	b.n	8000d34 <LL_TIM_OC_Init+0x90>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8000d18:	6879      	ldr	r1, [r7, #4]
 8000d1a:	68f8      	ldr	r0, [r7, #12]
 8000d1c:	f000 fa04 	bl	8001128 <OC5Config>
 8000d20:	4603      	mov	r3, r0
 8000d22:	75fb      	strb	r3, [r7, #23]
      break;
 8000d24:	e006      	b.n	8000d34 <LL_TIM_OC_Init+0x90>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8000d26:	6879      	ldr	r1, [r7, #4]
 8000d28:	68f8      	ldr	r0, [r7, #12]
 8000d2a:	f000 fa5f 	bl	80011ec <OC6Config>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	75fb      	strb	r3, [r7, #23]
      break;
 8000d32:	bf00      	nop
  }

  return result;
 8000d34:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3718      	adds	r7, #24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6a1b      	ldr	r3, [r3, #32]
 8000d5a:	f023 0201 	bic.w	r2, r3, #1
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6a1b      	ldr	r3, [r3, #32]
 8000d66:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	f023 0303 	bic.w	r3, r3, #3
 8000d7a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000d86:	683a      	ldr	r2, [r7, #0]
 8000d88:	6812      	ldr	r2, [r2, #0]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	f023 0202 	bic.w	r2, r3, #2
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	691b      	ldr	r3, [r3, #16]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	f023 0201 	bic.w	r2, r3, #1
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a20      	ldr	r2, [pc, #128]	; (8000e30 <OC1Config+0xf0>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d00b      	beq.n	8000dca <OC1Config+0x8a>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a1f      	ldr	r2, [pc, #124]	; (8000e34 <OC1Config+0xf4>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d007      	beq.n	8000dca <OC1Config+0x8a>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a1e      	ldr	r2, [pc, #120]	; (8000e38 <OC1Config+0xf8>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d003      	beq.n	8000dca <OC1Config+0x8a>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a1d      	ldr	r2, [pc, #116]	; (8000e3c <OC1Config+0xfc>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d11e      	bne.n	8000e08 <OC1Config+0xc8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	f023 0208 	bic.w	r2, r3, #8
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	695b      	ldr	r3, [r3, #20]
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	f023 0204 	bic.w	r2, r3, #4
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	689b      	ldr	r3, [r3, #8]
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	4313      	orrs	r3, r2
 8000de8:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	69db      	ldr	r3, [r3, #28]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	4313      	orrs	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	68fa      	ldr	r2, [r7, #12]
 8000e12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	4619      	mov	r1, r3
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f7ff fe6a 	bl	8000af4 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	697a      	ldr	r2, [r7, #20]
 8000e24:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000e26:	2300      	movs	r3, #0
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3718      	adds	r7, #24
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40012c00 	.word	0x40012c00
 8000e34:	40014000 	.word	0x40014000
 8000e38:	40014400 	.word	0x40014400
 8000e3c:	40014800 	.word	0x40014800

08000e40 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6a1b      	ldr	r3, [r3, #32]
 8000e5a:	f023 0210 	bic.w	r2, r3, #16
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6a1b      	ldr	r3, [r3, #32]
 8000e66:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	699b      	ldr	r3, [r3, #24]
 8000e72:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000e82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000e86:	683a      	ldr	r2, [r7, #0]
 8000e88:	6812      	ldr	r2, [r2, #0]
 8000e8a:	0212      	lsls	r2, r2, #8
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	f023 0220 	bic.w	r2, r3, #32
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	691b      	ldr	r3, [r3, #16]
 8000e9a:	011b      	lsls	r3, r3, #4
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	f023 0210 	bic.w	r2, r3, #16
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	011b      	lsls	r3, r3, #4
 8000eac:	4313      	orrs	r3, r2
 8000eae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4a21      	ldr	r2, [pc, #132]	; (8000f38 <OC2Config+0xf8>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d00b      	beq.n	8000ed0 <OC2Config+0x90>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	4a20      	ldr	r2, [pc, #128]	; (8000f3c <OC2Config+0xfc>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d007      	beq.n	8000ed0 <OC2Config+0x90>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4a1f      	ldr	r2, [pc, #124]	; (8000f40 <OC2Config+0x100>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d003      	beq.n	8000ed0 <OC2Config+0x90>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4a1e      	ldr	r2, [pc, #120]	; (8000f44 <OC2Config+0x104>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d11f      	bne.n	8000f10 <OC2Config+0xd0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	695b      	ldr	r3, [r3, #20]
 8000eda:	019b      	lsls	r3, r3, #6
 8000edc:	4313      	orrs	r3, r2
 8000ede:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	019b      	lsls	r3, r3, #6
 8000eec:	4313      	orrs	r3, r2
 8000eee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	699b      	ldr	r3, [r3, #24]
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	4313      	orrs	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	69db      	ldr	r3, [r3, #28]
 8000f0a:	00db      	lsls	r3, r3, #3
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	68fa      	ldr	r2, [r7, #12]
 8000f1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	4619      	mov	r1, r3
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f7ff fdf4 	bl	8000b10 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	697a      	ldr	r2, [r7, #20]
 8000f2c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000f2e:	2300      	movs	r3, #0
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3718      	adds	r7, #24
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40012c00 	.word	0x40012c00
 8000f3c:	40014000 	.word	0x40014000
 8000f40:	40014400 	.word	0x40014400
 8000f44:	40014800 	.word	0x40014800

08000f48 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6a1b      	ldr	r3, [r3, #32]
 8000f62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6a1b      	ldr	r3, [r3, #32]
 8000f6e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	69db      	ldr	r3, [r3, #28]
 8000f7a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	f023 0303 	bic.w	r3, r3, #3
 8000f82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f8e:	683a      	ldr	r2, [r7, #0]
 8000f90:	6812      	ldr	r2, [r2, #0]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	691b      	ldr	r3, [r3, #16]
 8000fa0:	021b      	lsls	r3, r3, #8
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	021b      	lsls	r3, r3, #8
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a21      	ldr	r2, [pc, #132]	; (8001040 <OC3Config+0xf8>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d00b      	beq.n	8000fd6 <OC3Config+0x8e>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a20      	ldr	r2, [pc, #128]	; (8001044 <OC3Config+0xfc>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d007      	beq.n	8000fd6 <OC3Config+0x8e>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a1f      	ldr	r2, [pc, #124]	; (8001048 <OC3Config+0x100>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d003      	beq.n	8000fd6 <OC3Config+0x8e>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a1e      	ldr	r2, [pc, #120]	; (800104c <OC3Config+0x104>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d11f      	bne.n	8001016 <OC3Config+0xce>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	695b      	ldr	r3, [r3, #20]
 8000fe0:	029b      	lsls	r3, r3, #10
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	029b      	lsls	r3, r3, #10
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	011b      	lsls	r3, r3, #4
 8001002:	4313      	orrs	r3, r2
 8001004:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	69db      	ldr	r3, [r3, #28]
 8001010:	015b      	lsls	r3, r3, #5
 8001012:	4313      	orrs	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	68fa      	ldr	r2, [r7, #12]
 8001020:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	4619      	mov	r1, r3
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff fd7f 	bl	8000b2c <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	697a      	ldr	r2, [r7, #20]
 8001032:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3718      	adds	r7, #24
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40012c00 	.word	0x40012c00
 8001044:	40014000 	.word	0x40014000
 8001048:	40014400 	.word	0x40014400
 800104c:	40014800 	.word	0x40014800

08001050 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 800105a:	2300      	movs	r3, #0
 800105c:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6a1b      	ldr	r3, [r3, #32]
 800106a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6a1b      	ldr	r3, [r3, #32]
 8001076:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	613b      	str	r3, [r7, #16]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800108a:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001092:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001096:	683a      	ldr	r2, [r7, #0]
 8001098:	6812      	ldr	r2, [r2, #0]
 800109a:	0212      	lsls	r2, r2, #8
 800109c:	4313      	orrs	r3, r2
 800109e:	613b      	str	r3, [r7, #16]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	691b      	ldr	r3, [r3, #16]
 80010aa:	031b      	lsls	r3, r3, #12
 80010ac:	4313      	orrs	r3, r2
 80010ae:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	031b      	lsls	r3, r3, #12
 80010bc:	4313      	orrs	r3, r2
 80010be:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4a15      	ldr	r2, [pc, #84]	; (8001118 <OC4Config+0xc8>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d00b      	beq.n	80010e0 <OC4Config+0x90>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4a14      	ldr	r2, [pc, #80]	; (800111c <OC4Config+0xcc>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d007      	beq.n	80010e0 <OC4Config+0x90>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4a13      	ldr	r2, [pc, #76]	; (8001120 <OC4Config+0xd0>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d003      	beq.n	80010e0 <OC4Config+0x90>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4a12      	ldr	r2, [pc, #72]	; (8001124 <OC4Config+0xd4>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d107      	bne.n	80010f0 <OC4Config+0xa0>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	699b      	ldr	r3, [r3, #24]
 80010ea:	019b      	lsls	r3, r3, #6
 80010ec:	4313      	orrs	r3, r2
 80010ee:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	697a      	ldr	r2, [r7, #20]
 80010f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	4619      	mov	r1, r3
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff fd20 	bl	8000b48 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800110e:	2300      	movs	r3, #0
}
 8001110:	4618      	mov	r0, r3
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40012c00 	.word	0x40012c00
 800111c:	40014000 	.word	0x40014000
 8001120:	40014400 	.word	0x40014400
 8001124:	40014800 	.word	0x40014800

08001128 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001136:	2300      	movs	r3, #0
 8001138:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6a1b      	ldr	r3, [r3, #32]
 800113e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6a1b      	ldr	r3, [r3, #32]
 800114a:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001150:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800115c:	683a      	ldr	r2, [r7, #0]
 800115e:	6812      	ldr	r2, [r2, #0]
 8001160:	4313      	orrs	r3, r2
 8001162:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	691b      	ldr	r3, [r3, #16]
 800116e:	041b      	lsls	r3, r3, #16
 8001170:	4313      	orrs	r3, r2
 8001172:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	041b      	lsls	r3, r3, #16
 8001180:	4313      	orrs	r3, r2
 8001182:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4a15      	ldr	r2, [pc, #84]	; (80011dc <OC5Config+0xb4>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d00b      	beq.n	80011a4 <OC5Config+0x7c>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4a14      	ldr	r2, [pc, #80]	; (80011e0 <OC5Config+0xb8>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d007      	beq.n	80011a4 <OC5Config+0x7c>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4a13      	ldr	r2, [pc, #76]	; (80011e4 <OC5Config+0xbc>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d003      	beq.n	80011a4 <OC5Config+0x7c>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a12      	ldr	r2, [pc, #72]	; (80011e8 <OC5Config+0xc0>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d109      	bne.n	80011b8 <OC5Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	021b      	lsls	r3, r3, #8
 80011b2:	431a      	orrs	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	68fa      	ldr	r2, [r7, #12]
 80011bc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	4619      	mov	r1, r3
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f7ff fccd 	bl	8000b64 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	68ba      	ldr	r2, [r7, #8]
 80011ce:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40012c00 	.word	0x40012c00
 80011e0:	40014000 	.word	0x40014000
 80011e4:	40014400 	.word	0x40014400
 80011e8:	40014800 	.word	0x40014800

080011ec <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 80011f6:	2300      	movs	r3, #0
 80011f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80011fa:	2300      	movs	r3, #0
 80011fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6a1b      	ldr	r3, [r3, #32]
 8001202:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6a1b      	ldr	r3, [r3, #32]
 800120e:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001214:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800121c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001220:	683a      	ldr	r2, [r7, #0]
 8001222:	6812      	ldr	r2, [r2, #0]
 8001224:	0212      	lsls	r2, r2, #8
 8001226:	4313      	orrs	r3, r2
 8001228:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	691b      	ldr	r3, [r3, #16]
 8001234:	051b      	lsls	r3, r3, #20
 8001236:	4313      	orrs	r3, r2
 8001238:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	051b      	lsls	r3, r3, #20
 8001246:	4313      	orrs	r3, r2
 8001248:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a14      	ldr	r2, [pc, #80]	; (80012a0 <OC6Config+0xb4>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d00b      	beq.n	800126a <OC6Config+0x7e>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a13      	ldr	r2, [pc, #76]	; (80012a4 <OC6Config+0xb8>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d007      	beq.n	800126a <OC6Config+0x7e>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a12      	ldr	r2, [pc, #72]	; (80012a8 <OC6Config+0xbc>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d003      	beq.n	800126a <OC6Config+0x7e>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a11      	ldr	r2, [pc, #68]	; (80012ac <OC6Config+0xc0>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d109      	bne.n	800127e <OC6Config+0x92>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	699b      	ldr	r3, [r3, #24]
 8001276:	029b      	lsls	r3, r3, #10
 8001278:	431a      	orrs	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	68fa      	ldr	r2, [r7, #12]
 8001282:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	4619      	mov	r1, r3
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff fc78 	bl	8000b80 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	68ba      	ldr	r2, [r7, #8]
 8001294:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001296:	2300      	movs	r3, #0
}
 8001298:	4618      	mov	r0, r3
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40012c00 	.word	0x40012c00
 80012a4:	40014000 	.word	0x40014000
 80012a8:	40014400 	.word	0x40014400
 80012ac:	40014800 	.word	0x40014800

080012b0 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	fbb2 f3f3 	udiv	r3, r2, r3
 80012c2:	4a07      	ldr	r2, [pc, #28]	; (80012e0 <LL_InitTick+0x30>)
 80012c4:	3b01      	subs	r3, #1
 80012c6:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <LL_InitTick+0x30>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ce:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <LL_InitTick+0x30>)
 80012d0:	2205      	movs	r2, #5
 80012d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	e000e010 	.word	0xe000e010

080012e4 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80012ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f7ff ffdd 	bl	80012b0 <LL_InitTick>
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
	...

08001300 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8001308:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <LL_mDelay+0x44>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800130e:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001316:	d00c      	beq.n	8001332 <LL_mDelay+0x32>
  {
    Delay++;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3301      	adds	r3, #1
 800131c:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800131e:	e008      	b.n	8001332 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001320:	4b08      	ldr	r3, [pc, #32]	; (8001344 <LL_mDelay+0x44>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d002      	beq.n	8001332 <LL_mDelay+0x32>
    {
      Delay--;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3b01      	subs	r3, #1
 8001330:	607b      	str	r3, [r7, #4]
  while (Delay)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d1f3      	bne.n	8001320 <LL_mDelay+0x20>
    }
  }
}
 8001338:	bf00      	nop
 800133a:	3714      	adds	r7, #20
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	e000e010 	.word	0xe000e010

08001348 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001350:	4a04      	ldr	r2, [pc, #16]	; (8001364 <LL_SetSystemCoreClock+0x1c>)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6013      	str	r3, [r2, #0]
}
 8001356:	bf00      	nop
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	2000000c 	.word	0x2000000c

08001368 <LL_TIM_ClearFlag_UPDATE>:
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f06f 0201 	mvn.w	r2, #1
 8001376:	611a      	str	r2, [r3, #16]
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF));
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	691b      	ldr	r3, [r3, #16]
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	2b01      	cmp	r3, #1
 8001396:	bf0c      	ite	eq
 8001398:	2301      	moveq	r3, #1
 800139a:	2300      	movne	r3, #0
 800139c:	b2db      	uxtb	r3, r3
}
 800139e:	4618      	mov	r0, r3
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80013aa:	b480      	push	{r7}
 80013ac:	b083      	sub	sp, #12
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
 80013b2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	683a      	ldr	r2, [r7, #0]
 80013b8:	619a      	str	r2, [r3, #24]
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80013c6:	b480      	push	{r7}
 80013c8:	b083      	sub	sp, #12
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
 80013ce:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	683a      	ldr	r2, [r7, #0]
 80013d4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
	...

080013e4 <resetSegments>:
void updateDisplay(void);
void setDigit(uint8_t pos);

/*Reset (turn-off) all the segments of display*/
void resetSegments(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_11);
 80013e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f0:	f7ff ffdb 	bl	80013aa <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_8);
 80013f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013fc:	f7ff ffd5 	bl	80013aa <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_1);
 8001400:	2102      	movs	r1, #2
 8001402:	480e      	ldr	r0, [pc, #56]	; (800143c <resetSegments+0x58>)
 8001404:	f7ff ffd1 	bl	80013aa <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8001408:	2120      	movs	r1, #32
 800140a:	480c      	ldr	r0, [pc, #48]	; (800143c <resetSegments+0x58>)
 800140c:	f7ff ffcd 	bl	80013aa <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8001410:	2110      	movs	r1, #16
 8001412:	480a      	ldr	r0, [pc, #40]	; (800143c <resetSegments+0x58>)
 8001414:	f7ff ffc9 	bl	80013aa <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8001418:	2101      	movs	r1, #1
 800141a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800141e:	f7ff ffc4 	bl	80013aa <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_1);
 8001422:	2102      	movs	r1, #2
 8001424:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001428:	f7ff ffbf 	bl	80013aa <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_3);
 800142c:	2108      	movs	r1, #8
 800142e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001432:	f7ff ffba 	bl	80013aa <LL_GPIO_SetOutputPin>
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	48000400 	.word	0x48000400

08001440 <setSegments>:

/*Set (turn-on) all the segments of display*/
void setSegments(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8001444:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001448:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800144c:	f7ff ffbb 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8001450:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001454:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001458:	f7ff ffb5 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1);
 800145c:	2102      	movs	r1, #2
 800145e:	480e      	ldr	r0, [pc, #56]	; (8001498 <setSegments+0x58>)
 8001460:	f7ff ffb1 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8001464:	2120      	movs	r1, #32
 8001466:	480c      	ldr	r0, [pc, #48]	; (8001498 <setSegments+0x58>)
 8001468:	f7ff ffad 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 800146c:	2110      	movs	r1, #16
 800146e:	480a      	ldr	r0, [pc, #40]	; (8001498 <setSegments+0x58>)
 8001470:	f7ff ffa9 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8001474:	2101      	movs	r1, #1
 8001476:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800147a:	f7ff ffa4 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_1);
 800147e:	2102      	movs	r1, #2
 8001480:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001484:	f7ff ff9f 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8001488:	2108      	movs	r1, #8
 800148a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800148e:	f7ff ff9a 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	48000400 	.word	0x48000400

0800149c <resetDigits>:

/* Reset (turn-off) all digits*/
void resetDigits(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_2);
 80014a0:	2104      	movs	r1, #4
 80014a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014a6:	f7ff ff8e 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);
 80014aa:	2120      	movs	r1, #32
 80014ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014b0:	f7ff ff89 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 80014b4:	2110      	movs	r1, #16
 80014b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ba:	f7ff ff84 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_6);
 80014be:	2140      	movs	r1, #64	; 0x40
 80014c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014c4:	f7ff ff7f 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7);
 80014c8:	2180      	movs	r1, #128	; 0x80
 80014ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ce:	f7ff ff7a 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
	...

080014d8 <setDigits>:

/* Reset (turn-on) all digits*/
void setDigits(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
	DIGIT_1_ON;
 80014dc:	2101      	movs	r1, #1
 80014de:	480d      	ldr	r0, [pc, #52]	; (8001514 <setDigits+0x3c>)
 80014e0:	f7ff ff63 	bl	80013aa <LL_GPIO_SetOutputPin>
	DIGIT_2_ON;
 80014e4:	2110      	movs	r1, #16
 80014e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ea:	f7ff ff5e 	bl	80013aa <LL_GPIO_SetOutputPin>
	DIGIT_3_ON;
 80014ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014f6:	f7ff ff58 	bl	80013aa <LL_GPIO_SetOutputPin>
	DIGIT_4_ON;
 80014fa:	2104      	movs	r1, #4
 80014fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001500:	f7ff ff53 	bl	80013aa <LL_GPIO_SetOutputPin>
	DIGIT_TIME_ON;
 8001504:	2180      	movs	r1, #128	; 0x80
 8001506:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800150a:	f7ff ff4e 	bl	80013aa <LL_GPIO_SetOutputPin>
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	48000400 	.word	0x48000400

08001518 <setDecimalPoint>:

void setDecimalPoint(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTDP_PORT, SEGMENTDP_PIN);
 800151c:	2102      	movs	r1, #2
 800151e:	4802      	ldr	r0, [pc, #8]	; (8001528 <setDecimalPoint+0x10>)
 8001520:	f7ff ff51 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}
 8001528:	48000400 	.word	0x48000400

0800152c <setOne>:

/* Functions to display numbers 0 - 9 */
void setOne(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
	// B,C
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001530:	2101      	movs	r1, #1
 8001532:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001536:	f7ff ff46 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800153a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800153e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001542:	f7ff ff40 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
	...

0800154c <setTwo>:

void setTwo(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
	// A,B,G,E,D
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001550:	2101      	movs	r1, #1
 8001552:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001556:	f7ff ff36 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800155a:	2102      	movs	r1, #2
 800155c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001560:	f7ff ff31 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001564:	2110      	movs	r1, #16
 8001566:	4807      	ldr	r0, [pc, #28]	; (8001584 <setTwo+0x38>)
 8001568:	f7ff ff2d 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800156c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001570:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001574:	f7ff ff27 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001578:	2120      	movs	r1, #32
 800157a:	4802      	ldr	r0, [pc, #8]	; (8001584 <setTwo+0x38>)
 800157c:	f7ff ff23 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001580:	bf00      	nop
 8001582:	bd80      	pop	{r7, pc}
 8001584:	48000400 	.word	0x48000400

08001588 <setThree>:

void setThree(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
	// A,B,G,C,D
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 800158c:	2101      	movs	r1, #1
 800158e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001592:	f7ff ff18 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001596:	2102      	movs	r1, #2
 8001598:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800159c:	f7ff ff13 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80015a0:	2110      	movs	r1, #16
 80015a2:	4807      	ldr	r0, [pc, #28]	; (80015c0 <setThree+0x38>)
 80015a4:	f7ff ff0f 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80015a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015b0:	f7ff ff09 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80015b4:	2120      	movs	r1, #32
 80015b6:	4802      	ldr	r0, [pc, #8]	; (80015c0 <setThree+0x38>)
 80015b8:	f7ff ff05 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 80015bc:	bf00      	nop
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	48000400 	.word	0x48000400

080015c4 <setFour>:

void setFour(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
	// F,B,G,C
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80015c8:	2108      	movs	r1, #8
 80015ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ce:	f7ff fefa 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80015d2:	2101      	movs	r1, #1
 80015d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015d8:	f7ff fef5 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80015dc:	2110      	movs	r1, #16
 80015de:	4805      	ldr	r0, [pc, #20]	; (80015f4 <setFour+0x30>)
 80015e0:	f7ff fef1 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80015e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ec:	f7ff feeb 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 80015f0:	bf00      	nop
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	48000400 	.word	0x48000400

080015f8 <setFive>:

void setFive(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
	// A,F,G,C,D
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80015fc:	2108      	movs	r1, #8
 80015fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001602:	f7ff fee0 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001606:	2120      	movs	r1, #32
 8001608:	4809      	ldr	r0, [pc, #36]	; (8001630 <setFive+0x38>)
 800160a:	f7ff fedc 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800160e:	2110      	movs	r1, #16
 8001610:	4807      	ldr	r0, [pc, #28]	; (8001630 <setFive+0x38>)
 8001612:	f7ff fed8 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001616:	f44f 7180 	mov.w	r1, #256	; 0x100
 800161a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800161e:	f7ff fed2 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001622:	2102      	movs	r1, #2
 8001624:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001628:	f7ff fecd 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 800162c:	bf00      	nop
 800162e:	bd80      	pop	{r7, pc}
 8001630:	48000400 	.word	0x48000400

08001634 <setSix>:

void setSix(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
	// A,F,G,E,C,D
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001638:	2108      	movs	r1, #8
 800163a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800163e:	f7ff fec2 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001642:	2120      	movs	r1, #32
 8001644:	480c      	ldr	r0, [pc, #48]	; (8001678 <setSix+0x44>)
 8001646:	f7ff febe 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800164a:	2110      	movs	r1, #16
 800164c:	480a      	ldr	r0, [pc, #40]	; (8001678 <setSix+0x44>)
 800164e:	f7ff feba 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001652:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001656:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800165a:	f7ff feb4 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800165e:	2102      	movs	r1, #2
 8001660:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001664:	f7ff feaf 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001668:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800166c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001670:	f7ff fea9 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001674:	bf00      	nop
 8001676:	bd80      	pop	{r7, pc}
 8001678:	48000400 	.word	0x48000400

0800167c <setSeven>:

void setSeven(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
	// A,B,C
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001680:	2101      	movs	r1, #1
 8001682:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001686:	f7ff fe9e 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800168a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800168e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001692:	f7ff fe98 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001696:	2102      	movs	r1, #2
 8001698:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800169c:	f7ff fe93 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 80016a0:	bf00      	nop
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <setEight>:

void setEight(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
	// A,B,C,D,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80016a8:	2108      	movs	r1, #8
 80016aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ae:	f7ff fe8a 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80016b2:	2120      	movs	r1, #32
 80016b4:	480f      	ldr	r0, [pc, #60]	; (80016f4 <setEight+0x50>)
 80016b6:	f7ff fe86 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80016ba:	2110      	movs	r1, #16
 80016bc:	480d      	ldr	r0, [pc, #52]	; (80016f4 <setEight+0x50>)
 80016be:	f7ff fe82 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80016c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ca:	f7ff fe7c 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80016ce:	2102      	movs	r1, #2
 80016d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d4:	f7ff fe77 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80016d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e0:	f7ff fe71 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80016e4:	2101      	movs	r1, #1
 80016e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ea:	f7ff fe6c 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	48000400 	.word	0x48000400

080016f8 <setNine>:

void setNine(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
	// A,B,C
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80016fc:	2101      	movs	r1, #1
 80016fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001702:	f7ff fe60 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001706:	f44f 7180 	mov.w	r1, #256	; 0x100
 800170a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800170e:	f7ff fe5a 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001712:	2102      	movs	r1, #2
 8001714:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001718:	f7ff fe55 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800171c:	2110      	movs	r1, #16
 800171e:	4805      	ldr	r0, [pc, #20]	; (8001734 <setNine+0x3c>)
 8001720:	f7ff fe51 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001724:	2108      	movs	r1, #8
 8001726:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800172a:	f7ff fe4c 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	48000400 	.word	0x48000400

08001738 <setZero>:

void setZero(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
	// A,B,C,D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800173c:	2108      	movs	r1, #8
 800173e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001742:	f7ff fe40 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001746:	2120      	movs	r1, #32
 8001748:	480d      	ldr	r0, [pc, #52]	; (8001780 <setZero+0x48>)
 800174a:	f7ff fe3c 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800174e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001752:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001756:	f7ff fe36 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800175a:	2102      	movs	r1, #2
 800175c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001760:	f7ff fe31 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001764:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001768:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800176c:	f7ff fe2b 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001770:	2101      	movs	r1, #1
 8001772:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001776:	f7ff fe26 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	48000400 	.word	0x48000400

08001784 <setA>:

void setA(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
	// A,B,C,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001788:	2108      	movs	r1, #8
 800178a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800178e:	f7ff fe1a 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001792:	2110      	movs	r1, #16
 8001794:	480d      	ldr	r0, [pc, #52]	; (80017cc <setA+0x48>)
 8001796:	f7ff fe16 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800179a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800179e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a2:	f7ff fe10 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80017a6:	2102      	movs	r1, #2
 80017a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ac:	f7ff fe0b 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80017b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017b8:	f7ff fe05 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80017bc:	2101      	movs	r1, #1
 80017be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017c2:	f7ff fe00 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	48000400 	.word	0x48000400

080017d0 <seta>:

void seta(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
	// A,B,C,E,D,G
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80017d4:	2120      	movs	r1, #32
 80017d6:	480f      	ldr	r0, [pc, #60]	; (8001814 <seta+0x44>)
 80017d8:	f7ff fdf5 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80017dc:	2110      	movs	r1, #16
 80017de:	480d      	ldr	r0, [pc, #52]	; (8001814 <seta+0x44>)
 80017e0:	f7ff fdf1 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80017e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ec:	f7ff fdeb 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80017f0:	2102      	movs	r1, #2
 80017f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017f6:	f7ff fde6 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80017fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001802:	f7ff fde0 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001806:	2101      	movs	r1, #1
 8001808:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800180c:	f7ff fddb 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001810:	bf00      	nop
 8001812:	bd80      	pop	{r7, pc}
 8001814:	48000400 	.word	0x48000400

08001818 <setb>:

void setb(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
	// C,D,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800181c:	2108      	movs	r1, #8
 800181e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001822:	f7ff fdd0 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001826:	2110      	movs	r1, #16
 8001828:	480a      	ldr	r0, [pc, #40]	; (8001854 <setb+0x3c>)
 800182a:	f7ff fdcc 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800182e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001832:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001836:	f7ff fdc6 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800183a:	2120      	movs	r1, #32
 800183c:	4805      	ldr	r0, [pc, #20]	; (8001854 <setb+0x3c>)
 800183e:	f7ff fdc2 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001842:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001846:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800184a:	f7ff fdbc 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	48000400 	.word	0x48000400

08001858 <setC>:

void setC(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
	// A,D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800185c:	2108      	movs	r1, #8
 800185e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001862:	f7ff fdb0 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001866:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800186a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800186e:	f7ff fdaa 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001872:	2102      	movs	r1, #2
 8001874:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001878:	f7ff fda5 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800187c:	2120      	movs	r1, #32
 800187e:	4802      	ldr	r0, [pc, #8]	; (8001888 <setC+0x30>)
 8001880:	f7ff fda1 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001884:	bf00      	nop
 8001886:	bd80      	pop	{r7, pc}
 8001888:	48000400 	.word	0x48000400

0800188c <setc>:

void setc(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
	// D,E,G
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001890:	2120      	movs	r1, #32
 8001892:	4807      	ldr	r0, [pc, #28]	; (80018b0 <setc+0x24>)
 8001894:	f7ff fd97 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001898:	2110      	movs	r1, #16
 800189a:	4805      	ldr	r0, [pc, #20]	; (80018b0 <setc+0x24>)
 800189c:	f7ff fd93 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80018a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018a8:	f7ff fd8d 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 80018ac:	bf00      	nop
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	48000400 	.word	0x48000400

080018b4 <setd>:

void setd(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
	// B,C,D,E,G
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80018b8:	2120      	movs	r1, #32
 80018ba:	480d      	ldr	r0, [pc, #52]	; (80018f0 <setd+0x3c>)
 80018bc:	f7ff fd83 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80018c0:	2110      	movs	r1, #16
 80018c2:	480b      	ldr	r0, [pc, #44]	; (80018f0 <setd+0x3c>)
 80018c4:	f7ff fd7f 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80018c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018d0:	f7ff fd79 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80018d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018dc:	f7ff fd73 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80018e0:	2101      	movs	r1, #1
 80018e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018e6:	f7ff fd6e 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	48000400 	.word	0x48000400

080018f4 <setE>:

void setE(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
	// A,D,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80018f8:	2108      	movs	r1, #8
 80018fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018fe:	f7ff fd62 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001902:	2110      	movs	r1, #16
 8001904:	4809      	ldr	r0, [pc, #36]	; (800192c <setE+0x38>)
 8001906:	f7ff fd5e 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800190a:	2120      	movs	r1, #32
 800190c:	4807      	ldr	r0, [pc, #28]	; (800192c <setE+0x38>)
 800190e:	f7ff fd5a 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001912:	2102      	movs	r1, #2
 8001914:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001918:	f7ff fd55 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800191c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001920:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001924:	f7ff fd4f 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001928:	bf00      	nop
 800192a:	bd80      	pop	{r7, pc}
 800192c:	48000400 	.word	0x48000400

08001930 <setF>:

void setF(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
	// A,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001934:	2108      	movs	r1, #8
 8001936:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800193a:	f7ff fd44 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800193e:	2110      	movs	r1, #16
 8001940:	4807      	ldr	r0, [pc, #28]	; (8001960 <setF+0x30>)
 8001942:	f7ff fd40 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001946:	2102      	movs	r1, #2
 8001948:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800194c:	f7ff fd3b 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001950:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001954:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001958:	f7ff fd35 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 800195c:	bf00      	nop
 800195e:	bd80      	pop	{r7, pc}
 8001960:	48000400 	.word	0x48000400

08001964 <setG>:

void setG(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
	// A,C,D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001968:	2108      	movs	r1, #8
 800196a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800196e:	f7ff fd2a 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001972:	2120      	movs	r1, #32
 8001974:	480a      	ldr	r0, [pc, #40]	; (80019a0 <setG+0x3c>)
 8001976:	f7ff fd26 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800197a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800197e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001982:	f7ff fd20 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001986:	2102      	movs	r1, #2
 8001988:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800198c:	f7ff fd1b 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001990:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001994:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001998:	f7ff fd15 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 800199c:	bf00      	nop
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	48000400 	.word	0x48000400

080019a4 <setH>:

void setH(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
	// B,C,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80019a8:	2108      	movs	r1, #8
 80019aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ae:	f7ff fd0a 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80019b2:	2110      	movs	r1, #16
 80019b4:	480a      	ldr	r0, [pc, #40]	; (80019e0 <setH+0x3c>)
 80019b6:	f7ff fd06 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80019ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019c2:	f7ff fd00 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80019c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ce:	f7ff fcfa 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80019d2:	2101      	movs	r1, #1
 80019d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019d8:	f7ff fcf5 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 80019dc:	bf00      	nop
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	48000400 	.word	0x48000400

080019e4 <seth>:

void seth(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
	// C,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80019e8:	2108      	movs	r1, #8
 80019ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ee:	f7ff fcea 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80019f2:	2110      	movs	r1, #16
 80019f4:	4808      	ldr	r0, [pc, #32]	; (8001a18 <seth+0x34>)
 80019f6:	f7ff fce6 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80019fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a02:	f7ff fce0 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001a06:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a0e:	f7ff fcda 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	48000400 	.word	0x48000400

08001a1c <setI>:

void setI(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
	// E,F
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001a20:	2108      	movs	r1, #8
 8001a22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a26:	f7ff fcce 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001a2a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a32:	f7ff fcc8 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
	...

08001a3c <setJ>:

void setJ(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
	// B,C,D,E
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001a40:	2120      	movs	r1, #32
 8001a42:	480b      	ldr	r0, [pc, #44]	; (8001a70 <setJ+0x34>)
 8001a44:	f7ff fcbf 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001a48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a50:	f7ff fcb9 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001a54:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a5c:	f7ff fcb3 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001a60:	2101      	movs	r1, #1
 8001a62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a66:	f7ff fcae 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	48000400 	.word	0x48000400

08001a74 <setL>:

void setL(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
	// D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001a78:	2108      	movs	r1, #8
 8001a7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a7e:	f7ff fca2 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001a82:	2120      	movs	r1, #32
 8001a84:	4805      	ldr	r0, [pc, #20]	; (8001a9c <setL+0x28>)
 8001a86:	f7ff fc9e 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001a8a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a92:	f7ff fc98 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	48000400 	.word	0x48000400

08001aa0 <setn>:

void setn(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
	// C,E,G
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001aa4:	2110      	movs	r1, #16
 8001aa6:	4808      	ldr	r0, [pc, #32]	; (8001ac8 <setn+0x28>)
 8001aa8:	f7ff fc8d 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001aac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ab0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ab4:	f7ff fc87 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001ab8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001abc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ac0:	f7ff fc81 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001ac4:	bf00      	nop
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	48000400 	.word	0x48000400

08001acc <setO>:

void setO(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
	// A,B,C,D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001ad0:	2108      	movs	r1, #8
 8001ad2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ad6:	f7ff fc76 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001ada:	2120      	movs	r1, #32
 8001adc:	480d      	ldr	r0, [pc, #52]	; (8001b14 <setO+0x48>)
 8001ade:	f7ff fc72 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001ae2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ae6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aea:	f7ff fc6c 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001aee:	2102      	movs	r1, #2
 8001af0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001af4:	f7ff fc67 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001af8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001afc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b00:	f7ff fc61 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001b04:	2101      	movs	r1, #1
 8001b06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b0a:	f7ff fc5c 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001b0e:	bf00      	nop
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	48000400 	.word	0x48000400

08001b18 <seto>:

void seto(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
	// C,D,E,G
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001b1c:	2120      	movs	r1, #32
 8001b1e:	480a      	ldr	r0, [pc, #40]	; (8001b48 <seto+0x30>)
 8001b20:	f7ff fc51 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001b24:	2110      	movs	r1, #16
 8001b26:	4808      	ldr	r0, [pc, #32]	; (8001b48 <seto+0x30>)
 8001b28:	f7ff fc4d 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001b2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b34:	f7ff fc47 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001b38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b40:	f7ff fc41 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001b44:	bf00      	nop
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	48000400 	.word	0x48000400

08001b4c <setP>:

void setP(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
	// A,B,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001b50:	2108      	movs	r1, #8
 8001b52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b56:	f7ff fc36 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001b5a:	2110      	movs	r1, #16
 8001b5c:	480a      	ldr	r0, [pc, #40]	; (8001b88 <setP+0x3c>)
 8001b5e:	f7ff fc32 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001b62:	2102      	movs	r1, #2
 8001b64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b68:	f7ff fc2d 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001b6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b74:	f7ff fc27 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001b78:	2101      	movs	r1, #1
 8001b7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b7e:	f7ff fc22 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	48000400 	.word	0x48000400

08001b8c <setq>:

void setq(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
	// A,B,C,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001b90:	2108      	movs	r1, #8
 8001b92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b96:	f7ff fc16 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001b9a:	2110      	movs	r1, #16
 8001b9c:	480a      	ldr	r0, [pc, #40]	; (8001bc8 <setq+0x3c>)
 8001b9e:	f7ff fc12 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001ba2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ba6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001baa:	f7ff fc0c 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001bae:	2102      	movs	r1, #2
 8001bb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bb4:	f7ff fc07 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001bb8:	2101      	movs	r1, #1
 8001bba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bbe:	f7ff fc02 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	48000400 	.word	0x48000400

08001bcc <setr>:

void setr(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
	// E,G
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001bd0:	2110      	movs	r1, #16
 8001bd2:	4805      	ldr	r0, [pc, #20]	; (8001be8 <setr+0x1c>)
 8001bd4:	f7ff fbf7 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001bd8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001be0:	f7ff fbf1 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001be4:	bf00      	nop
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	48000400 	.word	0x48000400

08001bec <setS>:

void setS(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
	// A,C,D,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001bf0:	2108      	movs	r1, #8
 8001bf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bf6:	f7ff fbe6 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001bfa:	2110      	movs	r1, #16
 8001bfc:	4809      	ldr	r0, [pc, #36]	; (8001c24 <setS+0x38>)
 8001bfe:	f7ff fbe2 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001c02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c0a:	f7ff fbdc 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001c0e:	2102      	movs	r1, #2
 8001c10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c14:	f7ff fbd7 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001c18:	2120      	movs	r1, #32
 8001c1a:	4802      	ldr	r0, [pc, #8]	; (8001c24 <setS+0x38>)
 8001c1c:	f7ff fbd3 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001c20:	bf00      	nop
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	48000400 	.word	0x48000400

08001c28 <sett>:

void sett(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
	// D,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001c2c:	2108      	movs	r1, #8
 8001c2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c32:	f7ff fbc8 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001c36:	2110      	movs	r1, #16
 8001c38:	4807      	ldr	r0, [pc, #28]	; (8001c58 <sett+0x30>)
 8001c3a:	f7ff fbc4 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001c3e:	2120      	movs	r1, #32
 8001c40:	4805      	ldr	r0, [pc, #20]	; (8001c58 <sett+0x30>)
 8001c42:	f7ff fbc0 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001c46:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c4e:	f7ff fbba 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	48000400 	.word	0x48000400

08001c5c <setU>:

void setU(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
	// B,C,D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001c60:	2108      	movs	r1, #8
 8001c62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c66:	f7ff fbae 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001c6a:	2120      	movs	r1, #32
 8001c6c:	480a      	ldr	r0, [pc, #40]	; (8001c98 <setU+0x3c>)
 8001c6e:	f7ff fbaa 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001c72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c7a:	f7ff fba4 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001c7e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c86:	f7ff fb9e 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c90:	f7ff fb99 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001c94:	bf00      	nop
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	48000400 	.word	0x48000400

08001c9c <setu>:

void setu(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
	// C,D,E
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001ca0:	2120      	movs	r1, #32
 8001ca2:	4808      	ldr	r0, [pc, #32]	; (8001cc4 <setu+0x28>)
 8001ca4:	f7ff fb8f 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001ca8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cb0:	f7ff fb89 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001cb4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cbc:	f7ff fb83 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001cc0:	bf00      	nop
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	48000400 	.word	0x48000400

08001cc8 <sety>:

void sety(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
	// B,C,D,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001ccc:	2108      	movs	r1, #8
 8001cce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cd2:	f7ff fb78 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001cd6:	2110      	movs	r1, #16
 8001cd8:	4809      	ldr	r0, [pc, #36]	; (8001d00 <sety+0x38>)
 8001cda:	f7ff fb74 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001cde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ce2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ce6:	f7ff fb6e 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001cea:	2120      	movs	r1, #32
 8001cec:	4804      	ldr	r0, [pc, #16]	; (8001d00 <sety+0x38>)
 8001cee:	f7ff fb6a 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cf8:	f7ff fb65 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001cfc:	bf00      	nop
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	48000400 	.word	0x48000400

08001d04 <setK>:

void setK(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
	// A,C,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001d08:	2108      	movs	r1, #8
 8001d0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d0e:	f7ff fb5a 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001d12:	2110      	movs	r1, #16
 8001d14:	480a      	ldr	r0, [pc, #40]	; (8001d40 <setK+0x3c>)
 8001d16:	f7ff fb56 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001d1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d22:	f7ff fb50 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001d26:	2102      	movs	r1, #2
 8001d28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d2c:	f7ff fb4b 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001d30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d38:	f7ff fb45 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001d3c:	bf00      	nop
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	48000400 	.word	0x48000400

08001d44 <setM>:

void setM(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
	// A,B,D,F
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001d48:	2108      	movs	r1, #8
 8001d4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d4e:	f7ff fb3a 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001d52:	2120      	movs	r1, #32
 8001d54:	4807      	ldr	r0, [pc, #28]	; (8001d74 <setM+0x30>)
 8001d56:	f7ff fb36 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001d5a:	2102      	movs	r1, #2
 8001d5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d60:	f7ff fb31 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001d64:	2101      	movs	r1, #1
 8001d66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d6a:	f7ff fb2c 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	48000400 	.word	0x48000400

08001d78 <setV>:

void setV(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
	// B,D,F
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001d7c:	2108      	movs	r1, #8
 8001d7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d82:	f7ff fb20 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001d86:	2120      	movs	r1, #32
 8001d88:	4804      	ldr	r0, [pc, #16]	; (8001d9c <setV+0x24>)
 8001d8a:	f7ff fb1c 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001d8e:	2101      	movs	r1, #1
 8001d90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d94:	f7ff fb17 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001d98:	bf00      	nop
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	48000400 	.word	0x48000400

08001da0 <setW>:

void setW(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
	// B,C,D,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001da4:	2108      	movs	r1, #8
 8001da6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001daa:	f7ff fb0c 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001dae:	2120      	movs	r1, #32
 8001db0:	480c      	ldr	r0, [pc, #48]	; (8001de4 <setW+0x44>)
 8001db2:	f7ff fb08 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001db6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dbe:	f7ff fb02 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dc8:	f7ff fafd 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001dcc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001dd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dd4:	f7ff faf7 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001dd8:	2110      	movs	r1, #16
 8001dda:	4802      	ldr	r0, [pc, #8]	; (8001de4 <setW+0x44>)
 8001ddc:	f7ff faf3 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001de0:	bf00      	nop
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	48000400 	.word	0x48000400

08001de8 <setX>:

void setX(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
	// A,G,D
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001dec:	2110      	movs	r1, #16
 8001dee:	4807      	ldr	r0, [pc, #28]	; (8001e0c <setX+0x24>)
 8001df0:	f7ff fae9 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001df4:	2120      	movs	r1, #32
 8001df6:	4805      	ldr	r0, [pc, #20]	; (8001e0c <setX+0x24>)
 8001df8:	f7ff fae5 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001dfc:	2102      	movs	r1, #2
 8001dfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e02:	f7ff fae0 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	48000400 	.word	0x48000400

08001e10 <setZ>:

void setZ(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
	// A,B,D,E,G
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001e14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e1c:	f7ff fad3 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001e20:	2120      	movs	r1, #32
 8001e22:	4809      	ldr	r0, [pc, #36]	; (8001e48 <setZ+0x38>)
 8001e24:	f7ff facf 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001e28:	2102      	movs	r1, #2
 8001e2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e2e:	f7ff faca 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001e32:	2101      	movs	r1, #1
 8001e34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e38:	f7ff fac5 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001e3c:	2110      	movs	r1, #16
 8001e3e:	4802      	ldr	r0, [pc, #8]	; (8001e48 <setZ+0x38>)
 8001e40:	f7ff fac1 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001e44:	bf00      	nop
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	48000400 	.word	0x48000400

08001e4c <setUnderscore>:

void setUnderscore(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
	// D
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001e50:	2120      	movs	r1, #32
 8001e52:	4802      	ldr	r0, [pc, #8]	; (8001e5c <setUnderscore+0x10>)
 8001e54:	f7ff fab7 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001e58:	bf00      	nop
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	48000400 	.word	0x48000400

08001e60 <displayNumber>:

/**
 * Pre-process number before it is displayed. Extract digits of the number
 */
void displayNumber(char *text)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	73fb      	strb	r3, [r7, #15]

	dDisplayData.digit_num = 4;
 8001e6c:	4b0f      	ldr	r3, [pc, #60]	; (8001eac <displayNumber+0x4c>)
 8001e6e:	2204      	movs	r2, #4
 8001e70:	711a      	strb	r2, [r3, #4]
	dDisplayData.negative = 0;
 8001e72:	4b0e      	ldr	r3, [pc, #56]	; (8001eac <displayNumber+0x4c>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	715a      	strb	r2, [r3, #5]
	dDisplayData.resolution = 0;
 8001e78:	4b0c      	ldr	r3, [pc, #48]	; (8001eac <displayNumber+0x4c>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	719a      	strb	r2, [r3, #6]

	for (i = 0; i < 4; i++) {
 8001e7e:	2300      	movs	r3, #0
 8001e80:	73fb      	strb	r3, [r7, #15]
 8001e82:	e009      	b.n	8001e98 <displayNumber+0x38>
		dDisplayData.digit[i] = *text++;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	1c5a      	adds	r2, r3, #1
 8001e88:	607a      	str	r2, [r7, #4]
 8001e8a:	7bfa      	ldrb	r2, [r7, #15]
 8001e8c:	7819      	ldrb	r1, [r3, #0]
 8001e8e:	4b07      	ldr	r3, [pc, #28]	; (8001eac <displayNumber+0x4c>)
 8001e90:	5499      	strb	r1, [r3, r2]
	for (i = 0; i < 4; i++) {
 8001e92:	7bfb      	ldrb	r3, [r7, #15]
 8001e94:	3301      	adds	r3, #1
 8001e96:	73fb      	strb	r3, [r7, #15]
 8001e98:	7bfb      	ldrb	r3, [r7, #15]
 8001e9a:	2b03      	cmp	r3, #3
 8001e9c:	d9f2      	bls.n	8001e84 <displayNumber+0x24>
	}
}
 8001e9e:	bf00      	nop
 8001ea0:	3714      	adds	r7, #20
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	20000034 	.word	0x20000034

08001eb0 <setDigit>:

/*
 * Turns required digit ON
 */
void setDigit(uint8_t pos)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	71fb      	strb	r3, [r7, #7]
	switch(pos)
 8001eba:	79fb      	ldrb	r3, [r7, #7]
 8001ebc:	2b03      	cmp	r3, #3
 8001ebe:	d823      	bhi.n	8001f08 <setDigit+0x58>
 8001ec0:	a201      	add	r2, pc, #4	; (adr r2, 8001ec8 <setDigit+0x18>)
 8001ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec6:	bf00      	nop
 8001ec8:	08001eff 	.word	0x08001eff
 8001ecc:	08001ef3 	.word	0x08001ef3
 8001ed0:	08001ee5 	.word	0x08001ee5
 8001ed4:	08001ed9 	.word	0x08001ed9
	{
		case 3:
			DIGIT_4_ON;
 8001ed8:	2104      	movs	r1, #4
 8001eda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ede:	f7ff fa64 	bl	80013aa <LL_GPIO_SetOutputPin>
			break;
 8001ee2:	e011      	b.n	8001f08 <setDigit+0x58>
		case 2:
			DIGIT_3_ON;
 8001ee4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ee8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eec:	f7ff fa5d 	bl	80013aa <LL_GPIO_SetOutputPin>
			break;
 8001ef0:	e00a      	b.n	8001f08 <setDigit+0x58>
		case 1:
			DIGIT_2_ON;
 8001ef2:	2110      	movs	r1, #16
 8001ef4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ef8:	f7ff fa57 	bl	80013aa <LL_GPIO_SetOutputPin>
			break;
 8001efc:	e004      	b.n	8001f08 <setDigit+0x58>
		case 0:
			DIGIT_1_ON;
 8001efe:	2101      	movs	r1, #1
 8001f00:	4803      	ldr	r0, [pc, #12]	; (8001f10 <setDigit+0x60>)
 8001f02:	f7ff fa52 	bl	80013aa <LL_GPIO_SetOutputPin>
			break;
 8001f06:	bf00      	nop
	}
}
 8001f08:	bf00      	nop
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	48000400 	.word	0x48000400

08001f14 <updateDisplay>:
/**
 * Display data in dDisplayData.
 * Sets every digit to display its value and decimal point.
 */
void updateDisplay(void)
{
 8001f14:	b590      	push	{r4, r7, lr}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < 4; i++)
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	71fb      	strb	r3, [r7, #7]
 8001f1e:	e1e7      	b.n	80022f0 <updateDisplay+0x3dc>
	{
		switch(dDisplayData.digit[i])
 8001f20:	79fb      	ldrb	r3, [r7, #7]
 8001f22:	4ad3      	ldr	r2, [pc, #844]	; (8002270 <updateDisplay+0x35c>)
 8001f24:	5cd3      	ldrb	r3, [r2, r3]
 8001f26:	3b30      	subs	r3, #48	; 0x30
 8001f28:	2b49      	cmp	r3, #73	; 0x49
 8001f2a:	f200 81bf 	bhi.w	80022ac <updateDisplay+0x398>
 8001f2e:	a201      	add	r2, pc, #4	; (adr r2, 8001f34 <updateDisplay+0x20>)
 8001f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f34:	0800205d 	.word	0x0800205d
 8001f38:	0800206b 	.word	0x0800206b
 8001f3c:	08002079 	.word	0x08002079
 8001f40:	08002087 	.word	0x08002087
 8001f44:	08002095 	.word	0x08002095
 8001f48:	080020a3 	.word	0x080020a3
 8001f4c:	080020b1 	.word	0x080020b1
 8001f50:	080020bf 	.word	0x080020bf
 8001f54:	080020cd 	.word	0x080020cd
 8001f58:	080020db 	.word	0x080020db
 8001f5c:	080022ad 	.word	0x080022ad
 8001f60:	080022ad 	.word	0x080022ad
 8001f64:	080022ad 	.word	0x080022ad
 8001f68:	080022ad 	.word	0x080022ad
 8001f6c:	080022ad 	.word	0x080022ad
 8001f70:	080022ad 	.word	0x080022ad
 8001f74:	080022ad 	.word	0x080022ad
 8001f78:	080020e9 	.word	0x080020e9
 8001f7c:	080022ad 	.word	0x080022ad
 8001f80:	08002113 	.word	0x08002113
 8001f84:	080022ad 	.word	0x080022ad
 8001f88:	0800213d 	.word	0x0800213d
 8001f8c:	0800214b 	.word	0x0800214b
 8001f90:	08002159 	.word	0x08002159
 8001f94:	08002167 	.word	0x08002167
 8001f98:	08002183 	.word	0x08002183
 8001f9c:	08002191 	.word	0x08002191
 8001fa0:	08002247 	.word	0x08002247
 8001fa4:	0800219f 	.word	0x0800219f
 8001fa8:	08002255 	.word	0x08002255
 8001fac:	080022ad 	.word	0x080022ad
 8001fb0:	080021bb 	.word	0x080021bb
 8001fb4:	080021d7 	.word	0x080021d7
 8001fb8:	080022ad 	.word	0x080022ad
 8001fbc:	080022ad 	.word	0x080022ad
 8001fc0:	08002201 	.word	0x08002201
 8001fc4:	080022ad 	.word	0x080022ad
 8001fc8:	0800221d 	.word	0x0800221d
 8001fcc:	08002263 	.word	0x08002263
 8001fd0:	08002275 	.word	0x08002275
 8001fd4:	08002283 	.word	0x08002283
 8001fd8:	080022ad 	.word	0x080022ad
 8001fdc:	08002291 	.word	0x08002291
 8001fe0:	080022ad 	.word	0x080022ad
 8001fe4:	080022ad 	.word	0x080022ad
 8001fe8:	080022ad 	.word	0x080022ad
 8001fec:	080022ad 	.word	0x080022ad
 8001ff0:	0800229f 	.word	0x0800229f
 8001ff4:	080022ad 	.word	0x080022ad
 8001ff8:	080020f7 	.word	0x080020f7
 8001ffc:	08002105 	.word	0x08002105
 8002000:	08002121 	.word	0x08002121
 8002004:	0800212f 	.word	0x0800212f
 8002008:	080022ad 	.word	0x080022ad
 800200c:	080022ad 	.word	0x080022ad
 8002010:	080022ad 	.word	0x080022ad
 8002014:	08002175 	.word	0x08002175
 8002018:	080022ad 	.word	0x080022ad
 800201c:	080022ad 	.word	0x080022ad
 8002020:	080022ad 	.word	0x080022ad
 8002024:	080022ad 	.word	0x080022ad
 8002028:	080022ad 	.word	0x080022ad
 800202c:	080021ad 	.word	0x080021ad
 8002030:	080021c9 	.word	0x080021c9
 8002034:	080022ad 	.word	0x080022ad
 8002038:	080021e5 	.word	0x080021e5
 800203c:	080021f3 	.word	0x080021f3
 8002040:	080022ad 	.word	0x080022ad
 8002044:	0800220f 	.word	0x0800220f
 8002048:	0800222b 	.word	0x0800222b
 800204c:	080022ad 	.word	0x080022ad
 8002050:	080022ad 	.word	0x080022ad
 8002054:	080022ad 	.word	0x080022ad
 8002058:	08002239 	.word	0x08002239
		{
			case '0':
			  setDigit(i);
 800205c:	79fb      	ldrb	r3, [r7, #7]
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff ff26 	bl	8001eb0 <setDigit>
			  setZero();
 8002064:	f7ff fb68 	bl	8001738 <setZero>
			  break;
 8002068:	e120      	b.n	80022ac <updateDisplay+0x398>
			case '1':
			  setDigit(i);
 800206a:	79fb      	ldrb	r3, [r7, #7]
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff ff1f 	bl	8001eb0 <setDigit>
			  setOne();
 8002072:	f7ff fa5b 	bl	800152c <setOne>
			  break;
 8002076:	e119      	b.n	80022ac <updateDisplay+0x398>
			case '2':
			  setDigit(i);
 8002078:	79fb      	ldrb	r3, [r7, #7]
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff ff18 	bl	8001eb0 <setDigit>
			  setTwo();
 8002080:	f7ff fa64 	bl	800154c <setTwo>
			  break;
 8002084:	e112      	b.n	80022ac <updateDisplay+0x398>
			case '3':
			  setDigit(i);
 8002086:	79fb      	ldrb	r3, [r7, #7]
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff ff11 	bl	8001eb0 <setDigit>
			  setThree();
 800208e:	f7ff fa7b 	bl	8001588 <setThree>
			  break;
 8002092:	e10b      	b.n	80022ac <updateDisplay+0x398>
			case '4':
			  setDigit(i);
 8002094:	79fb      	ldrb	r3, [r7, #7]
 8002096:	4618      	mov	r0, r3
 8002098:	f7ff ff0a 	bl	8001eb0 <setDigit>
			  setFour();
 800209c:	f7ff fa92 	bl	80015c4 <setFour>
			  break;
 80020a0:	e104      	b.n	80022ac <updateDisplay+0x398>
			case '5':
			  setDigit(i);
 80020a2:	79fb      	ldrb	r3, [r7, #7]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff ff03 	bl	8001eb0 <setDigit>
			  setFive();
 80020aa:	f7ff faa5 	bl	80015f8 <setFive>
			  break;
 80020ae:	e0fd      	b.n	80022ac <updateDisplay+0x398>
			case '6':
			  setDigit(i);
 80020b0:	79fb      	ldrb	r3, [r7, #7]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff fefc 	bl	8001eb0 <setDigit>
			  setSix();
 80020b8:	f7ff fabc 	bl	8001634 <setSix>
			  break;
 80020bc:	e0f6      	b.n	80022ac <updateDisplay+0x398>
			case '7':
			  setDigit(i);
 80020be:	79fb      	ldrb	r3, [r7, #7]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff fef5 	bl	8001eb0 <setDigit>
			  setSeven();
 80020c6:	f7ff fad9 	bl	800167c <setSeven>
			  break;
 80020ca:	e0ef      	b.n	80022ac <updateDisplay+0x398>
			case '8':
			  setDigit(i);
 80020cc:	79fb      	ldrb	r3, [r7, #7]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff feee 	bl	8001eb0 <setDigit>
			  setEight();
 80020d4:	f7ff fae6 	bl	80016a4 <setEight>
			  break;
 80020d8:	e0e8      	b.n	80022ac <updateDisplay+0x398>
			case '9':
			  setDigit(i);
 80020da:	79fb      	ldrb	r3, [r7, #7]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff fee7 	bl	8001eb0 <setDigit>
			  setNine();
 80020e2:	f7ff fb09 	bl	80016f8 <setNine>
			  break;
 80020e6:	e0e1      	b.n	80022ac <updateDisplay+0x398>
			case 'A':
			  setDigit(i);
 80020e8:	79fb      	ldrb	r3, [r7, #7]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff fee0 	bl	8001eb0 <setDigit>
			  setA();
 80020f0:	f7ff fb48 	bl	8001784 <setA>
			  break;
 80020f4:	e0da      	b.n	80022ac <updateDisplay+0x398>
			case 'a':
			  setDigit(i);
 80020f6:	79fb      	ldrb	r3, [r7, #7]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff fed9 	bl	8001eb0 <setDigit>
			  seta();
 80020fe:	f7ff fb67 	bl	80017d0 <seta>
			  break;
 8002102:	e0d3      	b.n	80022ac <updateDisplay+0x398>
			case 'b':
			  setDigit(i);
 8002104:	79fb      	ldrb	r3, [r7, #7]
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff fed2 	bl	8001eb0 <setDigit>
			  setb();
 800210c:	f7ff fb84 	bl	8001818 <setb>
			  break;
 8002110:	e0cc      	b.n	80022ac <updateDisplay+0x398>
			case 'C':
			  setDigit(i);
 8002112:	79fb      	ldrb	r3, [r7, #7]
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff fecb 	bl	8001eb0 <setDigit>
			  setC();
 800211a:	f7ff fb9d 	bl	8001858 <setC>
			  break;
 800211e:	e0c5      	b.n	80022ac <updateDisplay+0x398>
			case 'c':
			  setDigit(i);
 8002120:	79fb      	ldrb	r3, [r7, #7]
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff fec4 	bl	8001eb0 <setDigit>
			  setc();
 8002128:	f7ff fbb0 	bl	800188c <setc>
			  break;
 800212c:	e0be      	b.n	80022ac <updateDisplay+0x398>
			case 'd':
			  setDigit(i);
 800212e:	79fb      	ldrb	r3, [r7, #7]
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff febd 	bl	8001eb0 <setDigit>
			  setd();
 8002136:	f7ff fbbd 	bl	80018b4 <setd>
			  break;
 800213a:	e0b7      	b.n	80022ac <updateDisplay+0x398>
			case 'E':
			  setDigit(i);
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff feb6 	bl	8001eb0 <setDigit>
			  setE();
 8002144:	f7ff fbd6 	bl	80018f4 <setE>
			  break;
 8002148:	e0b0      	b.n	80022ac <updateDisplay+0x398>
			case 'F':
			  setDigit(i);
 800214a:	79fb      	ldrb	r3, [r7, #7]
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff feaf 	bl	8001eb0 <setDigit>
			  setF();
 8002152:	f7ff fbed 	bl	8001930 <setF>
			  break;
 8002156:	e0a9      	b.n	80022ac <updateDisplay+0x398>
			case 'G':
			  setDigit(i);
 8002158:	79fb      	ldrb	r3, [r7, #7]
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff fea8 	bl	8001eb0 <setDigit>
			  setG();
 8002160:	f7ff fc00 	bl	8001964 <setG>
			  break;
 8002164:	e0a2      	b.n	80022ac <updateDisplay+0x398>
			case 'H':
			  setDigit(i);
 8002166:	79fb      	ldrb	r3, [r7, #7]
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff fea1 	bl	8001eb0 <setDigit>
			  setH();
 800216e:	f7ff fc19 	bl	80019a4 <setH>
			  break;
 8002172:	e09b      	b.n	80022ac <updateDisplay+0x398>
			case 'h':
			  setDigit(i);
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff fe9a 	bl	8001eb0 <setDigit>
			  seth();
 800217c:	f7ff fc32 	bl	80019e4 <seth>
			  break;
 8002180:	e094      	b.n	80022ac <updateDisplay+0x398>
			case 'I':
			  setDigit(i);
 8002182:	79fb      	ldrb	r3, [r7, #7]
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff fe93 	bl	8001eb0 <setDigit>
			  setI();
 800218a:	f7ff fc47 	bl	8001a1c <setI>
			  break;
 800218e:	e08d      	b.n	80022ac <updateDisplay+0x398>
			case 'J':
			  setDigit(i);
 8002190:	79fb      	ldrb	r3, [r7, #7]
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff fe8c 	bl	8001eb0 <setDigit>
			  setJ();
 8002198:	f7ff fc50 	bl	8001a3c <setJ>
			  break;
 800219c:	e086      	b.n	80022ac <updateDisplay+0x398>
			case 'L':
			  setDigit(i);
 800219e:	79fb      	ldrb	r3, [r7, #7]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff fe85 	bl	8001eb0 <setDigit>
			  setL();
 80021a6:	f7ff fc65 	bl	8001a74 <setL>
			  break;
 80021aa:	e07f      	b.n	80022ac <updateDisplay+0x398>
			case 'n':
			  setDigit(i);
 80021ac:	79fb      	ldrb	r3, [r7, #7]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff fe7e 	bl	8001eb0 <setDigit>
			  setn();
 80021b4:	f7ff fc74 	bl	8001aa0 <setn>
			  break;
 80021b8:	e078      	b.n	80022ac <updateDisplay+0x398>
			case 'O':
			  setDigit(i);
 80021ba:	79fb      	ldrb	r3, [r7, #7]
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff fe77 	bl	8001eb0 <setDigit>
			  setO();
 80021c2:	f7ff fc83 	bl	8001acc <setO>
			  break;
 80021c6:	e071      	b.n	80022ac <updateDisplay+0x398>
			case 'o':
			  setDigit(i);
 80021c8:	79fb      	ldrb	r3, [r7, #7]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7ff fe70 	bl	8001eb0 <setDigit>
			  seto();
 80021d0:	f7ff fca2 	bl	8001b18 <seto>
			  break;
 80021d4:	e06a      	b.n	80022ac <updateDisplay+0x398>
			case 'P':
			  setDigit(i);
 80021d6:	79fb      	ldrb	r3, [r7, #7]
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff fe69 	bl	8001eb0 <setDigit>
			  setP();
 80021de:	f7ff fcb5 	bl	8001b4c <setP>
			  break;
 80021e2:	e063      	b.n	80022ac <updateDisplay+0x398>
			case 'q':
			  setDigit(i);
 80021e4:	79fb      	ldrb	r3, [r7, #7]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff fe62 	bl	8001eb0 <setDigit>
			  setq();
 80021ec:	f7ff fcce 	bl	8001b8c <setq>
			  break;
 80021f0:	e05c      	b.n	80022ac <updateDisplay+0x398>
			case 'r':
			  setDigit(i);
 80021f2:	79fb      	ldrb	r3, [r7, #7]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff fe5b 	bl	8001eb0 <setDigit>
			  setr();
 80021fa:	f7ff fce7 	bl	8001bcc <setr>
			  break;
 80021fe:	e055      	b.n	80022ac <updateDisplay+0x398>
			case 'S':
			  setDigit(i);
 8002200:	79fb      	ldrb	r3, [r7, #7]
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff fe54 	bl	8001eb0 <setDigit>
			  setS();
 8002208:	f7ff fcf0 	bl	8001bec <setS>
			  break;
 800220c:	e04e      	b.n	80022ac <updateDisplay+0x398>
			case 't':
			  setDigit(i);
 800220e:	79fb      	ldrb	r3, [r7, #7]
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff fe4d 	bl	8001eb0 <setDigit>
			  sett();
 8002216:	f7ff fd07 	bl	8001c28 <sett>
			  break;
 800221a:	e047      	b.n	80022ac <updateDisplay+0x398>
			case 'U':
			  setDigit(i);
 800221c:	79fb      	ldrb	r3, [r7, #7]
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff fe46 	bl	8001eb0 <setDigit>
			  setU();
 8002224:	f7ff fd1a 	bl	8001c5c <setU>
			  break;
 8002228:	e040      	b.n	80022ac <updateDisplay+0x398>
			case 'u':
			  setDigit(i);
 800222a:	79fb      	ldrb	r3, [r7, #7]
 800222c:	4618      	mov	r0, r3
 800222e:	f7ff fe3f 	bl	8001eb0 <setDigit>
			  setu();
 8002232:	f7ff fd33 	bl	8001c9c <setu>
			  break;
 8002236:	e039      	b.n	80022ac <updateDisplay+0x398>
			case 'y':
			  setDigit(i);
 8002238:	79fb      	ldrb	r3, [r7, #7]
 800223a:	4618      	mov	r0, r3
 800223c:	f7ff fe38 	bl	8001eb0 <setDigit>
			  sety();
 8002240:	f7ff fd42 	bl	8001cc8 <sety>
			  break;
 8002244:	e032      	b.n	80022ac <updateDisplay+0x398>
			case 'K':
			  setDigit(i);
 8002246:	79fb      	ldrb	r3, [r7, #7]
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff fe31 	bl	8001eb0 <setDigit>
			  setK();
 800224e:	f7ff fd59 	bl	8001d04 <setK>
			  break;
 8002252:	e02b      	b.n	80022ac <updateDisplay+0x398>
			case 'M':
			  setDigit(i);
 8002254:	79fb      	ldrb	r3, [r7, #7]
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff fe2a 	bl	8001eb0 <setDigit>
			  setM();
 800225c:	f7ff fd72 	bl	8001d44 <setM>
			  break;
 8002260:	e024      	b.n	80022ac <updateDisplay+0x398>
			case 'V':
			  setDigit(i);
 8002262:	79fb      	ldrb	r3, [r7, #7]
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff fe23 	bl	8001eb0 <setDigit>
			  setV();
 800226a:	f7ff fd85 	bl	8001d78 <setV>
			  break;
 800226e:	e01d      	b.n	80022ac <updateDisplay+0x398>
 8002270:	20000034 	.word	0x20000034
			case 'W':
			  setDigit(i);
 8002274:	79fb      	ldrb	r3, [r7, #7]
 8002276:	4618      	mov	r0, r3
 8002278:	f7ff fe1a 	bl	8001eb0 <setDigit>
			  setW();
 800227c:	f7ff fd90 	bl	8001da0 <setW>
			  break;
 8002280:	e014      	b.n	80022ac <updateDisplay+0x398>
			case 'X':
			  setDigit(i);
 8002282:	79fb      	ldrb	r3, [r7, #7]
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff fe13 	bl	8001eb0 <setDigit>
			  setX();
 800228a:	f7ff fdad 	bl	8001de8 <setX>
			  break;
 800228e:	e00d      	b.n	80022ac <updateDisplay+0x398>
			case 'Z':
			  setDigit(i);
 8002290:	79fb      	ldrb	r3, [r7, #7]
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff fe0c 	bl	8001eb0 <setDigit>
			  setZ();
 8002298:	f7ff fdba 	bl	8001e10 <setZ>
			  break;
 800229c:	e006      	b.n	80022ac <updateDisplay+0x398>
			case '_':
			  setDigit(i);
 800229e:	79fb      	ldrb	r3, [r7, #7]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff fe05 	bl	8001eb0 <setDigit>
			  setUnderscore();
 80022a6:	f7ff fdd1 	bl	8001e4c <setUnderscore>
			  break;
 80022aa:	bf00      	nop
		}

		if(dDisplayData.resolution == i)
 80022ac:	4b14      	ldr	r3, [pc, #80]	; (8002300 <updateDisplay+0x3ec>)
 80022ae:	799b      	ldrb	r3, [r3, #6]
 80022b0:	79fa      	ldrb	r2, [r7, #7]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d101      	bne.n	80022ba <updateDisplay+0x3a6>
		{
			setDecimalPoint();
 80022b6:	f7ff f92f 	bl	8001518 <setDecimalPoint>
		}

		disp_time_saved = disp_time;
 80022ba:	4b12      	ldr	r3, [pc, #72]	; (8002304 <updateDisplay+0x3f0>)
 80022bc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80022c0:	4a11      	ldr	r2, [pc, #68]	; (8002308 <updateDisplay+0x3f4>)
 80022c2:	e9c2 3400 	strd	r3, r4, [r2]
		while((disp_time_saved + 2) > disp_time){};
 80022c6:	bf00      	nop
 80022c8:	4b0f      	ldr	r3, [pc, #60]	; (8002308 <updateDisplay+0x3f4>)
 80022ca:	e9d3 1200 	ldrd	r1, r2, [r3]
 80022ce:	1c8b      	adds	r3, r1, #2
 80022d0:	f142 0400 	adc.w	r4, r2, #0
 80022d4:	4a0b      	ldr	r2, [pc, #44]	; (8002304 <updateDisplay+0x3f0>)
 80022d6:	e9d2 1200 	ldrd	r1, r2, [r2]
 80022da:	42a2      	cmp	r2, r4
 80022dc:	bf08      	it	eq
 80022de:	4299      	cmpeq	r1, r3
 80022e0:	d3f2      	bcc.n	80022c8 <updateDisplay+0x3b4>

		resetDigits();
 80022e2:	f7ff f8db 	bl	800149c <resetDigits>
		resetSegments();
 80022e6:	f7ff f87d 	bl	80013e4 <resetSegments>
	for(uint8_t i = 0; i < 4; i++)
 80022ea:	79fb      	ldrb	r3, [r7, #7]
 80022ec:	3301      	adds	r3, #1
 80022ee:	71fb      	strb	r3, [r7, #7]
 80022f0:	79fb      	ldrb	r3, [r7, #7]
 80022f2:	2b03      	cmp	r3, #3
 80022f4:	f67f ae14 	bls.w	8001f20 <updateDisplay+0xc>
	}
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd90      	pop	{r4, r7, pc}
 8002300:	20000034 	.word	0x20000034
 8002304:	20000040 	.word	0x20000040
 8002308:	20000048 	.word	0x20000048

0800230c <TIM2_IRQHandler>:
/**
  * @brief This function handles TIM3 global interrupt.
  */
//Update displayed data and keep display ON
void TIM2_IRQHandler(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
	if(LL_TIM_IsActiveFlag_UPDATE(TIM2))
 8002310:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002314:	f7ff f836 	bl	8001384 <LL_TIM_IsActiveFlag_UPDATE>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <TIM2_IRQHandler+0x16>
	{
		updateDisplay();
 800231e:	f7ff fdf9 	bl	8001f14 <updateDisplay>
	}

	LL_TIM_ClearFlag_UPDATE(TIM2);
 8002322:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002326:	f7ff f81f 	bl	8001368 <LL_TIM_ClearFlag_UPDATE>
}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}
	...

08002330 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002334:	4b04      	ldr	r3, [pc, #16]	; (8002348 <NVIC_GetPriorityGrouping+0x18>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	0a1b      	lsrs	r3, r3, #8
 800233a:	f003 0307 	and.w	r3, r3, #7
}
 800233e:	4618      	mov	r0, r3
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	e000ed00 	.word	0xe000ed00

0800234c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	4603      	mov	r3, r0
 8002354:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002356:	79fb      	ldrb	r3, [r7, #7]
 8002358:	f003 021f 	and.w	r2, r3, #31
 800235c:	4907      	ldr	r1, [pc, #28]	; (800237c <NVIC_EnableIRQ+0x30>)
 800235e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002362:	095b      	lsrs	r3, r3, #5
 8002364:	2001      	movs	r0, #1
 8002366:	fa00 f202 	lsl.w	r2, r0, r2
 800236a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800236e:	bf00      	nop
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	e000e100 	.word	0xe000e100

08002380 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	4603      	mov	r3, r0
 8002388:	6039      	str	r1, [r7, #0]
 800238a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800238c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002390:	2b00      	cmp	r3, #0
 8002392:	da0b      	bge.n	80023ac <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	b2da      	uxtb	r2, r3
 8002398:	490c      	ldr	r1, [pc, #48]	; (80023cc <NVIC_SetPriority+0x4c>)
 800239a:	79fb      	ldrb	r3, [r7, #7]
 800239c:	f003 030f 	and.w	r3, r3, #15
 80023a0:	3b04      	subs	r3, #4
 80023a2:	0112      	lsls	r2, r2, #4
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	440b      	add	r3, r1
 80023a8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023aa:	e009      	b.n	80023c0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	4907      	ldr	r1, [pc, #28]	; (80023d0 <NVIC_SetPriority+0x50>)
 80023b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b6:	0112      	lsls	r2, r2, #4
 80023b8:	b2d2      	uxtb	r2, r2
 80023ba:	440b      	add	r3, r1
 80023bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	e000ed00 	.word	0xe000ed00
 80023d0:	e000e100 	.word	0xe000e100

080023d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b089      	sub	sp, #36	; 0x24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f003 0307 	and.w	r3, r3, #7
 80023e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	f1c3 0307 	rsb	r3, r3, #7
 80023ee:	2b04      	cmp	r3, #4
 80023f0:	bf28      	it	cs
 80023f2:	2304      	movcs	r3, #4
 80023f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	3304      	adds	r3, #4
 80023fa:	2b06      	cmp	r3, #6
 80023fc:	d902      	bls.n	8002404 <NVIC_EncodePriority+0x30>
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	3b03      	subs	r3, #3
 8002402:	e000      	b.n	8002406 <NVIC_EncodePriority+0x32>
 8002404:	2300      	movs	r3, #0
 8002406:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002408:	f04f 32ff 	mov.w	r2, #4294967295
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	43da      	mvns	r2, r3
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	401a      	ands	r2, r3
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800241c:	f04f 31ff 	mov.w	r1, #4294967295
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	fa01 f303 	lsl.w	r3, r1, r3
 8002426:	43d9      	mvns	r1, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800242c:	4313      	orrs	r3, r2
         );
}
 800242e:	4618      	mov	r0, r3
 8002430:	3724      	adds	r7, #36	; 0x24
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
	...

0800243c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8002444:	4b08      	ldr	r3, [pc, #32]	; (8002468 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002446:	695a      	ldr	r2, [r3, #20]
 8002448:	4907      	ldr	r1, [pc, #28]	; (8002468 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4313      	orrs	r3, r2
 800244e:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8002450:	4b05      	ldr	r3, [pc, #20]	; (8002468 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002452:	695a      	ldr	r2, [r3, #20]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4013      	ands	r3, r2
 8002458:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800245a:	68fb      	ldr	r3, [r7, #12]
}
 800245c:	bf00      	nop
 800245e:	3714      	adds	r7, #20
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	40021000 	.word	0x40021000

0800246c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8002476:	4a12      	ldr	r2, [pc, #72]	; (80024c0 <LL_SYSCFG_SetEXTISource+0x54>)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	b2db      	uxtb	r3, r3
 800247c:	3302      	adds	r3, #2
 800247e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	0c1b      	lsrs	r3, r3, #16
 8002486:	43db      	mvns	r3, r3
 8002488:	ea02 0103 	and.w	r1, r2, r3
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	0c1b      	lsrs	r3, r3, #16
 8002490:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	fa93 f3a3 	rbit	r3, r3
 8002498:	60bb      	str	r3, [r7, #8]
  return(result);
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	fab3 f383 	clz	r3, r3
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	409a      	lsls	r2, r3
 80024a4:	4806      	ldr	r0, [pc, #24]	; (80024c0 <LL_SYSCFG_SetEXTISource+0x54>)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	430a      	orrs	r2, r1
 80024ac:	3302      	adds	r3, #2
 80024ae:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80024b2:	bf00      	nop
 80024b4:	3714      	adds	r7, #20
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	40010000 	.word	0x40010000

080024c4 <LL_GPIO_SetPinMode>:
{
 80024c4:	b480      	push	{r7}
 80024c6:	b089      	sub	sp, #36	; 0x24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	fa93 f3a3 	rbit	r3, r3
 80024de:	613b      	str	r3, [r7, #16]
  return(result);
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	fab3 f383 	clz	r3, r3
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	2103      	movs	r1, #3
 80024ea:	fa01 f303 	lsl.w	r3, r1, r3
 80024ee:	43db      	mvns	r3, r3
 80024f0:	401a      	ands	r2, r3
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	fa93 f3a3 	rbit	r3, r3
 80024fc:	61bb      	str	r3, [r7, #24]
  return(result);
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	fab3 f383 	clz	r3, r3
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	6879      	ldr	r1, [r7, #4]
 8002508:	fa01 f303 	lsl.w	r3, r1, r3
 800250c:	431a      	orrs	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	601a      	str	r2, [r3, #0]
}
 8002512:	bf00      	nop
 8002514:	3724      	adds	r7, #36	; 0x24
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr

0800251e <LL_GPIO_SetPinPull>:
{
 800251e:	b480      	push	{r7}
 8002520:	b089      	sub	sp, #36	; 0x24
 8002522:	af00      	add	r7, sp, #0
 8002524:	60f8      	str	r0, [r7, #12]
 8002526:	60b9      	str	r1, [r7, #8]
 8002528:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	68da      	ldr	r2, [r3, #12]
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	fa93 f3a3 	rbit	r3, r3
 8002538:	613b      	str	r3, [r7, #16]
  return(result);
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	fab3 f383 	clz	r3, r3
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	2103      	movs	r1, #3
 8002544:	fa01 f303 	lsl.w	r3, r1, r3
 8002548:	43db      	mvns	r3, r3
 800254a:	401a      	ands	r2, r3
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	fa93 f3a3 	rbit	r3, r3
 8002556:	61bb      	str	r3, [r7, #24]
  return(result);
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	fab3 f383 	clz	r3, r3
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	6879      	ldr	r1, [r7, #4]
 8002562:	fa01 f303 	lsl.w	r3, r1, r3
 8002566:	431a      	orrs	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	60da      	str	r2, [r3, #12]
}
 800256c:	bf00      	nop
 800256e:	3724      	adds	r7, #36	; 0x24
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <LL_GPIO_ResetOutputPin>:
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b08a      	sub	sp, #40	; 0x28
 8002598:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800259a:	f107 031c 	add.w	r3, r7, #28
 800259e:	2200      	movs	r2, #0
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	605a      	str	r2, [r3, #4]
 80025a4:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a6:	1d3b      	adds	r3, r7, #4
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	605a      	str	r2, [r3, #4]
 80025ae:	609a      	str	r2, [r3, #8]
 80025b0:	60da      	str	r2, [r3, #12]
 80025b2:	611a      	str	r2, [r3, #16]
 80025b4:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80025b6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80025ba:	f7ff ff3f 	bl	800243c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80025be:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80025c2:	f7ff ff3b 	bl	800243c <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, DISP_B_Pin|DISP_A_Pin|DISP_3_Pin|DISP_F_Pin
 80025c6:	f641 119f 	movw	r1, #6559	; 0x199f
 80025ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025ce:	f7ff ffd3 	bl	8002578 <LL_GPIO_ResetOutputPin>
                          |DISP_1_Pin|DISP_TIME_Pin|DISP_C_Pin|DISP_E_Pin
                          |DISP_2_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, DISP_0_Pin|DISP_DP_Pin|DISP_G_Pin|DISP_D_Pin);
 80025d2:	2133      	movs	r1, #51	; 0x33
 80025d4:	482b      	ldr	r0, [pc, #172]	; (8002684 <MX_GPIO_Init+0xf0>)
 80025d6:	f7ff ffcf 	bl	8002578 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = DISP_B_Pin|DISP_A_Pin|DISP_3_Pin|DISP_F_Pin
 80025da:	f641 139f 	movw	r3, #6559	; 0x199f
 80025de:	607b      	str	r3, [r7, #4]
                          |DISP_1_Pin|DISP_TIME_Pin|DISP_C_Pin|DISP_E_Pin
                          |DISP_2_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80025e0:	2301      	movs	r3, #1
 80025e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80025e4:	2300      	movs	r3, #0
 80025e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80025e8:	2300      	movs	r3, #0
 80025ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80025ec:	2300      	movs	r3, #0
 80025ee:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f0:	1d3b      	adds	r3, r7, #4
 80025f2:	4619      	mov	r1, r3
 80025f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025f8:	f7fe f8f9 	bl	80007ee <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_0_Pin|DISP_DP_Pin|DISP_G_Pin|DISP_D_Pin;
 80025fc:	2333      	movs	r3, #51	; 0x33
 80025fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002600:	2301      	movs	r3, #1
 8002602:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002604:	2300      	movs	r3, #0
 8002606:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002608:	2300      	movs	r3, #0
 800260a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800260c:	2300      	movs	r3, #0
 800260e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002610:	1d3b      	adds	r3, r7, #4
 8002612:	4619      	mov	r1, r3
 8002614:	481b      	ldr	r0, [pc, #108]	; (8002684 <MX_GPIO_Init+0xf0>)
 8002616:	f7fe f8ea 	bl	80007ee <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE3);
 800261a:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 800261e:	2001      	movs	r0, #1
 8002620:	f7ff ff24 	bl	800246c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(BUTTON_GPIO_Port, BUTTON_Pin, LL_GPIO_PULL_NO);
 8002624:	2200      	movs	r2, #0
 8002626:	2108      	movs	r1, #8
 8002628:	4816      	ldr	r0, [pc, #88]	; (8002684 <MX_GPIO_Init+0xf0>)
 800262a:	f7ff ff78 	bl	800251e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BUTTON_GPIO_Port, BUTTON_Pin, LL_GPIO_MODE_INPUT);
 800262e:	2200      	movs	r2, #0
 8002630:	2108      	movs	r1, #8
 8002632:	4814      	ldr	r0, [pc, #80]	; (8002684 <MX_GPIO_Init+0xf0>)
 8002634:	f7ff ff46 	bl	80024c4 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 8002638:	2308      	movs	r3, #8
 800263a:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 800263c:	2300      	movs	r3, #0
 800263e:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8002640:	2301      	movs	r3, #1
 8002642:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8002646:	2300      	movs	r3, #0
 8002648:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800264c:	2301      	movs	r3, #1
 800264e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8002652:	f107 031c 	add.w	r3, r7, #28
 8002656:	4618      	mov	r0, r3
 8002658:	f7fd fee6 	bl	8000428 <LL_EXTI_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800265c:	f7ff fe68 	bl	8002330 <NVIC_GetPriorityGrouping>
 8002660:	4603      	mov	r3, r0
 8002662:	2200      	movs	r2, #0
 8002664:	2100      	movs	r1, #0
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff feb4 	bl	80023d4 <NVIC_EncodePriority>
 800266c:	4603      	mov	r3, r0
 800266e:	4619      	mov	r1, r3
 8002670:	2009      	movs	r0, #9
 8002672:	f7ff fe85 	bl	8002380 <NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI3_IRQn);
 8002676:	2009      	movs	r0, #9
 8002678:	f7ff fe68 	bl	800234c <NVIC_EnableIRQ>

}
 800267c:	bf00      	nop
 800267e:	3728      	adds	r7, #40	; 0x28
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	48000400 	.word	0x48000400

08002688 <NVIC_GetPriorityGrouping>:
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800268c:	4b04      	ldr	r3, [pc, #16]	; (80026a0 <NVIC_GetPriorityGrouping+0x18>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	0a1b      	lsrs	r3, r3, #8
 8002692:	f003 0307 	and.w	r3, r3, #7
}
 8002696:	4618      	mov	r0, r3
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	e000ed00 	.word	0xe000ed00

080026a4 <NVIC_EnableIRQ>:
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	4603      	mov	r3, r0
 80026ac:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80026ae:	79fb      	ldrb	r3, [r7, #7]
 80026b0:	f003 021f 	and.w	r2, r3, #31
 80026b4:	4907      	ldr	r1, [pc, #28]	; (80026d4 <NVIC_EnableIRQ+0x30>)
 80026b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ba:	095b      	lsrs	r3, r3, #5
 80026bc:	2001      	movs	r0, #1
 80026be:	fa00 f202 	lsl.w	r2, r0, r2
 80026c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80026c6:	bf00      	nop
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	e000e100 	.word	0xe000e100

080026d8 <NVIC_SetPriority>:
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	4603      	mov	r3, r0
 80026e0:	6039      	str	r1, [r7, #0]
 80026e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80026e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	da0b      	bge.n	8002704 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	b2da      	uxtb	r2, r3
 80026f0:	490c      	ldr	r1, [pc, #48]	; (8002724 <NVIC_SetPriority+0x4c>)
 80026f2:	79fb      	ldrb	r3, [r7, #7]
 80026f4:	f003 030f 	and.w	r3, r3, #15
 80026f8:	3b04      	subs	r3, #4
 80026fa:	0112      	lsls	r2, r2, #4
 80026fc:	b2d2      	uxtb	r2, r2
 80026fe:	440b      	add	r3, r1
 8002700:	761a      	strb	r2, [r3, #24]
}
 8002702:	e009      	b.n	8002718 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	b2da      	uxtb	r2, r3
 8002708:	4907      	ldr	r1, [pc, #28]	; (8002728 <NVIC_SetPriority+0x50>)
 800270a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270e:	0112      	lsls	r2, r2, #4
 8002710:	b2d2      	uxtb	r2, r2
 8002712:	440b      	add	r3, r1
 8002714:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr
 8002724:	e000ed00 	.word	0xe000ed00
 8002728:	e000e100 	.word	0xe000e100

0800272c <NVIC_EncodePriority>:
{
 800272c:	b480      	push	{r7}
 800272e:	b089      	sub	sp, #36	; 0x24
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f003 0307 	and.w	r3, r3, #7
 800273e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	f1c3 0307 	rsb	r3, r3, #7
 8002746:	2b04      	cmp	r3, #4
 8002748:	bf28      	it	cs
 800274a:	2304      	movcs	r3, #4
 800274c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	3304      	adds	r3, #4
 8002752:	2b06      	cmp	r3, #6
 8002754:	d902      	bls.n	800275c <NVIC_EncodePriority+0x30>
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	3b03      	subs	r3, #3
 800275a:	e000      	b.n	800275e <NVIC_EncodePriority+0x32>
 800275c:	2300      	movs	r3, #0
 800275e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002760:	f04f 32ff 	mov.w	r2, #4294967295
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	43da      	mvns	r2, r3
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	401a      	ands	r2, r3
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002774:	f04f 31ff 	mov.w	r1, #4294967295
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	fa01 f303 	lsl.w	r3, r1, r3
 800277e:	43d9      	mvns	r1, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002784:	4313      	orrs	r3, r2
}
 8002786:	4618      	mov	r0, r3
 8002788:	3724      	adds	r7, #36	; 0x24
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr

08002792 <LL_I2C_Enable>:
{
 8002792:	b480      	push	{r7}
 8002794:	b083      	sub	sp, #12
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f043 0201 	orr.w	r2, r3, #1
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	601a      	str	r2, [r3, #0]
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <LL_I2C_EnableClockStretching>:
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	601a      	str	r2, [r3, #0]
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <LL_I2C_DisableGeneralCall>:
{
 80027d2:	b480      	push	{r7}
 80027d4:	b083      	sub	sp, #12
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	601a      	str	r2, [r3, #0]
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <LL_I2C_SetOwnAddress2>:
{
 80027f2:	b480      	push	{r7}
 80027f4:	b085      	sub	sp, #20
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	60f8      	str	r0, [r7, #12]
 80027fa:	60b9      	str	r1, [r7, #8]
 80027fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002806:	f023 0306 	bic.w	r3, r3, #6
 800280a:	68b9      	ldr	r1, [r7, #8]
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	430a      	orrs	r2, r1
 8002810:	431a      	orrs	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	60da      	str	r2, [r3, #12]
}
 8002816:	bf00      	nop
 8002818:	3714      	adds	r7, #20
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <LL_I2C_DisableOwnAddress2>:
{
 8002822:	b480      	push	{r7}
 8002824:	b083      	sub	sp, #12
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	60da      	str	r2, [r3, #12]
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <LL_I2C_EnableIT_RX>:
{
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f043 0204 	orr.w	r2, r3, #4
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	601a      	str	r2, [r3, #0]
}
 8002856:	bf00      	nop
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <LL_I2C_DisableIT_RX>:
{
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f023 0204 	bic.w	r2, r3, #4
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	601a      	str	r2, [r3, #0]
}
 8002876:	bf00      	nop
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr

08002882 <LL_I2C_IsActiveFlag_TXIS>:
{
 8002882:	b480      	push	{r7}
 8002884:	b083      	sub	sp, #12
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS));
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b02      	cmp	r3, #2
 8002894:	bf0c      	ite	eq
 8002896:	2301      	moveq	r3, #1
 8002898:	2300      	movne	r3, #0
 800289a:	b2db      	uxtb	r3, r3
}
 800289c:	4618      	mov	r0, r3
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <LL_I2C_IsActiveFlag_RXNE>:
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE));
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	f003 0304 	and.w	r3, r3, #4
 80028b8:	2b04      	cmp	r3, #4
 80028ba:	bf0c      	ite	eq
 80028bc:	2301      	moveq	r3, #1
 80028be:	2300      	movne	r3, #0
 80028c0:	b2db      	uxtb	r3, r3
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr

080028ce <LL_I2C_IsActiveFlag_STOP>:
{
 80028ce:	b480      	push	{r7}
 80028d0:	b083      	sub	sp, #12
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF));
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	f003 0320 	and.w	r3, r3, #32
 80028de:	2b20      	cmp	r3, #32
 80028e0:	bf0c      	ite	eq
 80028e2:	2301      	moveq	r3, #1
 80028e4:	2300      	movne	r3, #0
 80028e6:	b2db      	uxtb	r3, r3
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <LL_I2C_ClearFlag_STOP>:
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	69db      	ldr	r3, [r3, #28]
 8002900:	f043 0220 	orr.w	r2, r3, #32
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	61da      	str	r2, [r3, #28]
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <LL_I2C_EnableAutoEndMode>:
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	605a      	str	r2, [r3, #4]
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
 8002940:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	685a      	ldr	r2, [r3, #4]
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	0d5b      	lsrs	r3, r3, #21
 800294a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800294e:	4b0b      	ldr	r3, [pc, #44]	; (800297c <LL_I2C_HandleTransfer+0x48>)
 8002950:	430b      	orrs	r3, r1
 8002952:	43db      	mvns	r3, r3
 8002954:	401a      	ands	r2, r3
 8002956:	68b9      	ldr	r1, [r7, #8]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4319      	orrs	r1, r3
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	041b      	lsls	r3, r3, #16
 8002960:	4319      	orrs	r1, r3
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	4319      	orrs	r1, r3
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	430b      	orrs	r3, r1
 800296a:	431a      	orrs	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	605a      	str	r2, [r3, #4]
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | TransferSize << I2C_CR2_NBYTES_Pos | EndMode | Request);
}
 8002970:	bf00      	nop
 8002972:	3714      	adds	r7, #20
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr
 800297c:	03ff7bff 	.word	0x03ff7bff

08002980 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298c:	b2db      	uxtb	r3, r3
}
 800298e:	4618      	mov	r0, r3
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr

0800299a <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 800299a:	b480      	push	{r7}
 800299c:	b083      	sub	sp, #12
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
 80029a2:	460b      	mov	r3, r1
 80029a4:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 80029a6:	78fa      	ldrb	r2, [r7, #3]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <LL_AHB1_GRP1_EnableClock>:
{
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80029c0:	4b08      	ldr	r3, [pc, #32]	; (80029e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80029c2:	695a      	ldr	r2, [r3, #20]
 80029c4:	4907      	ldr	r1, [pc, #28]	; (80029e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80029cc:	4b05      	ldr	r3, [pc, #20]	; (80029e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80029ce:	695a      	ldr	r2, [r3, #20]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4013      	ands	r3, r2
 80029d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80029d6:	68fb      	ldr	r3, [r7, #12]
}
 80029d8:	bf00      	nop
 80029da:	3714      	adds	r7, #20
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr
 80029e4:	40021000 	.word	0x40021000

080029e8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80029f0:	4b08      	ldr	r3, [pc, #32]	; (8002a14 <LL_APB1_GRP1_EnableClock+0x2c>)
 80029f2:	69da      	ldr	r2, [r3, #28]
 80029f4:	4907      	ldr	r1, [pc, #28]	; (8002a14 <LL_APB1_GRP1_EnableClock+0x2c>)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80029fc:	4b05      	ldr	r3, [pc, #20]	; (8002a14 <LL_APB1_GRP1_EnableClock+0x2c>)
 80029fe:	69da      	ldr	r2, [r3, #28]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4013      	ands	r3, r2
 8002a04:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a06:	68fb      	ldr	r3, [r7, #12]
}
 8002a08:	bf00      	nop
 8002a0a:	3714      	adds	r7, #20
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr
 8002a14:	40021000 	.word	0x40021000

08002a18 <MX_I2C1_Init>:
volatile uint8_t ubReceiveIndex = 0;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b08e      	sub	sp, #56	; 0x38
 8002a1c:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8002a1e:	f107 031c 	add.w	r3, r7, #28
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	605a      	str	r2, [r3, #4]
 8002a28:	609a      	str	r2, [r3, #8]
 8002a2a:	60da      	str	r2, [r3, #12]
 8002a2c:	611a      	str	r2, [r3, #16]
 8002a2e:	615a      	str	r2, [r3, #20]
 8002a30:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a32:	1d3b      	adds	r3, r7, #4
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	605a      	str	r2, [r3, #4]
 8002a3a:	609a      	str	r2, [r3, #8]
 8002a3c:	60da      	str	r2, [r3, #12]
 8002a3e:	611a      	str	r2, [r3, #16]
 8002a40:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002a42:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002a46:	f7ff ffb7 	bl	80029b8 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8002a4a:	23c0      	movs	r3, #192	; 0xc0
 8002a4c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002a4e:	2302      	movs	r3, #2
 8002a50:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002a52:	2303      	movs	r3, #3
 8002a54:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8002a56:	2301      	movs	r3, #1
 8002a58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8002a5e:	2304      	movs	r3, #4
 8002a60:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a62:	1d3b      	adds	r3, r7, #4
 8002a64:	4619      	mov	r1, r3
 8002a66:	4821      	ldr	r0, [pc, #132]	; (8002aec <MX_I2C1_Init+0xd4>)
 8002a68:	f7fd fec1 	bl	80007ee <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8002a6c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002a70:	f7ff ffba 	bl	80029e8 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002a74:	f7ff fe08 	bl	8002688 <NVIC_GetPriorityGrouping>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff fe54 	bl	800272c <NVIC_EncodePriority>
 8002a84:	4603      	mov	r3, r0
 8002a86:	4619      	mov	r1, r3
 8002a88:	201f      	movs	r0, #31
 8002a8a:	f7ff fe25 	bl	80026d8 <NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002a8e:	201f      	movs	r0, #31
 8002a90:	f7ff fe08 	bl	80026a4 <NVIC_EnableIRQ>

  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8002a94:	4816      	ldr	r0, [pc, #88]	; (8002af0 <MX_I2C1_Init+0xd8>)
 8002a96:	f7ff ff3d 	bl	8002914 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 8002a9a:	4815      	ldr	r0, [pc, #84]	; (8002af0 <MX_I2C1_Init+0xd8>)
 8002a9c:	f7ff fec1 	bl	8002822 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8002aa0:	4813      	ldr	r0, [pc, #76]	; (8002af0 <MX_I2C1_Init+0xd8>)
 8002aa2:	f7ff fe96 	bl	80027d2 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8002aa6:	4812      	ldr	r0, [pc, #72]	; (8002af0 <MX_I2C1_Init+0xd8>)
 8002aa8:	f7ff fe83 	bl	80027b2 <LL_I2C_EnableClockStretching>

  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8002aac:	2300      	movs	r3, #0
 8002aae:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 8002ab0:	4b10      	ldr	r3, [pc, #64]	; (8002af4 <MX_I2C1_Init+0xdc>)
 8002ab2:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 8002abc:	2302      	movs	r3, #2
 8002abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8002ac8:	f107 031c 	add.w	r3, r7, #28
 8002acc:	4619      	mov	r1, r3
 8002ace:	4808      	ldr	r0, [pc, #32]	; (8002af0 <MX_I2C1_Init+0xd8>)
 8002ad0:	f7fd ffaa 	bl	8000a28 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	4805      	ldr	r0, [pc, #20]	; (8002af0 <MX_I2C1_Init+0xd8>)
 8002ada:	f7ff fe8a 	bl	80027f2 <LL_I2C_SetOwnAddress2>

  LL_I2C_Enable(I2C1);
 8002ade:	4804      	ldr	r0, [pc, #16]	; (8002af0 <MX_I2C1_Init+0xd8>)
 8002ae0:	f7ff fe57 	bl	8002792 <LL_I2C_Enable>
}
 8002ae4:	bf00      	nop
 8002ae6:	3738      	adds	r7, #56	; 0x38
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	48000400 	.word	0x48000400
 8002af0:	40005400 	.word	0x40005400
 8002af4:	2000090e 	.word	0x2000090e

08002af8 <i2c_master_write>:

void i2c_master_write(uint8_t data, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8002af8:	b590      	push	{r4, r7, lr}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af02      	add	r7, sp, #8
 8002afe:	4604      	mov	r4, r0
 8002b00:	4608      	mov	r0, r1
 8002b02:	4611      	mov	r1, r2
 8002b04:	461a      	mov	r2, r3
 8002b06:	4623      	mov	r3, r4
 8002b08:	71fb      	strb	r3, [r7, #7]
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	71bb      	strb	r3, [r7, #6]
 8002b0e:	460b      	mov	r3, r1
 8002b10:	717b      	strb	r3, [r7, #5]
 8002b12:	4613      	mov	r3, r2
 8002b14:	713b      	strb	r3, [r7, #4]
	if(read_flag)
 8002b16:	793b      	ldrb	r3, [r7, #4]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d003      	beq.n	8002b24 <i2c_master_write+0x2c>
	{
		register_addr |= (1 << 7);
 8002b1c:	79bb      	ldrb	r3, [r7, #6]
 8002b1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b22:	71bb      	strb	r3, [r7, #6]
	}

	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8002b24:	7979      	ldrb	r1, [r7, #5]
 8002b26:	4b14      	ldr	r3, [pc, #80]	; (8002b78 <i2c_master_write+0x80>)
 8002b28:	9301      	str	r3, [sp, #4]
 8002b2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b2e:	9300      	str	r3, [sp, #0]
 8002b30:	2302      	movs	r3, #2
 8002b32:	2200      	movs	r2, #0
 8002b34:	4811      	ldr	r0, [pc, #68]	; (8002b7c <i2c_master_write+0x84>)
 8002b36:	f7ff fefd 	bl	8002934 <LL_I2C_HandleTransfer>

	LL_I2C_TransmitData8(I2C1, register_addr);
 8002b3a:	79bb      	ldrb	r3, [r7, #6]
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	480f      	ldr	r0, [pc, #60]	; (8002b7c <i2c_master_write+0x84>)
 8002b40:	f7ff ff2b 	bl	800299a <LL_I2C_TransmitData8>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8002b44:	e00a      	b.n	8002b5c <i2c_master_write+0x64>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8002b46:	480d      	ldr	r0, [pc, #52]	; (8002b7c <i2c_master_write+0x84>)
 8002b48:	f7ff fe9b 	bl	8002882 <LL_I2C_IsActiveFlag_TXIS>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d004      	beq.n	8002b5c <i2c_master_write+0x64>
		{
			LL_I2C_TransmitData8(I2C1, data);
 8002b52:	79fb      	ldrb	r3, [r7, #7]
 8002b54:	4619      	mov	r1, r3
 8002b56:	4809      	ldr	r0, [pc, #36]	; (8002b7c <i2c_master_write+0x84>)
 8002b58:	f7ff ff1f 	bl	800299a <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8002b5c:	4807      	ldr	r0, [pc, #28]	; (8002b7c <i2c_master_write+0x84>)
 8002b5e:	f7ff feb6 	bl	80028ce <LL_I2C_IsActiveFlag_STOP>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d0ee      	beq.n	8002b46 <i2c_master_write+0x4e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8002b68:	4804      	ldr	r0, [pc, #16]	; (8002b7c <i2c_master_write+0x84>)
 8002b6a:	f7ff fec3 	bl	80028f4 <LL_I2C_ClearFlag_STOP>
}
 8002b6e:	bf00      	nop
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd90      	pop	{r4, r7, pc}
 8002b76:	bf00      	nop
 8002b78:	80002000 	.word	0x80002000
 8002b7c:	40005400 	.word	0x40005400

08002b80 <i2c_master_read>:


uint8_t* i2c_master_read(uint8_t* buffer, uint8_t length, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af02      	add	r7, sp, #8
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	4608      	mov	r0, r1
 8002b8a:	4611      	mov	r1, r2
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	4603      	mov	r3, r0
 8002b90:	70fb      	strb	r3, [r7, #3]
 8002b92:	460b      	mov	r3, r1
 8002b94:	70bb      	strb	r3, [r7, #2]
 8002b96:	4613      	mov	r3, r2
 8002b98:	707b      	strb	r3, [r7, #1]
	aReceiveBuffer_read = buffer;
 8002b9a:	4a31      	ldr	r2, [pc, #196]	; (8002c60 <i2c_master_read+0xe0>)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6013      	str	r3, [r2, #0]

	if(read_flag)
 8002ba0:	7c3b      	ldrb	r3, [r7, #16]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <i2c_master_read+0x2e>
	{
		register_addr |= (1 << 7);
 8002ba6:	78bb      	ldrb	r3, [r7, #2]
 8002ba8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002bac:	70bb      	strb	r3, [r7, #2]
	}

	end_of_read_flag = 0;
 8002bae:	4b2d      	ldr	r3, [pc, #180]	; (8002c64 <i2c_master_read+0xe4>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	701a      	strb	r2, [r3, #0]

	LL_I2C_EnableIT_RX(I2C1);
 8002bb4:	482c      	ldr	r0, [pc, #176]	; (8002c68 <i2c_master_read+0xe8>)
 8002bb6:	f7ff fe44 	bl	8002842 <LL_I2C_EnableIT_RX>

	//poziadam slejva o citanie z jeho registra
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8002bba:	7879      	ldrb	r1, [r7, #1]
 8002bbc:	4b2b      	ldr	r3, [pc, #172]	; (8002c6c <i2c_master_read+0xec>)
 8002bbe:	9301      	str	r3, [sp, #4]
 8002bc0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bc4:	9300      	str	r3, [sp, #0]
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	2200      	movs	r2, #0
 8002bca:	4827      	ldr	r0, [pc, #156]	; (8002c68 <i2c_master_read+0xe8>)
 8002bcc:	f7ff feb2 	bl	8002934 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8002bd0:	e00a      	b.n	8002be8 <i2c_master_read+0x68>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8002bd2:	4825      	ldr	r0, [pc, #148]	; (8002c68 <i2c_master_read+0xe8>)
 8002bd4:	f7ff fe55 	bl	8002882 <LL_I2C_IsActiveFlag_TXIS>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d004      	beq.n	8002be8 <i2c_master_read+0x68>
		{
			LL_I2C_TransmitData8(I2C1, register_addr);
 8002bde:	78bb      	ldrb	r3, [r7, #2]
 8002be0:	4619      	mov	r1, r3
 8002be2:	4821      	ldr	r0, [pc, #132]	; (8002c68 <i2c_master_read+0xe8>)
 8002be4:	f7ff fed9 	bl	800299a <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8002be8:	481f      	ldr	r0, [pc, #124]	; (8002c68 <i2c_master_read+0xe8>)
 8002bea:	f7ff fe70 	bl	80028ce <LL_I2C_IsActiveFlag_STOP>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d0ee      	beq.n	8002bd2 <i2c_master_read+0x52>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8002bf4:	481c      	ldr	r0, [pc, #112]	; (8002c68 <i2c_master_read+0xe8>)
 8002bf6:	f7ff fe7d 	bl	80028f4 <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){}
 8002bfa:	bf00      	nop
 8002bfc:	481a      	ldr	r0, [pc, #104]	; (8002c68 <i2c_master_read+0xe8>)
 8002bfe:	f7ff fe66 	bl	80028ce <LL_I2C_IsActiveFlag_STOP>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d1f9      	bne.n	8002bfc <i2c_master_read+0x7c>

	//citam register od slejva
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 8002c08:	7879      	ldrb	r1, [r7, #1]
 8002c0a:	78fa      	ldrb	r2, [r7, #3]
 8002c0c:	4b18      	ldr	r3, [pc, #96]	; (8002c70 <i2c_master_read+0xf0>)
 8002c0e:	9301      	str	r3, [sp, #4]
 8002c10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c14:	9300      	str	r3, [sp, #0]
 8002c16:	4613      	mov	r3, r2
 8002c18:	2200      	movs	r2, #0
 8002c1a:	4813      	ldr	r0, [pc, #76]	; (8002c68 <i2c_master_read+0xe8>)
 8002c1c:	f7ff fe8a 	bl	8002934 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 8002c20:	bf00      	nop
 8002c22:	4811      	ldr	r0, [pc, #68]	; (8002c68 <i2c_master_read+0xe8>)
 8002c24:	f7ff fe53 	bl	80028ce <LL_I2C_IsActiveFlag_STOP>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d0f9      	beq.n	8002c22 <i2c_master_read+0xa2>

	//End of transfer
	LL_I2C_ClearFlag_STOP(I2C1);
 8002c2e:	480e      	ldr	r0, [pc, #56]	; (8002c68 <i2c_master_read+0xe8>)
 8002c30:	f7ff fe60 	bl	80028f4 <LL_I2C_ClearFlag_STOP>
	LL_I2C_DisableIT_RX(I2C1);
 8002c34:	480c      	ldr	r0, [pc, #48]	; (8002c68 <i2c_master_read+0xe8>)
 8002c36:	f7ff fe14 	bl	8002862 <LL_I2C_DisableIT_RX>
	I2C1->ICR |= (1 << 4);
 8002c3a:	4b0b      	ldr	r3, [pc, #44]	; (8002c68 <i2c_master_read+0xe8>)
 8002c3c:	69db      	ldr	r3, [r3, #28]
 8002c3e:	4a0a      	ldr	r2, [pc, #40]	; (8002c68 <i2c_master_read+0xe8>)
 8002c40:	f043 0310 	orr.w	r3, r3, #16
 8002c44:	61d3      	str	r3, [r2, #28]
	ubReceiveIndex = 0;
 8002c46:	4b0b      	ldr	r3, [pc, #44]	; (8002c74 <i2c_master_read+0xf4>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	701a      	strb	r2, [r3, #0]
	end_of_read_flag = 1;
 8002c4c:	4b05      	ldr	r3, [pc, #20]	; (8002c64 <i2c_master_read+0xe4>)
 8002c4e:	2201      	movs	r2, #1
 8002c50:	701a      	strb	r2, [r3, #0]

	return aReceiveBuffer_read;
 8002c52:	4b03      	ldr	r3, [pc, #12]	; (8002c60 <i2c_master_read+0xe0>)
 8002c54:	681b      	ldr	r3, [r3, #0]
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	20000054 	.word	0x20000054
 8002c64:	20000050 	.word	0x20000050
 8002c68:	40005400 	.word	0x40005400
 8002c6c:	80002000 	.word	0x80002000
 8002c70:	80002400 	.word	0x80002400
 8002c74:	20000051 	.word	0x20000051

08002c78 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8002c78:	b598      	push	{r3, r4, r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
	/* Check RXNE flag value in ISR register */
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 8002c7c:	4812      	ldr	r0, [pc, #72]	; (8002cc8 <I2C1_EV_IRQHandler+0x50>)
 8002c7e:	f7ff fe13 	bl	80028a8 <LL_I2C_IsActiveFlag_RXNE>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d01c      	beq.n	8002cc2 <I2C1_EV_IRQHandler+0x4a>
	{
		/* Call function Master Reception Callback */
		aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 8002c88:	4b10      	ldr	r3, [pc, #64]	; (8002ccc <I2C1_EV_IRQHandler+0x54>)
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	4b10      	ldr	r3, [pc, #64]	; (8002cd0 <I2C1_EV_IRQHandler+0x58>)
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	1c59      	adds	r1, r3, #1
 8002c94:	b2c8      	uxtb	r0, r1
 8002c96:	490e      	ldr	r1, [pc, #56]	; (8002cd0 <I2C1_EV_IRQHandler+0x58>)
 8002c98:	7008      	strb	r0, [r1, #0]
 8002c9a:	18d4      	adds	r4, r2, r3
 8002c9c:	480a      	ldr	r0, [pc, #40]	; (8002cc8 <I2C1_EV_IRQHandler+0x50>)
 8002c9e:	f7ff fe6f 	bl	8002980 <LL_I2C_ReceiveData8>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	7023      	strb	r3, [r4, #0]
		(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 8002ca6:	4b0a      	ldr	r3, [pc, #40]	; (8002cd0 <I2C1_EV_IRQHandler+0x58>)
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	2b13      	cmp	r3, #19
 8002cae:	d903      	bls.n	8002cb8 <I2C1_EV_IRQHandler+0x40>
 8002cb0:	4b07      	ldr	r3, [pc, #28]	; (8002cd0 <I2C1_EV_IRQHandler+0x58>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	701a      	strb	r2, [r3, #0]
 8002cb6:	e001      	b.n	8002cbc <I2C1_EV_IRQHandler+0x44>
 8002cb8:	4b05      	ldr	r3, [pc, #20]	; (8002cd0 <I2C1_EV_IRQHandler+0x58>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
		end_of_read_flag = 0;
 8002cbc:	4b05      	ldr	r3, [pc, #20]	; (8002cd4 <I2C1_EV_IRQHandler+0x5c>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	701a      	strb	r2, [r3, #0]
	}
}
 8002cc2:	bf00      	nop
 8002cc4:	bd98      	pop	{r3, r4, r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	40005400 	.word	0x40005400
 8002ccc:	20000054 	.word	0x20000054
 8002cd0:	20000051 	.word	0x20000051
 8002cd4:	20000050 	.word	0x20000050

08002cd8 <NVIC_SetPriorityGrouping>:
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f003 0307 	and.w	r3, r3, #7
 8002ce6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ce8:	4b0c      	ldr	r3, [pc, #48]	; (8002d1c <NVIC_SetPriorityGrouping+0x44>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cee:	68ba      	ldr	r2, [r7, #8]
 8002cf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d0a:	4a04      	ldr	r2, [pc, #16]	; (8002d1c <NVIC_SetPriorityGrouping+0x44>)
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	60d3      	str	r3, [r2, #12]
}
 8002d10:	bf00      	nop
 8002d12:	3714      	adds	r7, #20
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr
 8002d1c:	e000ed00 	.word	0xe000ed00

08002d20 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002d24:	4b05      	ldr	r3, [pc, #20]	; (8002d3c <LL_RCC_HSI_Enable+0x1c>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a04      	ldr	r2, [pc, #16]	; (8002d3c <LL_RCC_HSI_Enable+0x1c>)
 8002d2a:	f043 0301 	orr.w	r3, r3, #1
 8002d2e:	6013      	str	r3, [r2, #0]
}
 8002d30:	bf00      	nop
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	40021000 	.word	0x40021000

08002d40 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002d44:	4b06      	ldr	r3, [pc, #24]	; (8002d60 <LL_RCC_HSI_IsReady+0x20>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	bf0c      	ite	eq
 8002d50:	2301      	moveq	r3, #1
 8002d52:	2300      	movne	r3, #0
 8002d54:	b2db      	uxtb	r3, r3
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr
 8002d60:	40021000 	.word	0x40021000

08002d64 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8002d6c:	4b07      	ldr	r3, [pc, #28]	; (8002d8c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	4904      	ldr	r1, [pc, #16]	; (8002d8c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	600b      	str	r3, [r1, #0]
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	40021000 	.word	0x40021000

08002d90 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002d98:	4b06      	ldr	r3, [pc, #24]	; (8002db4 <LL_RCC_SetSysClkSource+0x24>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f023 0203 	bic.w	r2, r3, #3
 8002da0:	4904      	ldr	r1, [pc, #16]	; (8002db4 <LL_RCC_SetSysClkSource+0x24>)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	604b      	str	r3, [r1, #4]
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	40021000 	.word	0x40021000

08002db8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002dbc:	4b04      	ldr	r3, [pc, #16]	; (8002dd0 <LL_RCC_GetSysClkSource+0x18>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f003 030c 	and.w	r3, r3, #12
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	40021000 	.word	0x40021000

08002dd4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002ddc:	4b06      	ldr	r3, [pc, #24]	; (8002df8 <LL_RCC_SetAHBPrescaler+0x24>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002de4:	4904      	ldr	r1, [pc, #16]	; (8002df8 <LL_RCC_SetAHBPrescaler+0x24>)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	604b      	str	r3, [r1, #4]
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr
 8002df8:	40021000 	.word	0x40021000

08002dfc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002e04:	4b06      	ldr	r3, [pc, #24]	; (8002e20 <LL_RCC_SetAPB1Prescaler+0x24>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e0c:	4904      	ldr	r1, [pc, #16]	; (8002e20 <LL_RCC_SetAPB1Prescaler+0x24>)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	604b      	str	r3, [r1, #4]
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	40021000 	.word	0x40021000

08002e24 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002e2c:	4b06      	ldr	r3, [pc, #24]	; (8002e48 <LL_RCC_SetAPB2Prescaler+0x24>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e34:	4904      	ldr	r1, [pc, #16]	; (8002e48 <LL_RCC_SetAPB2Prescaler+0x24>)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	604b      	str	r3, [r1, #4]
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr
 8002e48:	40021000 	.word	0x40021000

08002e4c <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 8002e54:	4b08      	ldr	r3, [pc, #32]	; (8002e78 <LL_RCC_SetI2CClockSource+0x2c>)
 8002e56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	0e1b      	lsrs	r3, r3, #24
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	401a      	ands	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002e66:	4904      	ldr	r1, [pc, #16]	; (8002e78 <LL_RCC_SetI2CClockSource+0x2c>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	630b      	str	r3, [r1, #48]	; 0x30
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr
 8002e78:	40021000 	.word	0x40021000

08002e7c <LL_APB1_GRP1_EnableClock>:
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002e84:	4b08      	ldr	r3, [pc, #32]	; (8002ea8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002e86:	69da      	ldr	r2, [r3, #28]
 8002e88:	4907      	ldr	r1, [pc, #28]	; (8002ea8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002e90:	4b05      	ldr	r3, [pc, #20]	; (8002ea8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002e92:	69da      	ldr	r2, [r3, #28]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4013      	ands	r3, r2
 8002e98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
}
 8002e9c:	bf00      	nop
 8002e9e:	3714      	adds	r7, #20
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr
 8002ea8:	40021000 	.word	0x40021000

08002eac <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002eb4:	4b08      	ldr	r3, [pc, #32]	; (8002ed8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002eb6:	699a      	ldr	r2, [r3, #24]
 8002eb8:	4907      	ldr	r1, [pc, #28]	; (8002ed8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002ec0:	4b05      	ldr	r3, [pc, #20]	; (8002ed8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002ec2:	699a      	ldr	r2, [r3, #24]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002eca:	68fb      	ldr	r3, [r7, #12]
}
 8002ecc:	bf00      	nop
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	40021000 	.word	0x40021000

08002edc <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8002ee4:	4b06      	ldr	r3, [pc, #24]	; (8002f00 <LL_FLASH_SetLatency+0x24>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f023 0207 	bic.w	r2, r3, #7
 8002eec:	4904      	ldr	r1, [pc, #16]	; (8002f00 <LL_FLASH_SetLatency+0x24>)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	600b      	str	r3, [r1, #0]
}
 8002ef4:	bf00      	nop
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr
 8002f00:	40022000 	.word	0x40022000

08002f04 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8002f08:	4b04      	ldr	r3, [pc, #16]	; (8002f1c <LL_FLASH_GetLatency+0x18>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0307 	and.w	r3, r3, #7
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	40022000 	.word	0x40022000

08002f20 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2b04      	cmp	r3, #4
 8002f2c:	d106      	bne.n	8002f3c <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8002f2e:	4b09      	ldr	r3, [pc, #36]	; (8002f54 <LL_SYSTICK_SetClkSource+0x34>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a08      	ldr	r2, [pc, #32]	; (8002f54 <LL_SYSTICK_SetClkSource+0x34>)
 8002f34:	f043 0304 	orr.w	r3, r3, #4
 8002f38:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 8002f3a:	e005      	b.n	8002f48 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8002f3c:	4b05      	ldr	r3, [pc, #20]	; (8002f54 <LL_SYSTICK_SetClkSource+0x34>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a04      	ldr	r2, [pc, #16]	; (8002f54 <LL_SYSTICK_SetClkSource+0x34>)
 8002f42:	f023 0304 	bic.w	r3, r3, #4
 8002f46:	6013      	str	r3, [r2, #0]
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr
 8002f54:	e000e010 	.word	0xe000e010

08002f58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8002f5c:	2001      	movs	r0, #1
 8002f5e:	f7ff ffa5 	bl	8002eac <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8002f62:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002f66:	f7ff ff89 	bl	8002e7c <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f6a:	2003      	movs	r0, #3
 8002f6c:	f7ff feb4 	bl	8002cd8 <NVIC_SetPriorityGrouping>

  /* System interrupt init*/


  /* Configure the system clock */
  SystemClock_Config();
 8002f70:	f000 f840 	bl	8002ff4 <SystemClock_Config>


  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f74:	f7ff fb0e 	bl	8002594 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002f78:	f7ff fd4e 	bl	8002a18 <MX_I2C1_Init>

  setSegments();
 8002f7c:	f7fe fa60 	bl	8001440 <setSegments>
  setDigits();
 8002f80:	f7fe faaa 	bl	80014d8 <setDigits>

  LL_mDelay(2000);
 8002f84:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002f88:	f7fe f9ba 	bl	8001300 <LL_mDelay>

  resetDigits();
 8002f8c:	f7fe fa86 	bl	800149c <resetDigits>
  resetSegments();
 8002f90:	f7fe fa28 	bl	80013e4 <resetSegments>

  lsm6ds0_init();
 8002f94:	f000 fb8a 	bl	80036ac <lsm6ds0_init>

  MX_TIM3_Init();
 8002f98:	f000 facc 	bl	8003534 <MX_TIM3_Init>
//		  if (pos >= (sizeof(string)/sizeof(string[1])-4)) {
//			  backwards = 1;
//		  }
//	  }
//
	  if (switch_state == 1) displayNumber(acc);
 8002f9c:	4b10      	ldr	r3, [pc, #64]	; (8002fe0 <main+0x88>)
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d103      	bne.n	8002fac <main+0x54>
 8002fa4:	480f      	ldr	r0, [pc, #60]	; (8002fe4 <main+0x8c>)
 8002fa6:	f7fe ff5b 	bl	8001e60 <displayNumber>
 8002faa:	e014      	b.n	8002fd6 <main+0x7e>
	  else if (switch_state == 2) displayNumber(acc+1);
 8002fac:	4b0c      	ldr	r3, [pc, #48]	; (8002fe0 <main+0x88>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d104      	bne.n	8002fbe <main+0x66>
 8002fb4:	4b0c      	ldr	r3, [pc, #48]	; (8002fe8 <main+0x90>)
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7fe ff52 	bl	8001e60 <displayNumber>
 8002fbc:	e00b      	b.n	8002fd6 <main+0x7e>
	  else if (switch_state == 3) displayNumber(acc+2);
 8002fbe:	4b08      	ldr	r3, [pc, #32]	; (8002fe0 <main+0x88>)
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	2b03      	cmp	r3, #3
 8002fc4:	d104      	bne.n	8002fd0 <main+0x78>
 8002fc6:	4b09      	ldr	r3, [pc, #36]	; (8002fec <main+0x94>)
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7fe ff49 	bl	8001e60 <displayNumber>
 8002fce:	e002      	b.n	8002fd6 <main+0x7e>
	  else displayNumber(string);
 8002fd0:	4807      	ldr	r0, [pc, #28]	; (8002ff0 <main+0x98>)
 8002fd2:	f7fe ff45 	bl	8001e60 <displayNumber>

	  LL_mDelay(50);
 8002fd6:	2032      	movs	r0, #50	; 0x32
 8002fd8:	f7fe f992 	bl	8001300 <LL_mDelay>
	  if (switch_state == 1) displayNumber(acc);
 8002fdc:	e7de      	b.n	8002f9c <main+0x44>
 8002fde:	bf00      	nop
 8002fe0:	20000000 	.word	0x20000000
 8002fe4:	20000058 	.word	0x20000058
 8002fe8:	2000005c 	.word	0x2000005c
 8002fec:	20000060 	.word	0x20000060
 8002ff0:	20000004 	.word	0x20000004

08002ff4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8002ff8:	2000      	movs	r0, #0
 8002ffa:	f7ff ff6f 	bl	8002edc <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8002ffe:	f7ff ff81 	bl	8002f04 <LL_FLASH_GetLatency>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <SystemClock_Config+0x18>
  {
  Error_Handler();
 8003008:	f000 f82e 	bl	8003068 <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 800300c:	f7ff fe88 	bl	8002d20 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8003010:	bf00      	nop
 8003012:	f7ff fe95 	bl	8002d40 <LL_RCC_HSI_IsReady>
 8003016:	4603      	mov	r3, r0
 8003018:	2b01      	cmp	r3, #1
 800301a:	d1fa      	bne.n	8003012 <SystemClock_Config+0x1e>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 800301c:	2010      	movs	r0, #16
 800301e:	f7ff fea1 	bl	8002d64 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8003022:	2000      	movs	r0, #0
 8003024:	f7ff fed6 	bl	8002dd4 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8003028:	2000      	movs	r0, #0
 800302a:	f7ff fee7 	bl	8002dfc <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 800302e:	2000      	movs	r0, #0
 8003030:	f7ff fef8 	bl	8002e24 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8003034:	2000      	movs	r0, #0
 8003036:	f7ff feab 	bl	8002d90 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 800303a:	bf00      	nop
 800303c:	f7ff febc 	bl	8002db8 <LL_RCC_GetSysClkSource>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1fa      	bne.n	800303c <SystemClock_Config+0x48>
  {

  }
  LL_Init1msTick(8000000);
 8003046:	4807      	ldr	r0, [pc, #28]	; (8003064 <SystemClock_Config+0x70>)
 8003048:	f7fe f94c 	bl	80012e4 <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 800304c:	2004      	movs	r0, #4
 800304e:	f7ff ff67 	bl	8002f20 <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(8000000);
 8003052:	4804      	ldr	r0, [pc, #16]	; (8003064 <SystemClock_Config+0x70>)
 8003054:	f7fe f978 	bl	8001348 <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8003058:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800305c:	f7ff fef6 	bl	8002e4c <LL_RCC_SetI2CClockSource>
}
 8003060:	bf00      	nop
 8003062:	bd80      	pop	{r7, pc}
 8003064:	007a1200 	.word	0x007a1200

08003068 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800306c:	bf00      	nop
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
	...

08003078 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8003080:	4b07      	ldr	r3, [pc, #28]	; (80030a0 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8003082:	695a      	ldr	r2, [r3, #20]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4013      	ands	r3, r2
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	429a      	cmp	r2, r3
 800308c:	bf0c      	ite	eq
 800308e:	2301      	moveq	r3, #1
 8003090:	2300      	movne	r3, #0
 8003092:	b2db      	uxtb	r3, r3
}
 8003094:	4618      	mov	r0, r3
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr
 80030a0:	40010400 	.word	0x40010400

080030a4 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 80030ac:	4a04      	ldr	r2, [pc, #16]	; (80030c0 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6153      	str	r3, [r2, #20]
}
 80030b2:	bf00      	nop
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	40010400 	.word	0x40010400

080030c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80030c8:	bf00      	nop
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030d2:	b480      	push	{r7}
 80030d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030d6:	e7fe      	b.n	80030d6 <HardFault_Handler+0x4>

080030d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030dc:	e7fe      	b.n	80030dc <MemManage_Handler+0x4>

080030de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030de:	b480      	push	{r7}
 80030e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030e2:	e7fe      	b.n	80030e2 <BusFault_Handler+0x4>

080030e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030e8:	e7fe      	b.n	80030e8 <UsageFault_Handler+0x4>

080030ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030ea:	b480      	push	{r7}
 80030ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030ee:	bf00      	nop
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030fc:	bf00      	nop
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003106:	b480      	push	{r7}
 8003108:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800310a:	bf00      	nop
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003118:	bf00      	nop
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
	...

08003124 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af02      	add	r7, sp, #8
	if(checkButtonState(GPIO_PORT_BUTTON,
 800312a:	2314      	movs	r3, #20
 800312c:	9300      	str	r3, [sp, #0]
 800312e:	231e      	movs	r3, #30
 8003130:	2201      	movs	r2, #1
 8003132:	2103      	movs	r1, #3
 8003134:	480f      	ldr	r0, [pc, #60]	; (8003174 <EXTI3_IRQHandler+0x50>)
 8003136:	f000 f821 	bl	800317c <checkButtonState>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00d      	beq.n	800315c <EXTI3_IRQHandler+0x38>
													GPIO_PIN_BUTTON,
													BUTTON_EXTI_TRIGGER,
													BUTTON_EXTI_SAMPLES_WINDOW,
													BUTTON_EXTI_SAMPLES_REQUIRED))
	{
		if (switch_state >= 5) switch_state = 1;
 8003140:	4b0d      	ldr	r3, [pc, #52]	; (8003178 <EXTI3_IRQHandler+0x54>)
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	2b04      	cmp	r3, #4
 8003146:	d903      	bls.n	8003150 <EXTI3_IRQHandler+0x2c>
 8003148:	4b0b      	ldr	r3, [pc, #44]	; (8003178 <EXTI3_IRQHandler+0x54>)
 800314a:	2201      	movs	r2, #1
 800314c:	701a      	strb	r2, [r3, #0]
 800314e:	e005      	b.n	800315c <EXTI3_IRQHandler+0x38>
		else switch_state++;
 8003150:	4b09      	ldr	r3, [pc, #36]	; (8003178 <EXTI3_IRQHandler+0x54>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	3301      	adds	r3, #1
 8003156:	b2da      	uxtb	r2, r3
 8003158:	4b07      	ldr	r3, [pc, #28]	; (8003178 <EXTI3_IRQHandler+0x54>)
 800315a:	701a      	strb	r2, [r3, #0]
	}


	  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_3) != RESET)
 800315c:	2008      	movs	r0, #8
 800315e:	f7ff ff8b 	bl	8003078 <LL_EXTI_IsActiveFlag_0_31>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d002      	beq.n	800316e <EXTI3_IRQHandler+0x4a>
	  {
	    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_3);
 8003168:	2008      	movs	r0, #8
 800316a:	f7ff ff9b 	bl	80030a4 <LL_EXTI_ClearFlag_0_31>

	  }
}
 800316e:	bf00      	nop
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	48000400 	.word	0x48000400
 8003178:	20000000 	.word	0x20000000

0800317c <checkButtonState>:

uint8_t checkButtonState(GPIO_TypeDef* PORT, uint8_t PIN, uint8_t edge, uint8_t samples_window, uint8_t samples_required)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	4608      	mov	r0, r1
 8003186:	4611      	mov	r1, r2
 8003188:	461a      	mov	r2, r3
 800318a:	4603      	mov	r3, r0
 800318c:	70fb      	strb	r3, [r7, #3]
 800318e:	460b      	mov	r3, r1
 8003190:	70bb      	strb	r3, [r7, #2]
 8003192:	4613      	mov	r3, r2
 8003194:	707b      	strb	r3, [r7, #1]
	uint8_t button_state = 0, it = 0;
 8003196:	2300      	movs	r3, #0
 8003198:	73fb      	strb	r3, [r7, #15]
 800319a:	2300      	movs	r3, #0
 800319c:	73bb      	strb	r3, [r7, #14]

	while(it < samples_window)
 800319e:	e01b      	b.n	80031d8 <checkButtonState+0x5c>
	{
		if((!(PORT->IDR & (1 << PIN)) == edge) /*LL_GPIO_IsInputPinSet(PORT, PIN)*/)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	78fa      	ldrb	r2, [r7, #3]
 80031a6:	2101      	movs	r1, #1
 80031a8:	fa01 f202 	lsl.w	r2, r1, r2
 80031ac:	4013      	ands	r3, r2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	bf0c      	ite	eq
 80031b2:	2301      	moveq	r3, #1
 80031b4:	2300      	movne	r3, #0
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	461a      	mov	r2, r3
 80031ba:	78bb      	ldrb	r3, [r7, #2]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d103      	bne.n	80031c8 <checkButtonState+0x4c>
		{
			button_state += 1;
 80031c0:	7bfb      	ldrb	r3, [r7, #15]
 80031c2:	3301      	adds	r3, #1
 80031c4:	73fb      	strb	r3, [r7, #15]
 80031c6:	e001      	b.n	80031cc <checkButtonState+0x50>
		}
		else
		{
			button_state = 0;
 80031c8:	2300      	movs	r3, #0
 80031ca:	73fb      	strb	r3, [r7, #15]
		}

		it++;
 80031cc:	7bbb      	ldrb	r3, [r7, #14]
 80031ce:	3301      	adds	r3, #1
 80031d0:	73bb      	strb	r3, [r7, #14]
		LL_mDelay(1);
 80031d2:	2001      	movs	r0, #1
 80031d4:	f7fe f894 	bl	8001300 <LL_mDelay>
	while(it < samples_window)
 80031d8:	7bba      	ldrb	r2, [r7, #14]
 80031da:	787b      	ldrb	r3, [r7, #1]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d3df      	bcc.n	80031a0 <checkButtonState+0x24>
	}

	if(button_state >= samples_required)
 80031e0:	7bfa      	ldrb	r2, [r7, #15]
 80031e2:	7e3b      	ldrb	r3, [r7, #24]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d301      	bcc.n	80031ec <checkButtonState+0x70>
	{
		return 1;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e000      	b.n	80031ee <checkButtonState+0x72>
	}

	else
	{
		return 0;
 80031ec:	2300      	movs	r3, #0
	}
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
	...

080031f8 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031fc:	4b1f      	ldr	r3, [pc, #124]	; (800327c <SystemInit+0x84>)
 80031fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003202:	4a1e      	ldr	r2, [pc, #120]	; (800327c <SystemInit+0x84>)
 8003204:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003208:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800320c:	4b1c      	ldr	r3, [pc, #112]	; (8003280 <SystemInit+0x88>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a1b      	ldr	r2, [pc, #108]	; (8003280 <SystemInit+0x88>)
 8003212:	f043 0301 	orr.w	r3, r3, #1
 8003216:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8003218:	4b19      	ldr	r3, [pc, #100]	; (8003280 <SystemInit+0x88>)
 800321a:	685a      	ldr	r2, [r3, #4]
 800321c:	4918      	ldr	r1, [pc, #96]	; (8003280 <SystemInit+0x88>)
 800321e:	4b19      	ldr	r3, [pc, #100]	; (8003284 <SystemInit+0x8c>)
 8003220:	4013      	ands	r3, r2
 8003222:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003224:	4b16      	ldr	r3, [pc, #88]	; (8003280 <SystemInit+0x88>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a15      	ldr	r2, [pc, #84]	; (8003280 <SystemInit+0x88>)
 800322a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800322e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003232:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003234:	4b12      	ldr	r3, [pc, #72]	; (8003280 <SystemInit+0x88>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a11      	ldr	r2, [pc, #68]	; (8003280 <SystemInit+0x88>)
 800323a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800323e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003240:	4b0f      	ldr	r3, [pc, #60]	; (8003280 <SystemInit+0x88>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	4a0e      	ldr	r2, [pc, #56]	; (8003280 <SystemInit+0x88>)
 8003246:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800324a:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 800324c:	4b0c      	ldr	r3, [pc, #48]	; (8003280 <SystemInit+0x88>)
 800324e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003250:	4a0b      	ldr	r2, [pc, #44]	; (8003280 <SystemInit+0x88>)
 8003252:	f023 030f 	bic.w	r3, r3, #15
 8003256:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8003258:	4b09      	ldr	r3, [pc, #36]	; (8003280 <SystemInit+0x88>)
 800325a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800325c:	4908      	ldr	r1, [pc, #32]	; (8003280 <SystemInit+0x88>)
 800325e:	4b0a      	ldr	r3, [pc, #40]	; (8003288 <SystemInit+0x90>)
 8003260:	4013      	ands	r3, r2
 8003262:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8003264:	4b06      	ldr	r3, [pc, #24]	; (8003280 <SystemInit+0x88>)
 8003266:	2200      	movs	r2, #0
 8003268:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800326a:	4b04      	ldr	r3, [pc, #16]	; (800327c <SystemInit+0x84>)
 800326c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003270:	609a      	str	r2, [r3, #8]
#endif
}
 8003272:	bf00      	nop
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr
 800327c:	e000ed00 	.word	0xe000ed00
 8003280:	40021000 	.word	0x40021000
 8003284:	f87fc00c 	.word	0xf87fc00c
 8003288:	ff00fccc 	.word	0xff00fccc

0800328c <NVIC_GetPriorityGrouping>:
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003290:	4b04      	ldr	r3, [pc, #16]	; (80032a4 <NVIC_GetPriorityGrouping+0x18>)
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	0a1b      	lsrs	r3, r3, #8
 8003296:	f003 0307 	and.w	r3, r3, #7
}
 800329a:	4618      	mov	r0, r3
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr
 80032a4:	e000ed00 	.word	0xe000ed00

080032a8 <NVIC_EnableIRQ>:
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	4603      	mov	r3, r0
 80032b0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80032b2:	79fb      	ldrb	r3, [r7, #7]
 80032b4:	f003 021f 	and.w	r2, r3, #31
 80032b8:	4907      	ldr	r1, [pc, #28]	; (80032d8 <NVIC_EnableIRQ+0x30>)
 80032ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032be:	095b      	lsrs	r3, r3, #5
 80032c0:	2001      	movs	r0, #1
 80032c2:	fa00 f202 	lsl.w	r2, r0, r2
 80032c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80032ca:	bf00      	nop
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	e000e100 	.word	0xe000e100

080032dc <NVIC_SetPriority>:
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	4603      	mov	r3, r0
 80032e4:	6039      	str	r1, [r7, #0]
 80032e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80032e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	da0b      	bge.n	8003308 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	b2da      	uxtb	r2, r3
 80032f4:	490c      	ldr	r1, [pc, #48]	; (8003328 <NVIC_SetPriority+0x4c>)
 80032f6:	79fb      	ldrb	r3, [r7, #7]
 80032f8:	f003 030f 	and.w	r3, r3, #15
 80032fc:	3b04      	subs	r3, #4
 80032fe:	0112      	lsls	r2, r2, #4
 8003300:	b2d2      	uxtb	r2, r2
 8003302:	440b      	add	r3, r1
 8003304:	761a      	strb	r2, [r3, #24]
}
 8003306:	e009      	b.n	800331c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	b2da      	uxtb	r2, r3
 800330c:	4907      	ldr	r1, [pc, #28]	; (800332c <NVIC_SetPriority+0x50>)
 800330e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003312:	0112      	lsls	r2, r2, #4
 8003314:	b2d2      	uxtb	r2, r2
 8003316:	440b      	add	r3, r1
 8003318:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr
 8003328:	e000ed00 	.word	0xe000ed00
 800332c:	e000e100 	.word	0xe000e100

08003330 <NVIC_EncodePriority>:
{
 8003330:	b480      	push	{r7}
 8003332:	b089      	sub	sp, #36	; 0x24
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f003 0307 	and.w	r3, r3, #7
 8003342:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	f1c3 0307 	rsb	r3, r3, #7
 800334a:	2b04      	cmp	r3, #4
 800334c:	bf28      	it	cs
 800334e:	2304      	movcs	r3, #4
 8003350:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	3304      	adds	r3, #4
 8003356:	2b06      	cmp	r3, #6
 8003358:	d902      	bls.n	8003360 <NVIC_EncodePriority+0x30>
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	3b03      	subs	r3, #3
 800335e:	e000      	b.n	8003362 <NVIC_EncodePriority+0x32>
 8003360:	2300      	movs	r3, #0
 8003362:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003364:	f04f 32ff 	mov.w	r2, #4294967295
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	fa02 f303 	lsl.w	r3, r2, r3
 800336e:	43da      	mvns	r2, r3
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	401a      	ands	r2, r3
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003378:	f04f 31ff 	mov.w	r1, #4294967295
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	fa01 f303 	lsl.w	r3, r1, r3
 8003382:	43d9      	mvns	r1, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003388:	4313      	orrs	r3, r2
}
 800338a:	4618      	mov	r0, r3
 800338c:	3724      	adds	r7, #36	; 0x24
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
	...

08003398 <LL_APB1_GRP1_EnableClock>:
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80033a0:	4b08      	ldr	r3, [pc, #32]	; (80033c4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80033a2:	69da      	ldr	r2, [r3, #28]
 80033a4:	4907      	ldr	r1, [pc, #28]	; (80033c4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80033ac:	4b05      	ldr	r3, [pc, #20]	; (80033c4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80033ae:	69da      	ldr	r2, [r3, #28]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4013      	ands	r3, r2
 80033b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80033b6:	68fb      	ldr	r3, [r7, #12]
}
 80033b8:	bf00      	nop
 80033ba:	3714      	adds	r7, #20
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr
 80033c4:	40021000 	.word	0x40021000

080033c8 <LL_TIM_EnableCounter>:
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f043 0201 	orr.w	r2, r3, #1
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	601a      	str	r2, [r3, #0]
}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <LL_TIM_EnableARRPreload>:
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	601a      	str	r2, [r3, #0]
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <LL_TIM_OC_DisableFast>:
{
 8003408:	b4b0      	push	{r4, r5, r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d028      	beq.n	800346a <LL_TIM_OC_DisableFast+0x62>
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	2b04      	cmp	r3, #4
 800341c:	d023      	beq.n	8003466 <LL_TIM_OC_DisableFast+0x5e>
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	2b10      	cmp	r3, #16
 8003422:	d01e      	beq.n	8003462 <LL_TIM_OC_DisableFast+0x5a>
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	2b40      	cmp	r3, #64	; 0x40
 8003428:	d019      	beq.n	800345e <LL_TIM_OC_DisableFast+0x56>
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003430:	d013      	beq.n	800345a <LL_TIM_OC_DisableFast+0x52>
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003438:	d00d      	beq.n	8003456 <LL_TIM_OC_DisableFast+0x4e>
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003440:	d007      	beq.n	8003452 <LL_TIM_OC_DisableFast+0x4a>
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003448:	d101      	bne.n	800344e <LL_TIM_OC_DisableFast+0x46>
 800344a:	2307      	movs	r3, #7
 800344c:	e00e      	b.n	800346c <LL_TIM_OC_DisableFast+0x64>
 800344e:	2308      	movs	r3, #8
 8003450:	e00c      	b.n	800346c <LL_TIM_OC_DisableFast+0x64>
 8003452:	2306      	movs	r3, #6
 8003454:	e00a      	b.n	800346c <LL_TIM_OC_DisableFast+0x64>
 8003456:	2305      	movs	r3, #5
 8003458:	e008      	b.n	800346c <LL_TIM_OC_DisableFast+0x64>
 800345a:	2304      	movs	r3, #4
 800345c:	e006      	b.n	800346c <LL_TIM_OC_DisableFast+0x64>
 800345e:	2303      	movs	r3, #3
 8003460:	e004      	b.n	800346c <LL_TIM_OC_DisableFast+0x64>
 8003462:	2302      	movs	r3, #2
 8003464:	e002      	b.n	800346c <LL_TIM_OC_DisableFast+0x64>
 8003466:	2301      	movs	r3, #1
 8003468:	e000      	b.n	800346c <LL_TIM_OC_DisableFast+0x64>
 800346a:	2300      	movs	r3, #0
 800346c:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	3318      	adds	r3, #24
 8003472:	461a      	mov	r2, r3
 8003474:	4629      	mov	r1, r5
 8003476:	4b09      	ldr	r3, [pc, #36]	; (800349c <LL_TIM_OC_DisableFast+0x94>)
 8003478:	5c5b      	ldrb	r3, [r3, r1]
 800347a:	4413      	add	r3, r2
 800347c:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800347e:	6822      	ldr	r2, [r4, #0]
 8003480:	4629      	mov	r1, r5
 8003482:	4b07      	ldr	r3, [pc, #28]	; (80034a0 <LL_TIM_OC_DisableFast+0x98>)
 8003484:	5c5b      	ldrb	r3, [r3, r1]
 8003486:	4619      	mov	r1, r3
 8003488:	2304      	movs	r3, #4
 800348a:	408b      	lsls	r3, r1
 800348c:	43db      	mvns	r3, r3
 800348e:	4013      	ands	r3, r2
 8003490:	6023      	str	r3, [r4, #0]
}
 8003492:	bf00      	nop
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	bcb0      	pop	{r4, r5, r7}
 800349a:	4770      	bx	lr
 800349c:	08003780 	.word	0x08003780
 80034a0:	0800378c 	.word	0x0800378c

080034a4 <LL_TIM_SetClockSource>:
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80034b6:	f023 0307 	bic.w	r3, r3, #7
 80034ba:	683a      	ldr	r2, [r7, #0]
 80034bc:	431a      	orrs	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	609a      	str	r2, [r3, #8]
}
 80034c2:	bf00      	nop
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr

080034ce <LL_TIM_SetTriggerOutput>:
{
 80034ce:	b480      	push	{r7}
 80034d0:	b083      	sub	sp, #12
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
 80034d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	431a      	orrs	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	605a      	str	r2, [r3, #4]
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <LL_TIM_DisableMasterSlaveMode>:
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	609a      	str	r2, [r3, #8]
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <LL_TIM_EnableIT_UPDATE>:
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	f043 0201 	orr.w	r2, r3, #1
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	60da      	str	r2, [r3, #12]
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b08e      	sub	sp, #56	; 0x38
 8003538:	af00      	add	r7, sp, #0
	LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800353a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800353e:	2200      	movs	r2, #0
 8003540:	601a      	str	r2, [r3, #0]
 8003542:	605a      	str	r2, [r3, #4]
 8003544:	609a      	str	r2, [r3, #8]
 8003546:	60da      	str	r2, [r3, #12]
 8003548:	611a      	str	r2, [r3, #16]
	LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800354a:	1d3b      	adds	r3, r7, #4
 800354c:	2220      	movs	r2, #32
 800354e:	2100      	movs	r1, #0
 8003550:	4618      	mov	r0, r3
 8003552:	f000 f901 	bl	8003758 <memset>

	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8003556:	2002      	movs	r0, #2
 8003558:	f7ff ff1e 	bl	8003398 <LL_APB1_GRP1_EnableClock>

	/* TIM3 interrupt Init */
	NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 2));
 800355c:	f7ff fe96 	bl	800328c <NVIC_GetPriorityGrouping>
 8003560:	4603      	mov	r3, r0
 8003562:	2202      	movs	r2, #2
 8003564:	2102      	movs	r1, #2
 8003566:	4618      	mov	r0, r3
 8003568:	f7ff fee2 	bl	8003330 <NVIC_EncodePriority>
 800356c:	4603      	mov	r3, r0
 800356e:	4619      	mov	r1, r3
 8003570:	201d      	movs	r0, #29
 8003572:	f7ff feb3 	bl	80032dc <NVIC_SetPriority>
	NVIC_EnableIRQ(TIM3_IRQn);
 8003576:	201d      	movs	r0, #29
 8003578:	f7ff fe96 	bl	80032a8 <NVIC_EnableIRQ>

	//TIM3 clock = 8MHz
	TIM_InitStruct.Prescaler = 7999; 								//1kHz
 800357c:	f641 733f 	movw	r3, #7999	; 0x1f3f
 8003580:	84bb      	strh	r3, [r7, #36]	; 0x24
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003582:	2300      	movs	r3, #0
 8003584:	62bb      	str	r3, [r7, #40]	; 0x28
	TIM_InitStruct.Autoreload = 19;								//20ms
 8003586:	2313      	movs	r3, #19
 8003588:	62fb      	str	r3, [r7, #44]	; 0x2c
	TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800358a:	2300      	movs	r3, #0
 800358c:	633b      	str	r3, [r7, #48]	; 0x30
	LL_TIM_Init(TIM3, &TIM_InitStruct);
 800358e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003592:	4619      	mov	r1, r3
 8003594:	4817      	ldr	r0, [pc, #92]	; (80035f4 <MX_TIM3_Init+0xc0>)
 8003596:	f7fd fb11 	bl	8000bbc <LL_TIM_Init>

	//LL_TIM_DisableARRPreload(TIM3);
	LL_TIM_EnableARRPreload(TIM3);
 800359a:	4816      	ldr	r0, [pc, #88]	; (80035f4 <MX_TIM3_Init+0xc0>)
 800359c:	f7ff ff24 	bl	80033e8 <LL_TIM_EnableARRPreload>
	LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 80035a0:	2100      	movs	r1, #0
 80035a2:	4814      	ldr	r0, [pc, #80]	; (80035f4 <MX_TIM3_Init+0xc0>)
 80035a4:	f7ff ff7e 	bl	80034a4 <LL_TIM_SetClockSource>
	TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_ACTIVE;
 80035a8:	2310      	movs	r3, #16
 80035aa:	607b      	str	r3, [r7, #4]
	TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_ENABLE;
 80035ac:	2301      	movs	r3, #1
 80035ae:	60bb      	str	r3, [r7, #8]
	TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80035b0:	2300      	movs	r3, #0
 80035b2:	60fb      	str	r3, [r7, #12]
	TIM_OC_InitStruct.CompareValue = 0;
 80035b4:	2300      	movs	r3, #0
 80035b6:	613b      	str	r3, [r7, #16]
	TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80035b8:	2300      	movs	r3, #0
 80035ba:	617b      	str	r3, [r7, #20]
	LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80035bc:	1d3b      	adds	r3, r7, #4
 80035be:	461a      	mov	r2, r3
 80035c0:	2101      	movs	r1, #1
 80035c2:	480c      	ldr	r0, [pc, #48]	; (80035f4 <MX_TIM3_Init+0xc0>)
 80035c4:	f7fd fb6e 	bl	8000ca4 <LL_TIM_OC_Init>
	LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 80035c8:	2101      	movs	r1, #1
 80035ca:	480a      	ldr	r0, [pc, #40]	; (80035f4 <MX_TIM3_Init+0xc0>)
 80035cc:	f7ff ff1c 	bl	8003408 <LL_TIM_OC_DisableFast>

	LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 80035d0:	2100      	movs	r1, #0
 80035d2:	4808      	ldr	r0, [pc, #32]	; (80035f4 <MX_TIM3_Init+0xc0>)
 80035d4:	f7ff ff7b 	bl	80034ce <LL_TIM_SetTriggerOutput>
	LL_TIM_DisableMasterSlaveMode(TIM3);
 80035d8:	4806      	ldr	r0, [pc, #24]	; (80035f4 <MX_TIM3_Init+0xc0>)
 80035da:	f7ff ff8b 	bl	80034f4 <LL_TIM_DisableMasterSlaveMode>

	LL_TIM_EnableIT_UPDATE(TIM3);
 80035de:	4805      	ldr	r0, [pc, #20]	; (80035f4 <MX_TIM3_Init+0xc0>)
 80035e0:	f7ff ff98 	bl	8003514 <LL_TIM_EnableIT_UPDATE>
	LL_TIM_EnableCounter(TIM3);
 80035e4:	4803      	ldr	r0, [pc, #12]	; (80035f4 <MX_TIM3_Init+0xc0>)
 80035e6:	f7ff feef 	bl	80033c8 <LL_TIM_EnableCounter>
}
 80035ea:	bf00      	nop
 80035ec:	3738      	adds	r7, #56	; 0x38
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	40000400 	.word	0x40000400

080035f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80035f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003630 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80035fc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80035fe:	e003      	b.n	8003608 <LoopCopyDataInit>

08003600 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003600:	4b0c      	ldr	r3, [pc, #48]	; (8003634 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003602:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003604:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003606:	3104      	adds	r1, #4

08003608 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003608:	480b      	ldr	r0, [pc, #44]	; (8003638 <LoopForever+0xa>)
	ldr	r3, =_edata
 800360a:	4b0c      	ldr	r3, [pc, #48]	; (800363c <LoopForever+0xe>)
	adds	r2, r0, r1
 800360c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800360e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003610:	d3f6      	bcc.n	8003600 <CopyDataInit>
	ldr	r2, =_sbss
 8003612:	4a0b      	ldr	r2, [pc, #44]	; (8003640 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003614:	e002      	b.n	800361c <LoopFillZerobss>

08003616 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003616:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003618:	f842 3b04 	str.w	r3, [r2], #4

0800361c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800361c:	4b09      	ldr	r3, [pc, #36]	; (8003644 <LoopForever+0x16>)
	cmp	r2, r3
 800361e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003620:	d3f9      	bcc.n	8003616 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003622:	f7ff fde9 	bl	80031f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003626:	f000 f873 	bl	8003710 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800362a:	f7ff fc95 	bl	8002f58 <main>

0800362e <LoopForever>:

LoopForever:
    b LoopForever
 800362e:	e7fe      	b.n	800362e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003630:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8003634:	080037a0 	.word	0x080037a0
	ldr	r0, =_sdata
 8003638:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800363c:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 8003640:	20000018 	.word	0x20000018
	ldr	r3, = _ebss
 8003644:	20000074 	.word	0x20000074

08003648 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003648:	e7fe      	b.n	8003648 <ADC1_2_IRQHandler>
	...

0800364c <lsm6ds0_read_byte>:
#include "lsm6ds0.h"

uint8_t addres = LSM6DS0_DEVICE_ADDRESS_0;

uint8_t lsm6ds0_read_byte(uint8_t reg_addr)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af02      	add	r7, sp, #8
 8003652:	4603      	mov	r3, r0
 8003654:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8003656:	2300      	movs	r3, #0
 8003658:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, addres, 0));
 800365a:	4b08      	ldr	r3, [pc, #32]	; (800367c <lsm6ds0_read_byte+0x30>)
 800365c:	7819      	ldrb	r1, [r3, #0]
 800365e:	79fa      	ldrb	r2, [r7, #7]
 8003660:	f107 000f 	add.w	r0, r7, #15
 8003664:	2300      	movs	r3, #0
 8003666:	9300      	str	r3, [sp, #0]
 8003668:	460b      	mov	r3, r1
 800366a:	2101      	movs	r1, #1
 800366c:	f7ff fa88 	bl	8002b80 <i2c_master_read>
 8003670:	4603      	mov	r3, r0
 8003672:	781b      	ldrb	r3, [r3, #0]
}
 8003674:	4618      	mov	r0, r3
 8003676:	3710      	adds	r7, #16
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	20000010 	.word	0x20000010

08003680 <lsm6ds0_write_byte>:


void lsm6ds0_write_byte(uint8_t reg_addr, uint8_t value)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	4603      	mov	r3, r0
 8003688:	460a      	mov	r2, r1
 800368a:	71fb      	strb	r3, [r7, #7]
 800368c:	4613      	mov	r3, r2
 800368e:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, addres, 0);
 8003690:	4b05      	ldr	r3, [pc, #20]	; (80036a8 <lsm6ds0_write_byte+0x28>)
 8003692:	781a      	ldrb	r2, [r3, #0]
 8003694:	79f9      	ldrb	r1, [r7, #7]
 8003696:	79b8      	ldrb	r0, [r7, #6]
 8003698:	2300      	movs	r3, #0
 800369a:	f7ff fa2d 	bl	8002af8 <i2c_master_write>
}
 800369e:	bf00      	nop
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	20000010 	.word	0x20000010

080036ac <lsm6ds0_init>:
	*z = (zz >> 4) / 1000.0f;
}


uint8_t lsm6ds0_init(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 80036b2:	2301      	movs	r3, #1
 80036b4:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 80036b6:	2064      	movs	r0, #100	; 0x64
 80036b8:	f7fd fe22 	bl	8001300 <LL_mDelay>

	uint8_t val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);
 80036bc:	200f      	movs	r0, #15
 80036be:	f7ff ffc5 	bl	800364c <lsm6ds0_read_byte>
 80036c2:	4603      	mov	r3, r0
 80036c4:	71bb      	strb	r3, [r7, #6]

	if(val == LSM6DS0_WHO_AM_I_VALUE)
 80036c6:	79bb      	ldrb	r3, [r7, #6]
 80036c8:	2b68      	cmp	r3, #104	; 0x68
 80036ca:	d102      	bne.n	80036d2 <lsm6ds0_init+0x26>
	{
		status = 1;
 80036cc:	2301      	movs	r3, #1
 80036ce:	71fb      	strb	r3, [r7, #7]
 80036d0:	e00f      	b.n	80036f2 <lsm6ds0_init+0x46>
	}
	else			//if the device is not found on one address, try another one
	{
		addres = LSM6DS0_DEVICE_ADDRESS_1;
 80036d2:	4b0e      	ldr	r3, [pc, #56]	; (800370c <lsm6ds0_init+0x60>)
 80036d4:	22d6      	movs	r2, #214	; 0xd6
 80036d6:	701a      	strb	r2, [r3, #0]
		val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);
 80036d8:	200f      	movs	r0, #15
 80036da:	f7ff ffb7 	bl	800364c <lsm6ds0_read_byte>
 80036de:	4603      	mov	r3, r0
 80036e0:	71bb      	strb	r3, [r7, #6]
		if(val == LSM6DS0_WHO_AM_I_VALUE)
 80036e2:	79bb      	ldrb	r3, [r7, #6]
 80036e4:	2b68      	cmp	r3, #104	; 0x68
 80036e6:	d102      	bne.n	80036ee <lsm6ds0_init+0x42>
		{
			status = 1;
 80036e8:	2301      	movs	r3, #1
 80036ea:	71fb      	strb	r3, [r7, #7]
 80036ec:	e001      	b.n	80036f2 <lsm6ds0_init+0x46>
		}
		else
		{
			status = 0;
 80036ee:	2300      	movs	r3, #0
 80036f0:	71fb      	strb	r3, [r7, #7]
		}
	}

	//acc device init

	uint8_t ctrl1 = 8 << 4; // +-2g res
 80036f2:	2380      	movs	r3, #128	; 0x80
 80036f4:	717b      	strb	r3, [r7, #5]
	lsm6ds0_write_byte(LSM6DS0_ADDRESS_CTRL1, ctrl1);
 80036f6:	797b      	ldrb	r3, [r7, #5]
 80036f8:	4619      	mov	r1, r3
 80036fa:	2010      	movs	r0, #16
 80036fc:	f7ff ffc0 	bl	8003680 <lsm6ds0_write_byte>

	return status;
 8003700:	79fb      	ldrb	r3, [r7, #7]
}
 8003702:	4618      	mov	r0, r3
 8003704:	3708      	adds	r7, #8
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	20000010 	.word	0x20000010

08003710 <__libc_init_array>:
 8003710:	b570      	push	{r4, r5, r6, lr}
 8003712:	4e0d      	ldr	r6, [pc, #52]	; (8003748 <__libc_init_array+0x38>)
 8003714:	4c0d      	ldr	r4, [pc, #52]	; (800374c <__libc_init_array+0x3c>)
 8003716:	1ba4      	subs	r4, r4, r6
 8003718:	10a4      	asrs	r4, r4, #2
 800371a:	2500      	movs	r5, #0
 800371c:	42a5      	cmp	r5, r4
 800371e:	d109      	bne.n	8003734 <__libc_init_array+0x24>
 8003720:	4e0b      	ldr	r6, [pc, #44]	; (8003750 <__libc_init_array+0x40>)
 8003722:	4c0c      	ldr	r4, [pc, #48]	; (8003754 <__libc_init_array+0x44>)
 8003724:	f000 f820 	bl	8003768 <_init>
 8003728:	1ba4      	subs	r4, r4, r6
 800372a:	10a4      	asrs	r4, r4, #2
 800372c:	2500      	movs	r5, #0
 800372e:	42a5      	cmp	r5, r4
 8003730:	d105      	bne.n	800373e <__libc_init_array+0x2e>
 8003732:	bd70      	pop	{r4, r5, r6, pc}
 8003734:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003738:	4798      	blx	r3
 800373a:	3501      	adds	r5, #1
 800373c:	e7ee      	b.n	800371c <__libc_init_array+0xc>
 800373e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003742:	4798      	blx	r3
 8003744:	3501      	adds	r5, #1
 8003746:	e7f2      	b.n	800372e <__libc_init_array+0x1e>
 8003748:	08003798 	.word	0x08003798
 800374c:	08003798 	.word	0x08003798
 8003750:	08003798 	.word	0x08003798
 8003754:	0800379c 	.word	0x0800379c

08003758 <memset>:
 8003758:	4402      	add	r2, r0
 800375a:	4603      	mov	r3, r0
 800375c:	4293      	cmp	r3, r2
 800375e:	d100      	bne.n	8003762 <memset+0xa>
 8003760:	4770      	bx	lr
 8003762:	f803 1b01 	strb.w	r1, [r3], #1
 8003766:	e7f9      	b.n	800375c <memset+0x4>

08003768 <_init>:
 8003768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800376a:	bf00      	nop
 800376c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800376e:	bc08      	pop	{r3}
 8003770:	469e      	mov	lr, r3
 8003772:	4770      	bx	lr

08003774 <_fini>:
 8003774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003776:	bf00      	nop
 8003778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800377a:	bc08      	pop	{r3}
 800377c:	469e      	mov	lr, r3
 800377e:	4770      	bx	lr
