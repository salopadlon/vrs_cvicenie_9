
i2c_comm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036d8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003860  08003860  00013860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003878  08003878  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08003878  08003878  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003878  08003878  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003878  08003878  00013878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800387c  0800387c  0001387c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003880  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000018  08003894  00020018  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08003894  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007644  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000181f  00000000  00000000  00027688  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000938  00000000  00000000  00028ea8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000860  00000000  00000000  000297e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004776  00000000  00000000  0002a040  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005fea  00000000  00000000  0002e7b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00078ff5  00000000  00000000  000347a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ad795  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002464  00000000  00000000  000ad810  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003848 	.word	0x08003848

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08003848 	.word	0x08003848

080001c8 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80001d0:	4b05      	ldr	r3, [pc, #20]	; (80001e8 <LL_EXTI_EnableIT_0_31+0x20>)
 80001d2:	681a      	ldr	r2, [r3, #0]
 80001d4:	4904      	ldr	r1, [pc, #16]	; (80001e8 <LL_EXTI_EnableIT_0_31+0x20>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	4313      	orrs	r3, r2
 80001da:	600b      	str	r3, [r1, #0]
}
 80001dc:	bf00      	nop
 80001de:	370c      	adds	r7, #12
 80001e0:	46bd      	mov	sp, r7
 80001e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e6:	4770      	bx	lr
 80001e8:	40010400 	.word	0x40010400

080001ec <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80001f4:	4b05      	ldr	r3, [pc, #20]	; (800020c <LL_EXTI_EnableIT_32_63+0x20>)
 80001f6:	6a1a      	ldr	r2, [r3, #32]
 80001f8:	4904      	ldr	r1, [pc, #16]	; (800020c <LL_EXTI_EnableIT_32_63+0x20>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4313      	orrs	r3, r2
 80001fe:	620b      	str	r3, [r1, #32]
}
 8000200:	bf00      	nop
 8000202:	370c      	adds	r7, #12
 8000204:	46bd      	mov	sp, r7
 8000206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020a:	4770      	bx	lr
 800020c:	40010400 	.word	0x40010400

08000210 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8000218:	4b06      	ldr	r3, [pc, #24]	; (8000234 <LL_EXTI_DisableIT_0_31+0x24>)
 800021a:	681a      	ldr	r2, [r3, #0]
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	43db      	mvns	r3, r3
 8000220:	4904      	ldr	r1, [pc, #16]	; (8000234 <LL_EXTI_DisableIT_0_31+0x24>)
 8000222:	4013      	ands	r3, r2
 8000224:	600b      	str	r3, [r1, #0]
}
 8000226:	bf00      	nop
 8000228:	370c      	adds	r7, #12
 800022a:	46bd      	mov	sp, r7
 800022c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000230:	4770      	bx	lr
 8000232:	bf00      	nop
 8000234:	40010400 	.word	0x40010400

08000238 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8000240:	4b06      	ldr	r3, [pc, #24]	; (800025c <LL_EXTI_DisableIT_32_63+0x24>)
 8000242:	6a1a      	ldr	r2, [r3, #32]
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	43db      	mvns	r3, r3
 8000248:	4904      	ldr	r1, [pc, #16]	; (800025c <LL_EXTI_DisableIT_32_63+0x24>)
 800024a:	4013      	ands	r3, r2
 800024c:	620b      	str	r3, [r1, #32]
}
 800024e:	bf00      	nop
 8000250:	370c      	adds	r7, #12
 8000252:	46bd      	mov	sp, r7
 8000254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000258:	4770      	bx	lr
 800025a:	bf00      	nop
 800025c:	40010400 	.word	0x40010400

08000260 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8000260:	b480      	push	{r7}
 8000262:	b083      	sub	sp, #12
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8000268:	4b05      	ldr	r3, [pc, #20]	; (8000280 <LL_EXTI_EnableEvent_0_31+0x20>)
 800026a:	685a      	ldr	r2, [r3, #4]
 800026c:	4904      	ldr	r1, [pc, #16]	; (8000280 <LL_EXTI_EnableEvent_0_31+0x20>)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	4313      	orrs	r3, r2
 8000272:	604b      	str	r3, [r1, #4]

}
 8000274:	bf00      	nop
 8000276:	370c      	adds	r7, #12
 8000278:	46bd      	mov	sp, r7
 800027a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027e:	4770      	bx	lr
 8000280:	40010400 	.word	0x40010400

08000284 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800028c:	4b05      	ldr	r3, [pc, #20]	; (80002a4 <LL_EXTI_EnableEvent_32_63+0x20>)
 800028e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000290:	4904      	ldr	r1, [pc, #16]	; (80002a4 <LL_EXTI_EnableEvent_32_63+0x20>)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	4313      	orrs	r3, r2
 8000296:	624b      	str	r3, [r1, #36]	; 0x24
}
 8000298:	bf00      	nop
 800029a:	370c      	adds	r7, #12
 800029c:	46bd      	mov	sp, r7
 800029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a2:	4770      	bx	lr
 80002a4:	40010400 	.word	0x40010400

080002a8 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80002b0:	4b06      	ldr	r3, [pc, #24]	; (80002cc <LL_EXTI_DisableEvent_0_31+0x24>)
 80002b2:	685a      	ldr	r2, [r3, #4]
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	43db      	mvns	r3, r3
 80002b8:	4904      	ldr	r1, [pc, #16]	; (80002cc <LL_EXTI_DisableEvent_0_31+0x24>)
 80002ba:	4013      	ands	r3, r2
 80002bc:	604b      	str	r3, [r1, #4]
}
 80002be:	bf00      	nop
 80002c0:	370c      	adds	r7, #12
 80002c2:	46bd      	mov	sp, r7
 80002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	40010400 	.word	0x40010400

080002d0 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80002d8:	4b06      	ldr	r3, [pc, #24]	; (80002f4 <LL_EXTI_DisableEvent_32_63+0x24>)
 80002da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	43db      	mvns	r3, r3
 80002e0:	4904      	ldr	r1, [pc, #16]	; (80002f4 <LL_EXTI_DisableEvent_32_63+0x24>)
 80002e2:	4013      	ands	r3, r2
 80002e4:	624b      	str	r3, [r1, #36]	; 0x24
}
 80002e6:	bf00      	nop
 80002e8:	370c      	adds	r7, #12
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	40010400 	.word	0x40010400

080002f8 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8000300:	4b05      	ldr	r3, [pc, #20]	; (8000318 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000302:	689a      	ldr	r2, [r3, #8]
 8000304:	4904      	ldr	r1, [pc, #16]	; (8000318 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	4313      	orrs	r3, r2
 800030a:	608b      	str	r3, [r1, #8]

}
 800030c:	bf00      	nop
 800030e:	370c      	adds	r7, #12
 8000310:	46bd      	mov	sp, r7
 8000312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000316:	4770      	bx	lr
 8000318:	40010400 	.word	0x40010400

0800031c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800031c:	b480      	push	{r7}
 800031e:	b083      	sub	sp, #12
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8000324:	4b05      	ldr	r3, [pc, #20]	; (800033c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8000326:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000328:	4904      	ldr	r1, [pc, #16]	; (800033c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	4313      	orrs	r3, r2
 800032e:	628b      	str	r3, [r1, #40]	; 0x28
}
 8000330:	bf00      	nop
 8000332:	370c      	adds	r7, #12
 8000334:	46bd      	mov	sp, r7
 8000336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033a:	4770      	bx	lr
 800033c:	40010400 	.word	0x40010400

08000340 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000340:	b480      	push	{r7}
 8000342:	b083      	sub	sp, #12
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8000348:	4b06      	ldr	r3, [pc, #24]	; (8000364 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800034a:	689a      	ldr	r2, [r3, #8]
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	43db      	mvns	r3, r3
 8000350:	4904      	ldr	r1, [pc, #16]	; (8000364 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8000352:	4013      	ands	r3, r2
 8000354:	608b      	str	r3, [r1, #8]

}
 8000356:	bf00      	nop
 8000358:	370c      	adds	r7, #12
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	40010400 	.word	0x40010400

08000368 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8000370:	4b06      	ldr	r3, [pc, #24]	; (800038c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8000372:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	43db      	mvns	r3, r3
 8000378:	4904      	ldr	r1, [pc, #16]	; (800038c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800037a:	4013      	ands	r3, r2
 800037c:	628b      	str	r3, [r1, #40]	; 0x28
}
 800037e:	bf00      	nop
 8000380:	370c      	adds	r7, #12
 8000382:	46bd      	mov	sp, r7
 8000384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop
 800038c:	40010400 	.word	0x40010400

08000390 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8000398:	4b05      	ldr	r3, [pc, #20]	; (80003b0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800039a:	68da      	ldr	r2, [r3, #12]
 800039c:	4904      	ldr	r1, [pc, #16]	; (80003b0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	4313      	orrs	r3, r2
 80003a2:	60cb      	str	r3, [r1, #12]
}
 80003a4:	bf00      	nop
 80003a6:	370c      	adds	r7, #12
 80003a8:	46bd      	mov	sp, r7
 80003aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ae:	4770      	bx	lr
 80003b0:	40010400 	.word	0x40010400

080003b4 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 80003b4:	b480      	push	{r7}
 80003b6:	b083      	sub	sp, #12
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80003bc:	4b05      	ldr	r3, [pc, #20]	; (80003d4 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80003be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80003c0:	4904      	ldr	r1, [pc, #16]	; (80003d4 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	4313      	orrs	r3, r2
 80003c6:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80003c8:	bf00      	nop
 80003ca:	370c      	adds	r7, #12
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	40010400 	.word	0x40010400

080003d8 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80003d8:	b480      	push	{r7}
 80003da:	b083      	sub	sp, #12
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80003e0:	4b06      	ldr	r3, [pc, #24]	; (80003fc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80003e2:	68da      	ldr	r2, [r3, #12]
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	43db      	mvns	r3, r3
 80003e8:	4904      	ldr	r1, [pc, #16]	; (80003fc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80003ea:	4013      	ands	r3, r2
 80003ec:	60cb      	str	r3, [r1, #12]
}
 80003ee:	bf00      	nop
 80003f0:	370c      	adds	r7, #12
 80003f2:	46bd      	mov	sp, r7
 80003f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f8:	4770      	bx	lr
 80003fa:	bf00      	nop
 80003fc:	40010400 	.word	0x40010400

08000400 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8000408:	4b06      	ldr	r3, [pc, #24]	; (8000424 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800040a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	43db      	mvns	r3, r3
 8000410:	4904      	ldr	r1, [pc, #16]	; (8000424 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8000412:	4013      	ands	r3, r2
 8000414:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8000416:	bf00      	nop
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	40010400 	.word	0x40010400

08000428 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b084      	sub	sp, #16
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8000430:	2300      	movs	r3, #0
 8000432:	73fb      	strb	r3, [r7, #15]
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	7a1b      	ldrb	r3, [r3, #8]
 8000438:	2b00      	cmp	r3, #0
 800043a:	f000 80c2 	beq.w	80005c2 <LL_EXTI_Init+0x19a>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	2b00      	cmp	r3, #0
 8000444:	d05b      	beq.n	80004fe <LL_EXTI_Init+0xd6>
    {
      switch (EXTI_InitStruct->Mode)
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	7a5b      	ldrb	r3, [r3, #9]
 800044a:	2b01      	cmp	r3, #1
 800044c:	d00e      	beq.n	800046c <LL_EXTI_Init+0x44>
 800044e:	2b02      	cmp	r3, #2
 8000450:	d017      	beq.n	8000482 <LL_EXTI_Init+0x5a>
 8000452:	2b00      	cmp	r3, #0
 8000454:	d120      	bne.n	8000498 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4618      	mov	r0, r3
 800045c:	f7ff ff24 	bl	80002a8 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4618      	mov	r0, r3
 8000466:	f7ff feaf 	bl	80001c8 <LL_EXTI_EnableIT_0_31>
          break;
 800046a:	e018      	b.n	800049e <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4618      	mov	r0, r3
 8000472:	f7ff fecd 	bl	8000210 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4618      	mov	r0, r3
 800047c:	f7ff fef0 	bl	8000260 <LL_EXTI_EnableEvent_0_31>
          break;
 8000480:	e00d      	b.n	800049e <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4618      	mov	r0, r3
 8000488:	f7ff fe9e 	bl	80001c8 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4618      	mov	r0, r3
 8000492:	f7ff fee5 	bl	8000260 <LL_EXTI_EnableEvent_0_31>
          break;
 8000496:	e002      	b.n	800049e <LL_EXTI_Init+0x76>
        default:
          status = ERROR;
 8000498:	2301      	movs	r3, #1
 800049a:	73fb      	strb	r3, [r7, #15]
          break;
 800049c:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	7a9b      	ldrb	r3, [r3, #10]
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d02b      	beq.n	80004fe <LL_EXTI_Init+0xd6>
      {
        switch (EXTI_InitStruct->Trigger)
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	7a9b      	ldrb	r3, [r3, #10]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d00e      	beq.n	80004cc <LL_EXTI_Init+0xa4>
 80004ae:	2b03      	cmp	r3, #3
 80004b0:	d017      	beq.n	80004e2 <LL_EXTI_Init+0xba>
 80004b2:	2b01      	cmp	r3, #1
 80004b4:	d120      	bne.n	80004f8 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	4618      	mov	r0, r3
 80004bc:	f7ff ff8c 	bl	80003d8 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4618      	mov	r0, r3
 80004c6:	f7ff ff17 	bl	80002f8 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80004ca:	e019      	b.n	8000500 <LL_EXTI_Init+0xd8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4618      	mov	r0, r3
 80004d2:	f7ff ff35 	bl	8000340 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	4618      	mov	r0, r3
 80004dc:	f7ff ff58 	bl	8000390 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80004e0:	e00e      	b.n	8000500 <LL_EXTI_Init+0xd8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4618      	mov	r0, r3
 80004e8:	f7ff ff06 	bl	80002f8 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4618      	mov	r0, r3
 80004f2:	f7ff ff4d 	bl	8000390 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80004f6:	e003      	b.n	8000500 <LL_EXTI_Init+0xd8>
          default:
            status = ERROR;
 80004f8:	2301      	movs	r3, #1
 80004fa:	73fb      	strb	r3, [r7, #15]
            break;
 80004fc:	e000      	b.n	8000500 <LL_EXTI_Init+0xd8>
        }
      }
 80004fe:	bf00      	nop
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	685b      	ldr	r3, [r3, #4]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d071      	beq.n	80005ec <LL_EXTI_Init+0x1c4>
    {
      switch (EXTI_InitStruct->Mode)
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	7a5b      	ldrb	r3, [r3, #9]
 800050c:	2b01      	cmp	r3, #1
 800050e:	d00e      	beq.n	800052e <LL_EXTI_Init+0x106>
 8000510:	2b02      	cmp	r3, #2
 8000512:	d017      	beq.n	8000544 <LL_EXTI_Init+0x11c>
 8000514:	2b00      	cmp	r3, #0
 8000516:	d120      	bne.n	800055a <LL_EXTI_Init+0x132>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	685b      	ldr	r3, [r3, #4]
 800051c:	4618      	mov	r0, r3
 800051e:	f7ff fed7 	bl	80002d0 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	685b      	ldr	r3, [r3, #4]
 8000526:	4618      	mov	r0, r3
 8000528:	f7ff fe60 	bl	80001ec <LL_EXTI_EnableIT_32_63>
          break;
 800052c:	e018      	b.n	8000560 <LL_EXTI_Init+0x138>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	685b      	ldr	r3, [r3, #4]
 8000532:	4618      	mov	r0, r3
 8000534:	f7ff fe80 	bl	8000238 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	685b      	ldr	r3, [r3, #4]
 800053c:	4618      	mov	r0, r3
 800053e:	f7ff fea1 	bl	8000284 <LL_EXTI_EnableEvent_32_63>
          break;
 8000542:	e00d      	b.n	8000560 <LL_EXTI_Init+0x138>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	685b      	ldr	r3, [r3, #4]
 8000548:	4618      	mov	r0, r3
 800054a:	f7ff fe4f 	bl	80001ec <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	685b      	ldr	r3, [r3, #4]
 8000552:	4618      	mov	r0, r3
 8000554:	f7ff fe96 	bl	8000284 <LL_EXTI_EnableEvent_32_63>
          break;
 8000558:	e002      	b.n	8000560 <LL_EXTI_Init+0x138>
        default:
          status = ERROR;
 800055a:	2301      	movs	r3, #1
 800055c:	73fb      	strb	r3, [r7, #15]
          break;
 800055e:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	7a9b      	ldrb	r3, [r3, #10]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d041      	beq.n	80005ec <LL_EXTI_Init+0x1c4>
      {
        switch (EXTI_InitStruct->Trigger)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	7a9b      	ldrb	r3, [r3, #10]
 800056c:	2b02      	cmp	r3, #2
 800056e:	d00e      	beq.n	800058e <LL_EXTI_Init+0x166>
 8000570:	2b03      	cmp	r3, #3
 8000572:	d017      	beq.n	80005a4 <LL_EXTI_Init+0x17c>
 8000574:	2b01      	cmp	r3, #1
 8000576:	d120      	bne.n	80005ba <LL_EXTI_Init+0x192>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	685b      	ldr	r3, [r3, #4]
 800057c:	4618      	mov	r0, r3
 800057e:	f7ff ff3f 	bl	8000400 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	685b      	ldr	r3, [r3, #4]
 8000586:	4618      	mov	r0, r3
 8000588:	f7ff fec8 	bl	800031c <LL_EXTI_EnableRisingTrig_32_63>
            break;
 800058c:	e02f      	b.n	80005ee <LL_EXTI_Init+0x1c6>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	685b      	ldr	r3, [r3, #4]
 8000592:	4618      	mov	r0, r3
 8000594:	f7ff fee8 	bl	8000368 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	4618      	mov	r0, r3
 800059e:	f7ff ff09 	bl	80003b4 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80005a2:	e024      	b.n	80005ee <LL_EXTI_Init+0x1c6>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	685b      	ldr	r3, [r3, #4]
 80005a8:	4618      	mov	r0, r3
 80005aa:	f7ff feb7 	bl	800031c <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	685b      	ldr	r3, [r3, #4]
 80005b2:	4618      	mov	r0, r3
 80005b4:	f7ff fefe 	bl	80003b4 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80005b8:	e019      	b.n	80005ee <LL_EXTI_Init+0x1c6>
          default:
            status = ERROR;
 80005ba:	2301      	movs	r3, #1
 80005bc:	73fb      	strb	r3, [r7, #15]
            break;
 80005be:	bf00      	nop
 80005c0:	e015      	b.n	80005ee <LL_EXTI_Init+0x1c6>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4618      	mov	r0, r3
 80005c8:	f7ff fe22 	bl	8000210 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4618      	mov	r0, r3
 80005d2:	f7ff fe69 	bl	80002a8 <LL_EXTI_DisableEvent_0_31>
#if defined(EXTI_32_63_SUPPORT)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	685b      	ldr	r3, [r3, #4]
 80005da:	4618      	mov	r0, r3
 80005dc:	f7ff fe2c 	bl	8000238 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	685b      	ldr	r3, [r3, #4]
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff fe73 	bl	80002d0 <LL_EXTI_DisableEvent_32_63>
 80005ea:	e000      	b.n	80005ee <LL_EXTI_Init+0x1c6>
      }
 80005ec:	bf00      	nop
#endif
  }
  return status;
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3710      	adds	r7, #16
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b089      	sub	sp, #36	; 0x24
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	60f8      	str	r0, [r7, #12]
 8000600:	60b9      	str	r1, [r7, #8]
 8000602:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	681a      	ldr	r2, [r3, #0]
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800060c:	697b      	ldr	r3, [r7, #20]
 800060e:	fa93 f3a3 	rbit	r3, r3
 8000612:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000614:	693b      	ldr	r3, [r7, #16]
 8000616:	fab3 f383 	clz	r3, r3
 800061a:	005b      	lsls	r3, r3, #1
 800061c:	2103      	movs	r1, #3
 800061e:	fa01 f303 	lsl.w	r3, r1, r3
 8000622:	43db      	mvns	r3, r3
 8000624:	401a      	ands	r2, r3
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800062a:	69fb      	ldr	r3, [r7, #28]
 800062c:	fa93 f3a3 	rbit	r3, r3
 8000630:	61bb      	str	r3, [r7, #24]
  return(result);
 8000632:	69bb      	ldr	r3, [r7, #24]
 8000634:	fab3 f383 	clz	r3, r3
 8000638:	005b      	lsls	r3, r3, #1
 800063a:	6879      	ldr	r1, [r7, #4]
 800063c:	fa01 f303 	lsl.w	r3, r1, r3
 8000640:	431a      	orrs	r2, r3
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	601a      	str	r2, [r3, #0]
}
 8000646:	bf00      	nop
 8000648:	3724      	adds	r7, #36	; 0x24
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr

08000652 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000652:	b480      	push	{r7}
 8000654:	b085      	sub	sp, #20
 8000656:	af00      	add	r7, sp, #0
 8000658:	60f8      	str	r0, [r7, #12]
 800065a:	60b9      	str	r1, [r7, #8]
 800065c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	685a      	ldr	r2, [r3, #4]
 8000662:	68bb      	ldr	r3, [r7, #8]
 8000664:	43db      	mvns	r3, r3
 8000666:	401a      	ands	r2, r3
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	6879      	ldr	r1, [r7, #4]
 800066c:	fb01 f303 	mul.w	r3, r1, r3
 8000670:	431a      	orrs	r2, r3
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	605a      	str	r2, [r3, #4]
}
 8000676:	bf00      	nop
 8000678:	3714      	adds	r7, #20
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr

08000682 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000682:	b480      	push	{r7}
 8000684:	b089      	sub	sp, #36	; 0x24
 8000686:	af00      	add	r7, sp, #0
 8000688:	60f8      	str	r0, [r7, #12]
 800068a:	60b9      	str	r1, [r7, #8]
 800068c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	689a      	ldr	r2, [r3, #8]
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000696:	697b      	ldr	r3, [r7, #20]
 8000698:	fa93 f3a3 	rbit	r3, r3
 800069c:	613b      	str	r3, [r7, #16]
  return(result);
 800069e:	693b      	ldr	r3, [r7, #16]
 80006a0:	fab3 f383 	clz	r3, r3
 80006a4:	005b      	lsls	r3, r3, #1
 80006a6:	2103      	movs	r1, #3
 80006a8:	fa01 f303 	lsl.w	r3, r1, r3
 80006ac:	43db      	mvns	r3, r3
 80006ae:	401a      	ands	r2, r3
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006b4:	69fb      	ldr	r3, [r7, #28]
 80006b6:	fa93 f3a3 	rbit	r3, r3
 80006ba:	61bb      	str	r3, [r7, #24]
  return(result);
 80006bc:	69bb      	ldr	r3, [r7, #24]
 80006be:	fab3 f383 	clz	r3, r3
 80006c2:	005b      	lsls	r3, r3, #1
 80006c4:	6879      	ldr	r1, [r7, #4]
 80006c6:	fa01 f303 	lsl.w	r3, r1, r3
 80006ca:	431a      	orrs	r2, r3
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80006d0:	bf00      	nop
 80006d2:	3724      	adds	r7, #36	; 0x24
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr

080006dc <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80006dc:	b480      	push	{r7}
 80006de:	b089      	sub	sp, #36	; 0x24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	68da      	ldr	r2, [r3, #12]
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	fa93 f3a3 	rbit	r3, r3
 80006f6:	613b      	str	r3, [r7, #16]
  return(result);
 80006f8:	693b      	ldr	r3, [r7, #16]
 80006fa:	fab3 f383 	clz	r3, r3
 80006fe:	005b      	lsls	r3, r3, #1
 8000700:	2103      	movs	r1, #3
 8000702:	fa01 f303 	lsl.w	r3, r1, r3
 8000706:	43db      	mvns	r3, r3
 8000708:	401a      	ands	r2, r3
 800070a:	68bb      	ldr	r3, [r7, #8]
 800070c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	fa93 f3a3 	rbit	r3, r3
 8000714:	61bb      	str	r3, [r7, #24]
  return(result);
 8000716:	69bb      	ldr	r3, [r7, #24]
 8000718:	fab3 f383 	clz	r3, r3
 800071c:	005b      	lsls	r3, r3, #1
 800071e:	6879      	ldr	r1, [r7, #4]
 8000720:	fa01 f303 	lsl.w	r3, r1, r3
 8000724:	431a      	orrs	r2, r3
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	60da      	str	r2, [r3, #12]
}
 800072a:	bf00      	nop
 800072c:	3724      	adds	r7, #36	; 0x24
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr

08000736 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000736:	b480      	push	{r7}
 8000738:	b089      	sub	sp, #36	; 0x24
 800073a:	af00      	add	r7, sp, #0
 800073c:	60f8      	str	r0, [r7, #12]
 800073e:	60b9      	str	r1, [r7, #8]
 8000740:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	6a1a      	ldr	r2, [r3, #32]
 8000746:	68bb      	ldr	r3, [r7, #8]
 8000748:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800074a:	697b      	ldr	r3, [r7, #20]
 800074c:	fa93 f3a3 	rbit	r3, r3
 8000750:	613b      	str	r3, [r7, #16]
  return(result);
 8000752:	693b      	ldr	r3, [r7, #16]
 8000754:	fab3 f383 	clz	r3, r3
 8000758:	009b      	lsls	r3, r3, #2
 800075a:	210f      	movs	r1, #15
 800075c:	fa01 f303 	lsl.w	r3, r1, r3
 8000760:	43db      	mvns	r3, r3
 8000762:	401a      	ands	r2, r3
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000768:	69fb      	ldr	r3, [r7, #28]
 800076a:	fa93 f3a3 	rbit	r3, r3
 800076e:	61bb      	str	r3, [r7, #24]
  return(result);
 8000770:	69bb      	ldr	r3, [r7, #24]
 8000772:	fab3 f383 	clz	r3, r3
 8000776:	009b      	lsls	r3, r3, #2
 8000778:	6879      	ldr	r1, [r7, #4]
 800077a:	fa01 f303 	lsl.w	r3, r1, r3
 800077e:	431a      	orrs	r2, r3
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8000784:	bf00      	nop
 8000786:	3724      	adds	r7, #36	; 0x24
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr

08000790 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000790:	b480      	push	{r7}
 8000792:	b089      	sub	sp, #36	; 0x24
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	0a1b      	lsrs	r3, r3, #8
 80007a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007a6:	697b      	ldr	r3, [r7, #20]
 80007a8:	fa93 f3a3 	rbit	r3, r3
 80007ac:	613b      	str	r3, [r7, #16]
  return(result);
 80007ae:	693b      	ldr	r3, [r7, #16]
 80007b0:	fab3 f383 	clz	r3, r3
 80007b4:	009b      	lsls	r3, r3, #2
 80007b6:	210f      	movs	r1, #15
 80007b8:	fa01 f303 	lsl.w	r3, r1, r3
 80007bc:	43db      	mvns	r3, r3
 80007be:	401a      	ands	r2, r3
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	0a1b      	lsrs	r3, r3, #8
 80007c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	fa93 f3a3 	rbit	r3, r3
 80007cc:	61bb      	str	r3, [r7, #24]
  return(result);
 80007ce:	69bb      	ldr	r3, [r7, #24]
 80007d0:	fab3 f383 	clz	r3, r3
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	6879      	ldr	r1, [r7, #4]
 80007d8:	fa01 f303 	lsl.w	r3, r1, r3
 80007dc:	431a      	orrs	r2, r3
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80007e2:	bf00      	nop
 80007e4:	3724      	adds	r7, #36	; 0x24
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr

080007ee <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b088      	sub	sp, #32
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	6078      	str	r0, [r7, #4]
 80007f6:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	fa93 f3a3 	rbit	r3, r3
 800080c:	613b      	str	r3, [r7, #16]
  return(result);
 800080e:	693b      	ldr	r3, [r7, #16]
 8000810:	fab3 f383 	clz	r3, r3
 8000814:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000816:	e048      	b.n	80008aa <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	2101      	movs	r1, #1
 800081e:	69fb      	ldr	r3, [r7, #28]
 8000820:	fa01 f303 	lsl.w	r3, r1, r3
 8000824:	4013      	ands	r3, r2
 8000826:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8000828:	69bb      	ldr	r3, [r7, #24]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d03a      	beq.n	80008a4 <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	461a      	mov	r2, r3
 8000834:	69b9      	ldr	r1, [r7, #24]
 8000836:	6878      	ldr	r0, [r7, #4]
 8000838:	f7ff fede 	bl	80005f8 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d003      	beq.n	800084c <LL_GPIO_Init+0x5e>
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	2b02      	cmp	r3, #2
 800084a:	d106      	bne.n	800085a <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	689b      	ldr	r3, [r3, #8]
 8000850:	461a      	mov	r2, r3
 8000852:	69b9      	ldr	r1, [r7, #24]
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f7ff ff14 	bl	8000682 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	691b      	ldr	r3, [r3, #16]
 800085e:	461a      	mov	r2, r3
 8000860:	69b9      	ldr	r1, [r7, #24]
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f7ff ff3a 	bl	80006dc <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	2b02      	cmp	r3, #2
 800086e:	d119      	bne.n	80008a4 <LL_GPIO_Init+0xb6>
 8000870:	69bb      	ldr	r3, [r7, #24]
 8000872:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	fa93 f3a3 	rbit	r3, r3
 800087a:	60bb      	str	r3, [r7, #8]
  return(result);
 800087c:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800087e:	fab3 f383 	clz	r3, r3
 8000882:	2b07      	cmp	r3, #7
 8000884:	d807      	bhi.n	8000896 <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	695b      	ldr	r3, [r3, #20]
 800088a:	461a      	mov	r2, r3
 800088c:	69b9      	ldr	r1, [r7, #24]
 800088e:	6878      	ldr	r0, [r7, #4]
 8000890:	f7ff ff51 	bl	8000736 <LL_GPIO_SetAFPin_0_7>
 8000894:	e006      	b.n	80008a4 <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	695b      	ldr	r3, [r3, #20]
 800089a:	461a      	mov	r2, r3
 800089c:	69b9      	ldr	r1, [r7, #24]
 800089e:	6878      	ldr	r0, [r7, #4]
 80008a0:	f7ff ff76 	bl	8000790 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 80008a4:	69fb      	ldr	r3, [r7, #28]
 80008a6:	3301      	adds	r3, #1
 80008a8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	fa22 f303 	lsr.w	r3, r2, r3
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d1af      	bne.n	8000818 <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d003      	beq.n	80008c8 <LL_GPIO_Init+0xda>
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	2b02      	cmp	r3, #2
 80008c6:	d107      	bne.n	80008d8 <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	6819      	ldr	r1, [r3, #0]
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	461a      	mov	r2, r3
 80008d2:	6878      	ldr	r0, [r7, #4]
 80008d4:	f7ff febd 	bl	8000652 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 80008d8:	2300      	movs	r3, #0
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3720      	adds	r7, #32
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 80008e2:	b480      	push	{r7}
 80008e4:	b083      	sub	sp, #12
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	f043 0201 	orr.w	r2, r3, #1
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	601a      	str	r2, [r3, #0]
}
 80008f6:	bf00      	nop
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr

08000902 <LL_I2C_Disable>:
  * @rmtoll CR1          PE            LL_I2C_Disable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
 8000902:	b480      	push	{r7}
 8000904:	b083      	sub	sp, #12
 8000906:	af00      	add	r7, sp, #0
 8000908:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	f023 0201 	bic.w	r2, r3, #1
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	601a      	str	r2, [r3, #0]
}
 8000916:	bf00      	nop
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr

08000922 <LL_I2C_ConfigFilters>:
  *         This parameter is used to configure the digital noise filter on SDA and SCL input.
  *         The digital filter will filter spikes with a length of up to DNF[3:0]*ti2cclk.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigFilters(I2C_TypeDef *I2Cx, uint32_t AnalogFilter, uint32_t DigitalFilter)
{
 8000922:	b480      	push	{r7}
 8000924:	b085      	sub	sp, #20
 8000926:	af00      	add	r7, sp, #0
 8000928:	60f8      	str	r0, [r7, #12]
 800092a:	60b9      	str	r1, [r7, #8]
 800092c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	0219      	lsls	r1, r3, #8
 800093a:	68bb      	ldr	r3, [r7, #8]
 800093c:	430b      	orrs	r3, r1
 800093e:	431a      	orrs	r2, r3
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	601a      	str	r2, [r3, #0]
}
 8000944:	bf00      	nop
 8000946:	3714      	adds	r7, #20
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <LL_I2C_SetOwnAddress1>:
  *         @arg @ref LL_I2C_OWNADDRESS1_7BIT
  *         @arg @ref LL_I2C_OWNADDRESS1_10BIT
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress1(I2C_TypeDef *I2Cx, uint32_t OwnAddress1, uint32_t OwnAddrSize)
{
 8000950:	b480      	push	{r7}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
 8000956:	60f8      	str	r0, [r7, #12]
 8000958:	60b9      	str	r1, [r7, #8]
 800095a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	689b      	ldr	r3, [r3, #8]
 8000960:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000964:	f023 0307 	bic.w	r3, r3, #7
 8000968:	68b9      	ldr	r1, [r7, #8]
 800096a:	687a      	ldr	r2, [r7, #4]
 800096c:	430a      	orrs	r2, r1
 800096e:	431a      	orrs	r2, r3
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	609a      	str	r2, [r3, #8]
}
 8000974:	bf00      	nop
 8000976:	3714      	adds	r7, #20
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <LL_I2C_EnableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_EnableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	689b      	ldr	r3, [r3, #8]
 800098c:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	609a      	str	r2, [r3, #8]
}
 8000994:	bf00      	nop
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <LL_I2C_DisableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_DisableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress1(I2C_TypeDef *I2Cx)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	689b      	ldr	r3, [r3, #8]
 80009ac:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	609a      	str	r2, [r3, #8]
}
 80009b4:	bf00      	nop
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <LL_I2C_SetTiming>:
  * @param  Timing This parameter must be a value between Min_Data=0 and Max_Data=0xFFFFFFFF.
  * @note   This parameter is computed with the STM32CubeMX Tool.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTiming(I2C_TypeDef *I2Cx, uint32_t Timing)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	683a      	ldr	r2, [r7, #0]
 80009ce:	611a      	str	r2, [r3, #16]
}
 80009d0:	bf00      	nop
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	431a      	orrs	r2, r3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	601a      	str	r2, [r3, #0]
}
 80009f6:	bf00      	nop
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr

08000a02 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8000a02:	b480      	push	{r7}
 8000a04:	b083      	sub	sp, #12
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
 8000a0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	431a      	orrs	r2, r3
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	605a      	str	r2, [r3, #4]
}
 8000a1c:	bf00      	nop
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f7ff ff65 	bl	8000902 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	6899      	ldr	r1, [r3, #8]
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	461a      	mov	r2, r3
 8000a42:	6878      	ldr	r0, [r7, #4]
 8000a44:	f7ff ff6d 	bl	8000922 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	f7ff ffb6 	bl	80009c0 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8000a54:	6878      	ldr	r0, [r7, #4]
 8000a56:	f7ff ff44 	bl	80008e2 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8000a5a:	6878      	ldr	r0, [r7, #4]
 8000a5c:	f7ff ffa0 	bl	80009a0 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	6919      	ldr	r1, [r3, #16]
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	6878      	ldr	r0, [r7, #4]
 8000a6c:	f7ff ff70 	bl	8000950 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	691b      	ldr	r3, [r3, #16]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d002      	beq.n	8000a7e <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f7ff ff81 	bl	8000980 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4619      	mov	r1, r3
 8000a84:	6878      	ldr	r0, [r7, #4]
 8000a86:	f7ff ffa9 	bl	80009dc <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	695b      	ldr	r3, [r3, #20]
 8000a8e:	4619      	mov	r1, r3
 8000a90:	6878      	ldr	r0, [r7, #4]
 8000a92:	f7ff ffb6 	bl	8000a02 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8000a96:	2300      	movs	r3, #0
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	683a      	ldr	r2, [r7, #0]
 8000aae:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	683a      	ldr	r2, [r7, #0]
 8000aca:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000acc:	bf00      	nop
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	683a      	ldr	r2, [r7, #0]
 8000ae6:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000ae8:	bf00      	nop
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	683a      	ldr	r2, [r7, #0]
 8000b02:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000b04:	bf00      	nop
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	683a      	ldr	r2, [r7, #0]
 8000b1e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000b20:	bf00      	nop
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	683a      	ldr	r2, [r7, #0]
 8000b3a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	683a      	ldr	r2, [r7, #0]
 8000b56:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <LL_TIM_OC_SetCompareCH5>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH5 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH5(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR5, CompareValue);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	683a      	ldr	r2, [r7, #0]
 8000b72:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <LL_TIM_OC_SetCompareCH6>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH6 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH6(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	683a      	ldr	r2, [r7, #0]
 8000b8e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000b90:	bf00      	nop
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	695b      	ldr	r3, [r3, #20]
 8000ba8:	f043 0201 	orr.w	r2, r3, #1
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	615a      	str	r2, [r3, #20]
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4a2f      	ldr	r2, [pc, #188]	; (8000c90 <LL_TIM_Init+0xd4>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d007      	beq.n	8000be8 <LL_TIM_Init+0x2c>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bde:	d003      	beq.n	8000be8 <LL_TIM_Init+0x2c>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4a2c      	ldr	r2, [pc, #176]	; (8000c94 <LL_TIM_Init+0xd8>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d106      	bne.n	8000bf6 <LL_TIM_Init+0x3a>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4a25      	ldr	r2, [pc, #148]	; (8000c90 <LL_TIM_Init+0xd4>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d013      	beq.n	8000c26 <LL_TIM_Init+0x6a>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c04:	d00f      	beq.n	8000c26 <LL_TIM_Init+0x6a>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4a22      	ldr	r2, [pc, #136]	; (8000c94 <LL_TIM_Init+0xd8>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d00b      	beq.n	8000c26 <LL_TIM_Init+0x6a>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4a21      	ldr	r2, [pc, #132]	; (8000c98 <LL_TIM_Init+0xdc>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d007      	beq.n	8000c26 <LL_TIM_Init+0x6a>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4a20      	ldr	r2, [pc, #128]	; (8000c9c <LL_TIM_Init+0xe0>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d003      	beq.n	8000c26 <LL_TIM_Init+0x6a>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4a1f      	ldr	r2, [pc, #124]	; (8000ca0 <LL_TIM_Init+0xe4>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d106      	bne.n	8000c34 <LL_TIM_Init+0x78>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	68fa      	ldr	r2, [r7, #12]
 8000c38:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	4619      	mov	r1, r3
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f7ff ff3b 	bl	8000abc <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	881b      	ldrh	r3, [r3, #0]
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f7ff ff27 	bl	8000aa0 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4a0e      	ldr	r2, [pc, #56]	; (8000c90 <LL_TIM_Init+0xd4>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d00b      	beq.n	8000c72 <LL_TIM_Init+0xb6>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4a0e      	ldr	r2, [pc, #56]	; (8000c98 <LL_TIM_Init+0xdc>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d007      	beq.n	8000c72 <LL_TIM_Init+0xb6>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4a0d      	ldr	r2, [pc, #52]	; (8000c9c <LL_TIM_Init+0xe0>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d003      	beq.n	8000c72 <LL_TIM_Init+0xb6>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4a0c      	ldr	r2, [pc, #48]	; (8000ca0 <LL_TIM_Init+0xe4>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d105      	bne.n	8000c7e <LL_TIM_Init+0xc2>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	7c1b      	ldrb	r3, [r3, #16]
 8000c76:	4619      	mov	r1, r3
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f7ff ff2d 	bl	8000ad8 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f7ff ff8c 	bl	8000b9c <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40012c00 	.word	0x40012c00
 8000c94:	40000400 	.word	0x40000400
 8000c98:	40014000 	.word	0x40014000
 8000c9c:	40014400 	.word	0x40014400
 8000ca0:	40014800 	.word	0x40014800

08000ca4 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cba:	d01f      	beq.n	8000cfc <LL_TIM_OC_Init+0x58>
 8000cbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cc0:	d804      	bhi.n	8000ccc <LL_TIM_OC_Init+0x28>
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d00c      	beq.n	8000ce0 <LL_TIM_OC_Init+0x3c>
 8000cc6:	2b10      	cmp	r3, #16
 8000cc8:	d011      	beq.n	8000cee <LL_TIM_OC_Init+0x4a>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 8000cca:	e033      	b.n	8000d34 <LL_TIM_OC_Init+0x90>
  switch (Channel)
 8000ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cd0:	d022      	beq.n	8000d18 <LL_TIM_OC_Init+0x74>
 8000cd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000cd6:	d026      	beq.n	8000d26 <LL_TIM_OC_Init+0x82>
 8000cd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000cdc:	d015      	beq.n	8000d0a <LL_TIM_OC_Init+0x66>
      break;
 8000cde:	e029      	b.n	8000d34 <LL_TIM_OC_Init+0x90>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8000ce0:	6879      	ldr	r1, [r7, #4]
 8000ce2:	68f8      	ldr	r0, [r7, #12]
 8000ce4:	f000 f82c 	bl	8000d40 <OC1Config>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	75fb      	strb	r3, [r7, #23]
      break;
 8000cec:	e022      	b.n	8000d34 <LL_TIM_OC_Init+0x90>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8000cee:	6879      	ldr	r1, [r7, #4]
 8000cf0:	68f8      	ldr	r0, [r7, #12]
 8000cf2:	f000 f8a5 	bl	8000e40 <OC2Config>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	75fb      	strb	r3, [r7, #23]
      break;
 8000cfa:	e01b      	b.n	8000d34 <LL_TIM_OC_Init+0x90>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8000cfc:	6879      	ldr	r1, [r7, #4]
 8000cfe:	68f8      	ldr	r0, [r7, #12]
 8000d00:	f000 f922 	bl	8000f48 <OC3Config>
 8000d04:	4603      	mov	r3, r0
 8000d06:	75fb      	strb	r3, [r7, #23]
      break;
 8000d08:	e014      	b.n	8000d34 <LL_TIM_OC_Init+0x90>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8000d0a:	6879      	ldr	r1, [r7, #4]
 8000d0c:	68f8      	ldr	r0, [r7, #12]
 8000d0e:	f000 f99f 	bl	8001050 <OC4Config>
 8000d12:	4603      	mov	r3, r0
 8000d14:	75fb      	strb	r3, [r7, #23]
      break;
 8000d16:	e00d      	b.n	8000d34 <LL_TIM_OC_Init+0x90>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8000d18:	6879      	ldr	r1, [r7, #4]
 8000d1a:	68f8      	ldr	r0, [r7, #12]
 8000d1c:	f000 fa04 	bl	8001128 <OC5Config>
 8000d20:	4603      	mov	r3, r0
 8000d22:	75fb      	strb	r3, [r7, #23]
      break;
 8000d24:	e006      	b.n	8000d34 <LL_TIM_OC_Init+0x90>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8000d26:	6879      	ldr	r1, [r7, #4]
 8000d28:	68f8      	ldr	r0, [r7, #12]
 8000d2a:	f000 fa5f 	bl	80011ec <OC6Config>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	75fb      	strb	r3, [r7, #23]
      break;
 8000d32:	bf00      	nop
  }

  return result;
 8000d34:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3718      	adds	r7, #24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6a1b      	ldr	r3, [r3, #32]
 8000d5a:	f023 0201 	bic.w	r2, r3, #1
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6a1b      	ldr	r3, [r3, #32]
 8000d66:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	f023 0303 	bic.w	r3, r3, #3
 8000d7a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000d86:	683a      	ldr	r2, [r7, #0]
 8000d88:	6812      	ldr	r2, [r2, #0]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	f023 0202 	bic.w	r2, r3, #2
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	691b      	ldr	r3, [r3, #16]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	f023 0201 	bic.w	r2, r3, #1
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a20      	ldr	r2, [pc, #128]	; (8000e30 <OC1Config+0xf0>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d00b      	beq.n	8000dca <OC1Config+0x8a>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a1f      	ldr	r2, [pc, #124]	; (8000e34 <OC1Config+0xf4>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d007      	beq.n	8000dca <OC1Config+0x8a>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a1e      	ldr	r2, [pc, #120]	; (8000e38 <OC1Config+0xf8>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d003      	beq.n	8000dca <OC1Config+0x8a>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a1d      	ldr	r2, [pc, #116]	; (8000e3c <OC1Config+0xfc>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d11e      	bne.n	8000e08 <OC1Config+0xc8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	f023 0208 	bic.w	r2, r3, #8
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	695b      	ldr	r3, [r3, #20]
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	f023 0204 	bic.w	r2, r3, #4
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	689b      	ldr	r3, [r3, #8]
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	4313      	orrs	r3, r2
 8000de8:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	69db      	ldr	r3, [r3, #28]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	4313      	orrs	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	68fa      	ldr	r2, [r7, #12]
 8000e12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	4619      	mov	r1, r3
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f7ff fe6a 	bl	8000af4 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	697a      	ldr	r2, [r7, #20]
 8000e24:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000e26:	2300      	movs	r3, #0
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3718      	adds	r7, #24
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40012c00 	.word	0x40012c00
 8000e34:	40014000 	.word	0x40014000
 8000e38:	40014400 	.word	0x40014400
 8000e3c:	40014800 	.word	0x40014800

08000e40 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6a1b      	ldr	r3, [r3, #32]
 8000e5a:	f023 0210 	bic.w	r2, r3, #16
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6a1b      	ldr	r3, [r3, #32]
 8000e66:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	699b      	ldr	r3, [r3, #24]
 8000e72:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000e82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000e86:	683a      	ldr	r2, [r7, #0]
 8000e88:	6812      	ldr	r2, [r2, #0]
 8000e8a:	0212      	lsls	r2, r2, #8
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	f023 0220 	bic.w	r2, r3, #32
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	691b      	ldr	r3, [r3, #16]
 8000e9a:	011b      	lsls	r3, r3, #4
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	f023 0210 	bic.w	r2, r3, #16
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	011b      	lsls	r3, r3, #4
 8000eac:	4313      	orrs	r3, r2
 8000eae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4a21      	ldr	r2, [pc, #132]	; (8000f38 <OC2Config+0xf8>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d00b      	beq.n	8000ed0 <OC2Config+0x90>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	4a20      	ldr	r2, [pc, #128]	; (8000f3c <OC2Config+0xfc>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d007      	beq.n	8000ed0 <OC2Config+0x90>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4a1f      	ldr	r2, [pc, #124]	; (8000f40 <OC2Config+0x100>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d003      	beq.n	8000ed0 <OC2Config+0x90>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4a1e      	ldr	r2, [pc, #120]	; (8000f44 <OC2Config+0x104>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d11f      	bne.n	8000f10 <OC2Config+0xd0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	695b      	ldr	r3, [r3, #20]
 8000eda:	019b      	lsls	r3, r3, #6
 8000edc:	4313      	orrs	r3, r2
 8000ede:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	019b      	lsls	r3, r3, #6
 8000eec:	4313      	orrs	r3, r2
 8000eee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	699b      	ldr	r3, [r3, #24]
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	4313      	orrs	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	69db      	ldr	r3, [r3, #28]
 8000f0a:	00db      	lsls	r3, r3, #3
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	68fa      	ldr	r2, [r7, #12]
 8000f1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	4619      	mov	r1, r3
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f7ff fdf4 	bl	8000b10 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	697a      	ldr	r2, [r7, #20]
 8000f2c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000f2e:	2300      	movs	r3, #0
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3718      	adds	r7, #24
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40012c00 	.word	0x40012c00
 8000f3c:	40014000 	.word	0x40014000
 8000f40:	40014400 	.word	0x40014400
 8000f44:	40014800 	.word	0x40014800

08000f48 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6a1b      	ldr	r3, [r3, #32]
 8000f62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6a1b      	ldr	r3, [r3, #32]
 8000f6e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	69db      	ldr	r3, [r3, #28]
 8000f7a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	f023 0303 	bic.w	r3, r3, #3
 8000f82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f8e:	683a      	ldr	r2, [r7, #0]
 8000f90:	6812      	ldr	r2, [r2, #0]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	691b      	ldr	r3, [r3, #16]
 8000fa0:	021b      	lsls	r3, r3, #8
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	021b      	lsls	r3, r3, #8
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a21      	ldr	r2, [pc, #132]	; (8001040 <OC3Config+0xf8>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d00b      	beq.n	8000fd6 <OC3Config+0x8e>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a20      	ldr	r2, [pc, #128]	; (8001044 <OC3Config+0xfc>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d007      	beq.n	8000fd6 <OC3Config+0x8e>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a1f      	ldr	r2, [pc, #124]	; (8001048 <OC3Config+0x100>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d003      	beq.n	8000fd6 <OC3Config+0x8e>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a1e      	ldr	r2, [pc, #120]	; (800104c <OC3Config+0x104>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d11f      	bne.n	8001016 <OC3Config+0xce>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	695b      	ldr	r3, [r3, #20]
 8000fe0:	029b      	lsls	r3, r3, #10
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	029b      	lsls	r3, r3, #10
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	011b      	lsls	r3, r3, #4
 8001002:	4313      	orrs	r3, r2
 8001004:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	69db      	ldr	r3, [r3, #28]
 8001010:	015b      	lsls	r3, r3, #5
 8001012:	4313      	orrs	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	68fa      	ldr	r2, [r7, #12]
 8001020:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	4619      	mov	r1, r3
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff fd7f 	bl	8000b2c <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	697a      	ldr	r2, [r7, #20]
 8001032:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3718      	adds	r7, #24
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40012c00 	.word	0x40012c00
 8001044:	40014000 	.word	0x40014000
 8001048:	40014400 	.word	0x40014400
 800104c:	40014800 	.word	0x40014800

08001050 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 800105a:	2300      	movs	r3, #0
 800105c:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6a1b      	ldr	r3, [r3, #32]
 800106a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6a1b      	ldr	r3, [r3, #32]
 8001076:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	613b      	str	r3, [r7, #16]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800108a:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001092:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001096:	683a      	ldr	r2, [r7, #0]
 8001098:	6812      	ldr	r2, [r2, #0]
 800109a:	0212      	lsls	r2, r2, #8
 800109c:	4313      	orrs	r3, r2
 800109e:	613b      	str	r3, [r7, #16]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	691b      	ldr	r3, [r3, #16]
 80010aa:	031b      	lsls	r3, r3, #12
 80010ac:	4313      	orrs	r3, r2
 80010ae:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	031b      	lsls	r3, r3, #12
 80010bc:	4313      	orrs	r3, r2
 80010be:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4a15      	ldr	r2, [pc, #84]	; (8001118 <OC4Config+0xc8>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d00b      	beq.n	80010e0 <OC4Config+0x90>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4a14      	ldr	r2, [pc, #80]	; (800111c <OC4Config+0xcc>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d007      	beq.n	80010e0 <OC4Config+0x90>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4a13      	ldr	r2, [pc, #76]	; (8001120 <OC4Config+0xd0>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d003      	beq.n	80010e0 <OC4Config+0x90>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4a12      	ldr	r2, [pc, #72]	; (8001124 <OC4Config+0xd4>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d107      	bne.n	80010f0 <OC4Config+0xa0>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	699b      	ldr	r3, [r3, #24]
 80010ea:	019b      	lsls	r3, r3, #6
 80010ec:	4313      	orrs	r3, r2
 80010ee:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	697a      	ldr	r2, [r7, #20]
 80010f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	4619      	mov	r1, r3
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff fd20 	bl	8000b48 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800110e:	2300      	movs	r3, #0
}
 8001110:	4618      	mov	r0, r3
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40012c00 	.word	0x40012c00
 800111c:	40014000 	.word	0x40014000
 8001120:	40014400 	.word	0x40014400
 8001124:	40014800 	.word	0x40014800

08001128 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001136:	2300      	movs	r3, #0
 8001138:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6a1b      	ldr	r3, [r3, #32]
 800113e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6a1b      	ldr	r3, [r3, #32]
 800114a:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001150:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800115c:	683a      	ldr	r2, [r7, #0]
 800115e:	6812      	ldr	r2, [r2, #0]
 8001160:	4313      	orrs	r3, r2
 8001162:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	691b      	ldr	r3, [r3, #16]
 800116e:	041b      	lsls	r3, r3, #16
 8001170:	4313      	orrs	r3, r2
 8001172:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	041b      	lsls	r3, r3, #16
 8001180:	4313      	orrs	r3, r2
 8001182:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4a15      	ldr	r2, [pc, #84]	; (80011dc <OC5Config+0xb4>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d00b      	beq.n	80011a4 <OC5Config+0x7c>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4a14      	ldr	r2, [pc, #80]	; (80011e0 <OC5Config+0xb8>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d007      	beq.n	80011a4 <OC5Config+0x7c>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4a13      	ldr	r2, [pc, #76]	; (80011e4 <OC5Config+0xbc>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d003      	beq.n	80011a4 <OC5Config+0x7c>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a12      	ldr	r2, [pc, #72]	; (80011e8 <OC5Config+0xc0>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d109      	bne.n	80011b8 <OC5Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	021b      	lsls	r3, r3, #8
 80011b2:	431a      	orrs	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	68fa      	ldr	r2, [r7, #12]
 80011bc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	4619      	mov	r1, r3
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f7ff fccd 	bl	8000b64 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	68ba      	ldr	r2, [r7, #8]
 80011ce:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40012c00 	.word	0x40012c00
 80011e0:	40014000 	.word	0x40014000
 80011e4:	40014400 	.word	0x40014400
 80011e8:	40014800 	.word	0x40014800

080011ec <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 80011f6:	2300      	movs	r3, #0
 80011f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80011fa:	2300      	movs	r3, #0
 80011fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6a1b      	ldr	r3, [r3, #32]
 8001202:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6a1b      	ldr	r3, [r3, #32]
 800120e:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001214:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800121c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001220:	683a      	ldr	r2, [r7, #0]
 8001222:	6812      	ldr	r2, [r2, #0]
 8001224:	0212      	lsls	r2, r2, #8
 8001226:	4313      	orrs	r3, r2
 8001228:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	691b      	ldr	r3, [r3, #16]
 8001234:	051b      	lsls	r3, r3, #20
 8001236:	4313      	orrs	r3, r2
 8001238:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	051b      	lsls	r3, r3, #20
 8001246:	4313      	orrs	r3, r2
 8001248:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a14      	ldr	r2, [pc, #80]	; (80012a0 <OC6Config+0xb4>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d00b      	beq.n	800126a <OC6Config+0x7e>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a13      	ldr	r2, [pc, #76]	; (80012a4 <OC6Config+0xb8>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d007      	beq.n	800126a <OC6Config+0x7e>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a12      	ldr	r2, [pc, #72]	; (80012a8 <OC6Config+0xbc>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d003      	beq.n	800126a <OC6Config+0x7e>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a11      	ldr	r2, [pc, #68]	; (80012ac <OC6Config+0xc0>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d109      	bne.n	800127e <OC6Config+0x92>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	699b      	ldr	r3, [r3, #24]
 8001276:	029b      	lsls	r3, r3, #10
 8001278:	431a      	orrs	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	68fa      	ldr	r2, [r7, #12]
 8001282:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	4619      	mov	r1, r3
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff fc78 	bl	8000b80 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	68ba      	ldr	r2, [r7, #8]
 8001294:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001296:	2300      	movs	r3, #0
}
 8001298:	4618      	mov	r0, r3
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40012c00 	.word	0x40012c00
 80012a4:	40014000 	.word	0x40014000
 80012a8:	40014400 	.word	0x40014400
 80012ac:	40014800 	.word	0x40014800

080012b0 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	fbb2 f3f3 	udiv	r3, r2, r3
 80012c2:	4a07      	ldr	r2, [pc, #28]	; (80012e0 <LL_InitTick+0x30>)
 80012c4:	3b01      	subs	r3, #1
 80012c6:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <LL_InitTick+0x30>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ce:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <LL_InitTick+0x30>)
 80012d0:	2205      	movs	r2, #5
 80012d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	e000e010 	.word	0xe000e010

080012e4 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80012ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f7ff ffdd 	bl	80012b0 <LL_InitTick>
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
	...

08001300 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8001308:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <LL_mDelay+0x44>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800130e:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001316:	d00c      	beq.n	8001332 <LL_mDelay+0x32>
  {
    Delay++;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3301      	adds	r3, #1
 800131c:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800131e:	e008      	b.n	8001332 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001320:	4b08      	ldr	r3, [pc, #32]	; (8001344 <LL_mDelay+0x44>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d002      	beq.n	8001332 <LL_mDelay+0x32>
    {
      Delay--;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3b01      	subs	r3, #1
 8001330:	607b      	str	r3, [r7, #4]
  while (Delay)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d1f3      	bne.n	8001320 <LL_mDelay+0x20>
    }
  }
}
 8001338:	bf00      	nop
 800133a:	3714      	adds	r7, #20
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	e000e010 	.word	0xe000e010

08001348 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001350:	4a04      	ldr	r2, [pc, #16]	; (8001364 <LL_SetSystemCoreClock+0x1c>)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6013      	str	r3, [r2, #0]
}
 8001356:	bf00      	nop
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	2000000c 	.word	0x2000000c

08001368 <LL_TIM_ClearFlag_UPDATE>:
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f06f 0201 	mvn.w	r2, #1
 8001376:	611a      	str	r2, [r3, #16]
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF));
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	691b      	ldr	r3, [r3, #16]
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	2b01      	cmp	r3, #1
 8001396:	bf0c      	ite	eq
 8001398:	2301      	moveq	r3, #1
 800139a:	2300      	movne	r3, #0
 800139c:	b2db      	uxtb	r3, r3
}
 800139e:	4618      	mov	r0, r3
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80013aa:	b480      	push	{r7}
 80013ac:	b083      	sub	sp, #12
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
 80013b2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	683a      	ldr	r2, [r7, #0]
 80013b8:	619a      	str	r2, [r3, #24]
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80013c6:	b480      	push	{r7}
 80013c8:	b083      	sub	sp, #12
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
 80013ce:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	683a      	ldr	r2, [r7, #0]
 80013d4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
	...

080013e4 <resetSegments>:
void updateDisplay(void);
void setDigit(uint8_t pos);

/*Reset (turn-off) all the segments of display*/
void resetSegments(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_11);
 80013e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f0:	f7ff ffdb 	bl	80013aa <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_8);
 80013f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013fc:	f7ff ffd5 	bl	80013aa <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_1);
 8001400:	2102      	movs	r1, #2
 8001402:	480e      	ldr	r0, [pc, #56]	; (800143c <resetSegments+0x58>)
 8001404:	f7ff ffd1 	bl	80013aa <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8001408:	2120      	movs	r1, #32
 800140a:	480c      	ldr	r0, [pc, #48]	; (800143c <resetSegments+0x58>)
 800140c:	f7ff ffcd 	bl	80013aa <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8001410:	2110      	movs	r1, #16
 8001412:	480a      	ldr	r0, [pc, #40]	; (800143c <resetSegments+0x58>)
 8001414:	f7ff ffc9 	bl	80013aa <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8001418:	2101      	movs	r1, #1
 800141a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800141e:	f7ff ffc4 	bl	80013aa <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_1);
 8001422:	2102      	movs	r1, #2
 8001424:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001428:	f7ff ffbf 	bl	80013aa <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_3);
 800142c:	2108      	movs	r1, #8
 800142e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001432:	f7ff ffba 	bl	80013aa <LL_GPIO_SetOutputPin>
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	48000400 	.word	0x48000400

08001440 <resetDigits>:
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_3);
}

/* Reset (turn-off) all digits*/
void resetDigits(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_2);
 8001444:	2104      	movs	r1, #4
 8001446:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800144a:	f7ff ffbc 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);
 800144e:	2120      	movs	r1, #32
 8001450:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001454:	f7ff ffb7 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 8001458:	2110      	movs	r1, #16
 800145a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800145e:	f7ff ffb2 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_6);
 8001462:	2140      	movs	r1, #64	; 0x40
 8001464:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001468:	f7ff ffad 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7);
 800146c:	2180      	movs	r1, #128	; 0x80
 800146e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001472:	f7ff ffa8 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
	...

0800147c <setDecimalPoint>:
	DIGIT_4_ON;
	DIGIT_TIME_ON;
}

void setDecimalPoint(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTDP_PORT, SEGMENTDP_PIN);
 8001480:	2102      	movs	r1, #2
 8001482:	4802      	ldr	r0, [pc, #8]	; (800148c <setDecimalPoint+0x10>)
 8001484:	f7ff ff9f 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}
 800148c:	48000400 	.word	0x48000400

08001490 <setOne>:

/* Functions to display numbers 0 - 9 */
void setOne(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
	// B,C
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001494:	2101      	movs	r1, #1
 8001496:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800149a:	f7ff ff94 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800149e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014a6:	f7ff ff8e 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
	...

080014b0 <setTwo>:

void setTwo(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
	// A,B,G,E,D
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80014b4:	2101      	movs	r1, #1
 80014b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ba:	f7ff ff84 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80014be:	2102      	movs	r1, #2
 80014c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014c4:	f7ff ff7f 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80014c8:	2110      	movs	r1, #16
 80014ca:	4807      	ldr	r0, [pc, #28]	; (80014e8 <setTwo+0x38>)
 80014cc:	f7ff ff7b 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80014d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d8:	f7ff ff75 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80014dc:	2120      	movs	r1, #32
 80014de:	4802      	ldr	r0, [pc, #8]	; (80014e8 <setTwo+0x38>)
 80014e0:	f7ff ff71 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 80014e4:	bf00      	nop
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	48000400 	.word	0x48000400

080014ec <setThree>:

void setThree(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
	// A,B,G,C,D
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80014f0:	2101      	movs	r1, #1
 80014f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014f6:	f7ff ff66 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80014fa:	2102      	movs	r1, #2
 80014fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001500:	f7ff ff61 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001504:	2110      	movs	r1, #16
 8001506:	4807      	ldr	r0, [pc, #28]	; (8001524 <setThree+0x38>)
 8001508:	f7ff ff5d 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800150c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001510:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001514:	f7ff ff57 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001518:	2120      	movs	r1, #32
 800151a:	4802      	ldr	r0, [pc, #8]	; (8001524 <setThree+0x38>)
 800151c:	f7ff ff53 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001520:	bf00      	nop
 8001522:	bd80      	pop	{r7, pc}
 8001524:	48000400 	.word	0x48000400

08001528 <setFour>:

void setFour(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
	// F,B,G,C
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800152c:	2108      	movs	r1, #8
 800152e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001532:	f7ff ff48 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001536:	2101      	movs	r1, #1
 8001538:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800153c:	f7ff ff43 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001540:	2110      	movs	r1, #16
 8001542:	4805      	ldr	r0, [pc, #20]	; (8001558 <setFour+0x30>)
 8001544:	f7ff ff3f 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001548:	f44f 7180 	mov.w	r1, #256	; 0x100
 800154c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001550:	f7ff ff39 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}
 8001558:	48000400 	.word	0x48000400

0800155c <setFive>:

void setFive(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
	// A,F,G,C,D
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001560:	2108      	movs	r1, #8
 8001562:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001566:	f7ff ff2e 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800156a:	2120      	movs	r1, #32
 800156c:	4809      	ldr	r0, [pc, #36]	; (8001594 <setFive+0x38>)
 800156e:	f7ff ff2a 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001572:	2110      	movs	r1, #16
 8001574:	4807      	ldr	r0, [pc, #28]	; (8001594 <setFive+0x38>)
 8001576:	f7ff ff26 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800157a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800157e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001582:	f7ff ff20 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001586:	2102      	movs	r1, #2
 8001588:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800158c:	f7ff ff1b 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001590:	bf00      	nop
 8001592:	bd80      	pop	{r7, pc}
 8001594:	48000400 	.word	0x48000400

08001598 <setSix>:

void setSix(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
	// A,F,G,E,C,D
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800159c:	2108      	movs	r1, #8
 800159e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015a2:	f7ff ff10 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80015a6:	2120      	movs	r1, #32
 80015a8:	480c      	ldr	r0, [pc, #48]	; (80015dc <setSix+0x44>)
 80015aa:	f7ff ff0c 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80015ae:	2110      	movs	r1, #16
 80015b0:	480a      	ldr	r0, [pc, #40]	; (80015dc <setSix+0x44>)
 80015b2:	f7ff ff08 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80015b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015be:	f7ff ff02 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80015c2:	2102      	movs	r1, #2
 80015c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015c8:	f7ff fefd 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80015cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015d4:	f7ff fef7 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	48000400 	.word	0x48000400

080015e0 <setSeven>:

void setSeven(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
	// A,B,C
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80015e4:	2101      	movs	r1, #1
 80015e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ea:	f7ff feec 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80015ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f6:	f7ff fee6 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80015fa:	2102      	movs	r1, #2
 80015fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001600:	f7ff fee1 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001604:	bf00      	nop
 8001606:	bd80      	pop	{r7, pc}

08001608 <setEight>:

void setEight(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
	// A,B,C,D,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800160c:	2108      	movs	r1, #8
 800160e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001612:	f7ff fed8 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001616:	2120      	movs	r1, #32
 8001618:	480f      	ldr	r0, [pc, #60]	; (8001658 <setEight+0x50>)
 800161a:	f7ff fed4 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800161e:	2110      	movs	r1, #16
 8001620:	480d      	ldr	r0, [pc, #52]	; (8001658 <setEight+0x50>)
 8001622:	f7ff fed0 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001626:	f44f 7180 	mov.w	r1, #256	; 0x100
 800162a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800162e:	f7ff feca 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001632:	2102      	movs	r1, #2
 8001634:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001638:	f7ff fec5 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800163c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001640:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001644:	f7ff febf 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001648:	2101      	movs	r1, #1
 800164a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800164e:	f7ff feba 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	48000400 	.word	0x48000400

0800165c <setNine>:

void setNine(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
	// A,B,C
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001660:	2101      	movs	r1, #1
 8001662:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001666:	f7ff feae 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800166a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800166e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001672:	f7ff fea8 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001676:	2102      	movs	r1, #2
 8001678:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800167c:	f7ff fea3 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001680:	2110      	movs	r1, #16
 8001682:	4805      	ldr	r0, [pc, #20]	; (8001698 <setNine+0x3c>)
 8001684:	f7ff fe9f 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001688:	2108      	movs	r1, #8
 800168a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800168e:	f7ff fe9a 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	48000400 	.word	0x48000400

0800169c <setZero>:

void setZero(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
	// A,B,C,D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80016a0:	2108      	movs	r1, #8
 80016a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a6:	f7ff fe8e 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80016aa:	2120      	movs	r1, #32
 80016ac:	480d      	ldr	r0, [pc, #52]	; (80016e4 <setZero+0x48>)
 80016ae:	f7ff fe8a 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80016b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ba:	f7ff fe84 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80016be:	2102      	movs	r1, #2
 80016c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c4:	f7ff fe7f 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80016c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d0:	f7ff fe79 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80016d4:	2101      	movs	r1, #1
 80016d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016da:	f7ff fe74 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	48000400 	.word	0x48000400

080016e8 <setA>:

void setA(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
	// A,B,C,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80016ec:	2108      	movs	r1, #8
 80016ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016f2:	f7ff fe68 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80016f6:	2110      	movs	r1, #16
 80016f8:	480d      	ldr	r0, [pc, #52]	; (8001730 <setA+0x48>)
 80016fa:	f7ff fe64 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80016fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001702:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001706:	f7ff fe5e 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800170a:	2102      	movs	r1, #2
 800170c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001710:	f7ff fe59 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001714:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001718:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800171c:	f7ff fe53 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001720:	2101      	movs	r1, #1
 8001722:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001726:	f7ff fe4e 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	48000400 	.word	0x48000400

08001734 <seta>:

void seta(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
	// A,B,C,E,D,G
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001738:	2120      	movs	r1, #32
 800173a:	480f      	ldr	r0, [pc, #60]	; (8001778 <seta+0x44>)
 800173c:	f7ff fe43 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001740:	2110      	movs	r1, #16
 8001742:	480d      	ldr	r0, [pc, #52]	; (8001778 <seta+0x44>)
 8001744:	f7ff fe3f 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001748:	f44f 7180 	mov.w	r1, #256	; 0x100
 800174c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001750:	f7ff fe39 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001754:	2102      	movs	r1, #2
 8001756:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800175a:	f7ff fe34 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800175e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001762:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001766:	f7ff fe2e 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 800176a:	2101      	movs	r1, #1
 800176c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001770:	f7ff fe29 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001774:	bf00      	nop
 8001776:	bd80      	pop	{r7, pc}
 8001778:	48000400 	.word	0x48000400

0800177c <setb>:

void setb(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
	// C,D,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001780:	2108      	movs	r1, #8
 8001782:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001786:	f7ff fe1e 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800178a:	2110      	movs	r1, #16
 800178c:	480a      	ldr	r0, [pc, #40]	; (80017b8 <setb+0x3c>)
 800178e:	f7ff fe1a 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001792:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001796:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800179a:	f7ff fe14 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800179e:	2120      	movs	r1, #32
 80017a0:	4805      	ldr	r0, [pc, #20]	; (80017b8 <setb+0x3c>)
 80017a2:	f7ff fe10 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80017a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ae:	f7ff fe0a 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	48000400 	.word	0x48000400

080017bc <setC>:

void setC(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
	// A,D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80017c0:	2108      	movs	r1, #8
 80017c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017c6:	f7ff fdfe 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80017ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d2:	f7ff fdf8 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80017d6:	2102      	movs	r1, #2
 80017d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017dc:	f7ff fdf3 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80017e0:	2120      	movs	r1, #32
 80017e2:	4802      	ldr	r0, [pc, #8]	; (80017ec <setC+0x30>)
 80017e4:	f7ff fdef 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 80017e8:	bf00      	nop
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	48000400 	.word	0x48000400

080017f0 <setc>:

void setc(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
	// D,E,G
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80017f4:	2120      	movs	r1, #32
 80017f6:	4807      	ldr	r0, [pc, #28]	; (8001814 <setc+0x24>)
 80017f8:	f7ff fde5 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80017fc:	2110      	movs	r1, #16
 80017fe:	4805      	ldr	r0, [pc, #20]	; (8001814 <setc+0x24>)
 8001800:	f7ff fde1 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001804:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001808:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800180c:	f7ff fddb 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001810:	bf00      	nop
 8001812:	bd80      	pop	{r7, pc}
 8001814:	48000400 	.word	0x48000400

08001818 <setd>:

void setd(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
	// B,C,D,E,G
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800181c:	2120      	movs	r1, #32
 800181e:	480d      	ldr	r0, [pc, #52]	; (8001854 <setd+0x3c>)
 8001820:	f7ff fdd1 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001824:	2110      	movs	r1, #16
 8001826:	480b      	ldr	r0, [pc, #44]	; (8001854 <setd+0x3c>)
 8001828:	f7ff fdcd 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800182c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001830:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001834:	f7ff fdc7 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001838:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800183c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001840:	f7ff fdc1 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001844:	2101      	movs	r1, #1
 8001846:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800184a:	f7ff fdbc 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	48000400 	.word	0x48000400

08001858 <setE>:

void setE(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
	// A,D,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800185c:	2108      	movs	r1, #8
 800185e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001862:	f7ff fdb0 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001866:	2110      	movs	r1, #16
 8001868:	4809      	ldr	r0, [pc, #36]	; (8001890 <setE+0x38>)
 800186a:	f7ff fdac 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800186e:	2120      	movs	r1, #32
 8001870:	4807      	ldr	r0, [pc, #28]	; (8001890 <setE+0x38>)
 8001872:	f7ff fda8 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001876:	2102      	movs	r1, #2
 8001878:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800187c:	f7ff fda3 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001880:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001884:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001888:	f7ff fd9d 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}
 8001890:	48000400 	.word	0x48000400

08001894 <setF>:

void setF(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
	// A,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001898:	2108      	movs	r1, #8
 800189a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800189e:	f7ff fd92 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80018a2:	2110      	movs	r1, #16
 80018a4:	4807      	ldr	r0, [pc, #28]	; (80018c4 <setF+0x30>)
 80018a6:	f7ff fd8e 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80018aa:	2102      	movs	r1, #2
 80018ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018b0:	f7ff fd89 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80018b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018bc:	f7ff fd83 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 80018c0:	bf00      	nop
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	48000400 	.word	0x48000400

080018c8 <setG>:

void setG(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
	// A,C,D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80018cc:	2108      	movs	r1, #8
 80018ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018d2:	f7ff fd78 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80018d6:	2120      	movs	r1, #32
 80018d8:	480a      	ldr	r0, [pc, #40]	; (8001904 <setG+0x3c>)
 80018da:	f7ff fd74 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80018de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018e6:	f7ff fd6e 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80018ea:	2102      	movs	r1, #2
 80018ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018f0:	f7ff fd69 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80018f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018fc:	f7ff fd63 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001900:	bf00      	nop
 8001902:	bd80      	pop	{r7, pc}
 8001904:	48000400 	.word	0x48000400

08001908 <setH>:

void setH(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
	// B,C,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800190c:	2108      	movs	r1, #8
 800190e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001912:	f7ff fd58 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001916:	2110      	movs	r1, #16
 8001918:	480a      	ldr	r0, [pc, #40]	; (8001944 <setH+0x3c>)
 800191a:	f7ff fd54 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800191e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001922:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001926:	f7ff fd4e 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800192a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800192e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001932:	f7ff fd48 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001936:	2101      	movs	r1, #1
 8001938:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800193c:	f7ff fd43 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001940:	bf00      	nop
 8001942:	bd80      	pop	{r7, pc}
 8001944:	48000400 	.word	0x48000400

08001948 <seth>:

void seth(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
	// C,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800194c:	2108      	movs	r1, #8
 800194e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001952:	f7ff fd38 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001956:	2110      	movs	r1, #16
 8001958:	4808      	ldr	r0, [pc, #32]	; (800197c <seth+0x34>)
 800195a:	f7ff fd34 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800195e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001962:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001966:	f7ff fd2e 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800196a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800196e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001972:	f7ff fd28 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	48000400 	.word	0x48000400

08001980 <setI>:

void setI(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
	// E,F
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001984:	2108      	movs	r1, #8
 8001986:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800198a:	f7ff fd1c 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800198e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001992:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001996:	f7ff fd16 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
	...

080019a0 <setJ>:

void setJ(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
	// B,C,D,E
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80019a4:	2120      	movs	r1, #32
 80019a6:	480b      	ldr	r0, [pc, #44]	; (80019d4 <setJ+0x34>)
 80019a8:	f7ff fd0d 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80019ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019b4:	f7ff fd07 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80019b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019c0:	f7ff fd01 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80019c4:	2101      	movs	r1, #1
 80019c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ca:	f7ff fcfc 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	48000400 	.word	0x48000400

080019d8 <setL>:

void setL(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
	// D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80019dc:	2108      	movs	r1, #8
 80019de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019e2:	f7ff fcf0 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80019e6:	2120      	movs	r1, #32
 80019e8:	4805      	ldr	r0, [pc, #20]	; (8001a00 <setL+0x28>)
 80019ea:	f7ff fcec 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80019ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019f6:	f7ff fce6 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	48000400 	.word	0x48000400

08001a04 <setn>:

void setn(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
	// C,E,G
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001a08:	2110      	movs	r1, #16
 8001a0a:	4808      	ldr	r0, [pc, #32]	; (8001a2c <setn+0x28>)
 8001a0c:	f7ff fcdb 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001a10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a18:	f7ff fcd5 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001a1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a24:	f7ff fccf 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001a28:	bf00      	nop
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	48000400 	.word	0x48000400

08001a30 <setO>:

void setO(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
	// A,B,C,D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001a34:	2108      	movs	r1, #8
 8001a36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a3a:	f7ff fcc4 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001a3e:	2120      	movs	r1, #32
 8001a40:	480d      	ldr	r0, [pc, #52]	; (8001a78 <setO+0x48>)
 8001a42:	f7ff fcc0 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001a46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a4e:	f7ff fcba 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001a52:	2102      	movs	r1, #2
 8001a54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a58:	f7ff fcb5 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001a5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a64:	f7ff fcaf 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001a68:	2101      	movs	r1, #1
 8001a6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a6e:	f7ff fcaa 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	48000400 	.word	0x48000400

08001a7c <seto>:

void seto(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
	// C,D,E,G
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001a80:	2120      	movs	r1, #32
 8001a82:	480a      	ldr	r0, [pc, #40]	; (8001aac <seto+0x30>)
 8001a84:	f7ff fc9f 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001a88:	2110      	movs	r1, #16
 8001a8a:	4808      	ldr	r0, [pc, #32]	; (8001aac <seto+0x30>)
 8001a8c:	f7ff fc9b 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001a90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a98:	f7ff fc95 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001a9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001aa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aa4:	f7ff fc8f 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001aa8:	bf00      	nop
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	48000400 	.word	0x48000400

08001ab0 <setP>:

void setP(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
	// A,B,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001ab4:	2108      	movs	r1, #8
 8001ab6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aba:	f7ff fc84 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001abe:	2110      	movs	r1, #16
 8001ac0:	480a      	ldr	r0, [pc, #40]	; (8001aec <setP+0x3c>)
 8001ac2:	f7ff fc80 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001ac6:	2102      	movs	r1, #2
 8001ac8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001acc:	f7ff fc7b 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001ad0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ad4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ad8:	f7ff fc75 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001adc:	2101      	movs	r1, #1
 8001ade:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ae2:	f7ff fc70 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	48000400 	.word	0x48000400

08001af0 <setq>:

void setq(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
	// A,B,C,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001af4:	2108      	movs	r1, #8
 8001af6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001afa:	f7ff fc64 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001afe:	2110      	movs	r1, #16
 8001b00:	480a      	ldr	r0, [pc, #40]	; (8001b2c <setq+0x3c>)
 8001b02:	f7ff fc60 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001b06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b0e:	f7ff fc5a 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001b12:	2102      	movs	r1, #2
 8001b14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b18:	f7ff fc55 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b22:	f7ff fc50 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	48000400 	.word	0x48000400

08001b30 <setr>:

void setr(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
	// E,G
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001b34:	2110      	movs	r1, #16
 8001b36:	4805      	ldr	r0, [pc, #20]	; (8001b4c <setr+0x1c>)
 8001b38:	f7ff fc45 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001b3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b44:	f7ff fc3f 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001b48:	bf00      	nop
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	48000400 	.word	0x48000400

08001b50 <setS>:

void setS(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
	// A,C,D,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001b54:	2108      	movs	r1, #8
 8001b56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b5a:	f7ff fc34 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001b5e:	2110      	movs	r1, #16
 8001b60:	4809      	ldr	r0, [pc, #36]	; (8001b88 <setS+0x38>)
 8001b62:	f7ff fc30 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001b66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b6e:	f7ff fc2a 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001b72:	2102      	movs	r1, #2
 8001b74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b78:	f7ff fc25 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001b7c:	2120      	movs	r1, #32
 8001b7e:	4802      	ldr	r0, [pc, #8]	; (8001b88 <setS+0x38>)
 8001b80:	f7ff fc21 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001b84:	bf00      	nop
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	48000400 	.word	0x48000400

08001b8c <sett>:

void sett(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
	// D,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001b90:	2108      	movs	r1, #8
 8001b92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b96:	f7ff fc16 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001b9a:	2110      	movs	r1, #16
 8001b9c:	4807      	ldr	r0, [pc, #28]	; (8001bbc <sett+0x30>)
 8001b9e:	f7ff fc12 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001ba2:	2120      	movs	r1, #32
 8001ba4:	4805      	ldr	r0, [pc, #20]	; (8001bbc <sett+0x30>)
 8001ba6:	f7ff fc0e 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001baa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bb2:	f7ff fc08 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	48000400 	.word	0x48000400

08001bc0 <setU>:

void setU(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
	// B,C,D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001bc4:	2108      	movs	r1, #8
 8001bc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bca:	f7ff fbfc 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001bce:	2120      	movs	r1, #32
 8001bd0:	480a      	ldr	r0, [pc, #40]	; (8001bfc <setU+0x3c>)
 8001bd2:	f7ff fbf8 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001bd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bde:	f7ff fbf2 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001be2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001be6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bea:	f7ff fbec 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001bee:	2101      	movs	r1, #1
 8001bf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bf4:	f7ff fbe7 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001bf8:	bf00      	nop
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	48000400 	.word	0x48000400

08001c00 <setu>:

void setu(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
	// C,D,E
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001c04:	2120      	movs	r1, #32
 8001c06:	4808      	ldr	r0, [pc, #32]	; (8001c28 <setu+0x28>)
 8001c08:	f7ff fbdd 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001c0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c14:	f7ff fbd7 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001c18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c20:	f7ff fbd1 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001c24:	bf00      	nop
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	48000400 	.word	0x48000400

08001c2c <sety>:

void sety(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
	// B,C,D,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001c30:	2108      	movs	r1, #8
 8001c32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c36:	f7ff fbc6 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001c3a:	2110      	movs	r1, #16
 8001c3c:	4809      	ldr	r0, [pc, #36]	; (8001c64 <sety+0x38>)
 8001c3e:	f7ff fbc2 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001c42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c4a:	f7ff fbbc 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001c4e:	2120      	movs	r1, #32
 8001c50:	4804      	ldr	r0, [pc, #16]	; (8001c64 <sety+0x38>)
 8001c52:	f7ff fbb8 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001c56:	2101      	movs	r1, #1
 8001c58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c5c:	f7ff fbb3 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001c60:	bf00      	nop
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	48000400 	.word	0x48000400

08001c68 <setK>:

void setK(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
	// A,C,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001c6c:	2108      	movs	r1, #8
 8001c6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c72:	f7ff fba8 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001c76:	2110      	movs	r1, #16
 8001c78:	480a      	ldr	r0, [pc, #40]	; (8001ca4 <setK+0x3c>)
 8001c7a:	f7ff fba4 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001c7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c86:	f7ff fb9e 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001c8a:	2102      	movs	r1, #2
 8001c8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c90:	f7ff fb99 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001c94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c9c:	f7ff fb93 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001ca0:	bf00      	nop
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	48000400 	.word	0x48000400

08001ca8 <setM>:

void setM(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
	// A,B,D,F
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001cac:	2108      	movs	r1, #8
 8001cae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cb2:	f7ff fb88 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001cb6:	2120      	movs	r1, #32
 8001cb8:	4807      	ldr	r0, [pc, #28]	; (8001cd8 <setM+0x30>)
 8001cba:	f7ff fb84 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001cbe:	2102      	movs	r1, #2
 8001cc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cc4:	f7ff fb7f 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001cc8:	2101      	movs	r1, #1
 8001cca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cce:	f7ff fb7a 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	48000400 	.word	0x48000400

08001cdc <setV>:

void setV(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
	// B,D,F
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001ce0:	2108      	movs	r1, #8
 8001ce2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ce6:	f7ff fb6e 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001cea:	2120      	movs	r1, #32
 8001cec:	4804      	ldr	r0, [pc, #16]	; (8001d00 <setV+0x24>)
 8001cee:	f7ff fb6a 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cf8:	f7ff fb65 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001cfc:	bf00      	nop
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	48000400 	.word	0x48000400

08001d04 <setW>:

void setW(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
	// B,C,D,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001d08:	2108      	movs	r1, #8
 8001d0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d0e:	f7ff fb5a 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001d12:	2120      	movs	r1, #32
 8001d14:	480c      	ldr	r0, [pc, #48]	; (8001d48 <setW+0x44>)
 8001d16:	f7ff fb56 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001d1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d22:	f7ff fb50 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001d26:	2101      	movs	r1, #1
 8001d28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d2c:	f7ff fb4b 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001d30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d38:	f7ff fb45 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001d3c:	2110      	movs	r1, #16
 8001d3e:	4802      	ldr	r0, [pc, #8]	; (8001d48 <setW+0x44>)
 8001d40:	f7ff fb41 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001d44:	bf00      	nop
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	48000400 	.word	0x48000400

08001d4c <setX>:

void setX(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
	// A,G,D
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001d50:	2110      	movs	r1, #16
 8001d52:	4807      	ldr	r0, [pc, #28]	; (8001d70 <setX+0x24>)
 8001d54:	f7ff fb37 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001d58:	2120      	movs	r1, #32
 8001d5a:	4805      	ldr	r0, [pc, #20]	; (8001d70 <setX+0x24>)
 8001d5c:	f7ff fb33 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001d60:	2102      	movs	r1, #2
 8001d62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d66:	f7ff fb2e 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	48000400 	.word	0x48000400

08001d74 <setZ>:

void setZ(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
	// A,B,D,E,G
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001d78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d80:	f7ff fb21 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001d84:	2120      	movs	r1, #32
 8001d86:	4809      	ldr	r0, [pc, #36]	; (8001dac <setZ+0x38>)
 8001d88:	f7ff fb1d 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001d8c:	2102      	movs	r1, #2
 8001d8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d92:	f7ff fb18 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001d96:	2101      	movs	r1, #1
 8001d98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d9c:	f7ff fb13 	bl	80013c6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001da0:	2110      	movs	r1, #16
 8001da2:	4802      	ldr	r0, [pc, #8]	; (8001dac <setZ+0x38>)
 8001da4:	f7ff fb0f 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001da8:	bf00      	nop
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	48000400 	.word	0x48000400

08001db0 <setUnderscore>:

void setUnderscore(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
	// D
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001db4:	2120      	movs	r1, #32
 8001db6:	4802      	ldr	r0, [pc, #8]	; (8001dc0 <setUnderscore+0x10>)
 8001db8:	f7ff fb05 	bl	80013c6 <LL_GPIO_ResetOutputPin>
}
 8001dbc:	bf00      	nop
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	48000400 	.word	0x48000400

08001dc4 <displayNumber>:

/**
 * Pre-process number before it is displayed. Extract digits of the number
 */
void displayNumber(char *text)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	73fb      	strb	r3, [r7, #15]

	dDisplayData.digit_num = 4;
 8001dd0:	4b0f      	ldr	r3, [pc, #60]	; (8001e10 <displayNumber+0x4c>)
 8001dd2:	2204      	movs	r2, #4
 8001dd4:	711a      	strb	r2, [r3, #4]
	dDisplayData.negative = 0;
 8001dd6:	4b0e      	ldr	r3, [pc, #56]	; (8001e10 <displayNumber+0x4c>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	715a      	strb	r2, [r3, #5]
	dDisplayData.resolution = 0;
 8001ddc:	4b0c      	ldr	r3, [pc, #48]	; (8001e10 <displayNumber+0x4c>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	719a      	strb	r2, [r3, #6]

	for (i = 0; i < 4; i++) {
 8001de2:	2300      	movs	r3, #0
 8001de4:	73fb      	strb	r3, [r7, #15]
 8001de6:	e009      	b.n	8001dfc <displayNumber+0x38>
		dDisplayData.digit[i] = *text++;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	1c5a      	adds	r2, r3, #1
 8001dec:	607a      	str	r2, [r7, #4]
 8001dee:	7bfa      	ldrb	r2, [r7, #15]
 8001df0:	7819      	ldrb	r1, [r3, #0]
 8001df2:	4b07      	ldr	r3, [pc, #28]	; (8001e10 <displayNumber+0x4c>)
 8001df4:	5499      	strb	r1, [r3, r2]
	for (i = 0; i < 4; i++) {
 8001df6:	7bfb      	ldrb	r3, [r7, #15]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	73fb      	strb	r3, [r7, #15]
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
 8001dfe:	2b03      	cmp	r3, #3
 8001e00:	d9f2      	bls.n	8001de8 <displayNumber+0x24>
	}
}
 8001e02:	bf00      	nop
 8001e04:	3714      	adds	r7, #20
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	20000034 	.word	0x20000034

08001e14 <setDigit>:

/*
 * Turns required digit ON
 */
void setDigit(uint8_t pos)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	71fb      	strb	r3, [r7, #7]
	switch(pos)
 8001e1e:	79fb      	ldrb	r3, [r7, #7]
 8001e20:	2b03      	cmp	r3, #3
 8001e22:	d823      	bhi.n	8001e6c <setDigit+0x58>
 8001e24:	a201      	add	r2, pc, #4	; (adr r2, 8001e2c <setDigit+0x18>)
 8001e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e2a:	bf00      	nop
 8001e2c:	08001e63 	.word	0x08001e63
 8001e30:	08001e57 	.word	0x08001e57
 8001e34:	08001e49 	.word	0x08001e49
 8001e38:	08001e3d 	.word	0x08001e3d
	{
		case 3:
			DIGIT_4_ON;
 8001e3c:	2104      	movs	r1, #4
 8001e3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e42:	f7ff fab2 	bl	80013aa <LL_GPIO_SetOutputPin>
			break;
 8001e46:	e011      	b.n	8001e6c <setDigit+0x58>
		case 2:
			DIGIT_3_ON;
 8001e48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e50:	f7ff faab 	bl	80013aa <LL_GPIO_SetOutputPin>
			break;
 8001e54:	e00a      	b.n	8001e6c <setDigit+0x58>
		case 1:
			DIGIT_2_ON;
 8001e56:	2110      	movs	r1, #16
 8001e58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e5c:	f7ff faa5 	bl	80013aa <LL_GPIO_SetOutputPin>
			break;
 8001e60:	e004      	b.n	8001e6c <setDigit+0x58>
		case 0:
			DIGIT_1_ON;
 8001e62:	2101      	movs	r1, #1
 8001e64:	4803      	ldr	r0, [pc, #12]	; (8001e74 <setDigit+0x60>)
 8001e66:	f7ff faa0 	bl	80013aa <LL_GPIO_SetOutputPin>
			break;
 8001e6a:	bf00      	nop
	}
}
 8001e6c:	bf00      	nop
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	48000400 	.word	0x48000400

08001e78 <updateDisplay>:
/**
 * Display data in dDisplayData.
 * Sets every digit to display its value and decimal point.
 */
void updateDisplay(void)
{
 8001e78:	b590      	push	{r4, r7, lr}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < 4; i++)
 8001e7e:	2300      	movs	r3, #0
 8001e80:	71fb      	strb	r3, [r7, #7]
 8001e82:	e1e7      	b.n	8002254 <updateDisplay+0x3dc>
	{
		switch(dDisplayData.digit[i])
 8001e84:	79fb      	ldrb	r3, [r7, #7]
 8001e86:	4ad3      	ldr	r2, [pc, #844]	; (80021d4 <updateDisplay+0x35c>)
 8001e88:	5cd3      	ldrb	r3, [r2, r3]
 8001e8a:	3b30      	subs	r3, #48	; 0x30
 8001e8c:	2b49      	cmp	r3, #73	; 0x49
 8001e8e:	f200 81bf 	bhi.w	8002210 <updateDisplay+0x398>
 8001e92:	a201      	add	r2, pc, #4	; (adr r2, 8001e98 <updateDisplay+0x20>)
 8001e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e98:	08001fc1 	.word	0x08001fc1
 8001e9c:	08001fcf 	.word	0x08001fcf
 8001ea0:	08001fdd 	.word	0x08001fdd
 8001ea4:	08001feb 	.word	0x08001feb
 8001ea8:	08001ff9 	.word	0x08001ff9
 8001eac:	08002007 	.word	0x08002007
 8001eb0:	08002015 	.word	0x08002015
 8001eb4:	08002023 	.word	0x08002023
 8001eb8:	08002031 	.word	0x08002031
 8001ebc:	0800203f 	.word	0x0800203f
 8001ec0:	08002211 	.word	0x08002211
 8001ec4:	08002211 	.word	0x08002211
 8001ec8:	08002211 	.word	0x08002211
 8001ecc:	08002211 	.word	0x08002211
 8001ed0:	08002211 	.word	0x08002211
 8001ed4:	08002211 	.word	0x08002211
 8001ed8:	08002211 	.word	0x08002211
 8001edc:	0800204d 	.word	0x0800204d
 8001ee0:	08002211 	.word	0x08002211
 8001ee4:	08002077 	.word	0x08002077
 8001ee8:	08002211 	.word	0x08002211
 8001eec:	080020a1 	.word	0x080020a1
 8001ef0:	080020af 	.word	0x080020af
 8001ef4:	080020bd 	.word	0x080020bd
 8001ef8:	080020cb 	.word	0x080020cb
 8001efc:	080020e7 	.word	0x080020e7
 8001f00:	080020f5 	.word	0x080020f5
 8001f04:	080021ab 	.word	0x080021ab
 8001f08:	08002103 	.word	0x08002103
 8001f0c:	080021b9 	.word	0x080021b9
 8001f10:	08002211 	.word	0x08002211
 8001f14:	0800211f 	.word	0x0800211f
 8001f18:	0800213b 	.word	0x0800213b
 8001f1c:	08002211 	.word	0x08002211
 8001f20:	08002211 	.word	0x08002211
 8001f24:	08002165 	.word	0x08002165
 8001f28:	08002211 	.word	0x08002211
 8001f2c:	08002181 	.word	0x08002181
 8001f30:	080021c7 	.word	0x080021c7
 8001f34:	080021d9 	.word	0x080021d9
 8001f38:	080021e7 	.word	0x080021e7
 8001f3c:	08002211 	.word	0x08002211
 8001f40:	080021f5 	.word	0x080021f5
 8001f44:	08002211 	.word	0x08002211
 8001f48:	08002211 	.word	0x08002211
 8001f4c:	08002211 	.word	0x08002211
 8001f50:	08002211 	.word	0x08002211
 8001f54:	08002203 	.word	0x08002203
 8001f58:	08002211 	.word	0x08002211
 8001f5c:	0800205b 	.word	0x0800205b
 8001f60:	08002069 	.word	0x08002069
 8001f64:	08002085 	.word	0x08002085
 8001f68:	08002093 	.word	0x08002093
 8001f6c:	08002211 	.word	0x08002211
 8001f70:	08002211 	.word	0x08002211
 8001f74:	08002211 	.word	0x08002211
 8001f78:	080020d9 	.word	0x080020d9
 8001f7c:	08002211 	.word	0x08002211
 8001f80:	08002211 	.word	0x08002211
 8001f84:	08002211 	.word	0x08002211
 8001f88:	08002211 	.word	0x08002211
 8001f8c:	08002211 	.word	0x08002211
 8001f90:	08002111 	.word	0x08002111
 8001f94:	0800212d 	.word	0x0800212d
 8001f98:	08002211 	.word	0x08002211
 8001f9c:	08002149 	.word	0x08002149
 8001fa0:	08002157 	.word	0x08002157
 8001fa4:	08002211 	.word	0x08002211
 8001fa8:	08002173 	.word	0x08002173
 8001fac:	0800218f 	.word	0x0800218f
 8001fb0:	08002211 	.word	0x08002211
 8001fb4:	08002211 	.word	0x08002211
 8001fb8:	08002211 	.word	0x08002211
 8001fbc:	0800219d 	.word	0x0800219d
		{
			case '0':
			  setDigit(i);
 8001fc0:	79fb      	ldrb	r3, [r7, #7]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff ff26 	bl	8001e14 <setDigit>
			  setZero();
 8001fc8:	f7ff fb68 	bl	800169c <setZero>
			  break;
 8001fcc:	e120      	b.n	8002210 <updateDisplay+0x398>
			case '1':
			  setDigit(i);
 8001fce:	79fb      	ldrb	r3, [r7, #7]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff ff1f 	bl	8001e14 <setDigit>
			  setOne();
 8001fd6:	f7ff fa5b 	bl	8001490 <setOne>
			  break;
 8001fda:	e119      	b.n	8002210 <updateDisplay+0x398>
			case '2':
			  setDigit(i);
 8001fdc:	79fb      	ldrb	r3, [r7, #7]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff ff18 	bl	8001e14 <setDigit>
			  setTwo();
 8001fe4:	f7ff fa64 	bl	80014b0 <setTwo>
			  break;
 8001fe8:	e112      	b.n	8002210 <updateDisplay+0x398>
			case '3':
			  setDigit(i);
 8001fea:	79fb      	ldrb	r3, [r7, #7]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff ff11 	bl	8001e14 <setDigit>
			  setThree();
 8001ff2:	f7ff fa7b 	bl	80014ec <setThree>
			  break;
 8001ff6:	e10b      	b.n	8002210 <updateDisplay+0x398>
			case '4':
			  setDigit(i);
 8001ff8:	79fb      	ldrb	r3, [r7, #7]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7ff ff0a 	bl	8001e14 <setDigit>
			  setFour();
 8002000:	f7ff fa92 	bl	8001528 <setFour>
			  break;
 8002004:	e104      	b.n	8002210 <updateDisplay+0x398>
			case '5':
			  setDigit(i);
 8002006:	79fb      	ldrb	r3, [r7, #7]
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff ff03 	bl	8001e14 <setDigit>
			  setFive();
 800200e:	f7ff faa5 	bl	800155c <setFive>
			  break;
 8002012:	e0fd      	b.n	8002210 <updateDisplay+0x398>
			case '6':
			  setDigit(i);
 8002014:	79fb      	ldrb	r3, [r7, #7]
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff fefc 	bl	8001e14 <setDigit>
			  setSix();
 800201c:	f7ff fabc 	bl	8001598 <setSix>
			  break;
 8002020:	e0f6      	b.n	8002210 <updateDisplay+0x398>
			case '7':
			  setDigit(i);
 8002022:	79fb      	ldrb	r3, [r7, #7]
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff fef5 	bl	8001e14 <setDigit>
			  setSeven();
 800202a:	f7ff fad9 	bl	80015e0 <setSeven>
			  break;
 800202e:	e0ef      	b.n	8002210 <updateDisplay+0x398>
			case '8':
			  setDigit(i);
 8002030:	79fb      	ldrb	r3, [r7, #7]
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff feee 	bl	8001e14 <setDigit>
			  setEight();
 8002038:	f7ff fae6 	bl	8001608 <setEight>
			  break;
 800203c:	e0e8      	b.n	8002210 <updateDisplay+0x398>
			case '9':
			  setDigit(i);
 800203e:	79fb      	ldrb	r3, [r7, #7]
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff fee7 	bl	8001e14 <setDigit>
			  setNine();
 8002046:	f7ff fb09 	bl	800165c <setNine>
			  break;
 800204a:	e0e1      	b.n	8002210 <updateDisplay+0x398>
			case 'A':
			  setDigit(i);
 800204c:	79fb      	ldrb	r3, [r7, #7]
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff fee0 	bl	8001e14 <setDigit>
			  setA();
 8002054:	f7ff fb48 	bl	80016e8 <setA>
			  break;
 8002058:	e0da      	b.n	8002210 <updateDisplay+0x398>
			case 'a':
			  setDigit(i);
 800205a:	79fb      	ldrb	r3, [r7, #7]
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff fed9 	bl	8001e14 <setDigit>
			  seta();
 8002062:	f7ff fb67 	bl	8001734 <seta>
			  break;
 8002066:	e0d3      	b.n	8002210 <updateDisplay+0x398>
			case 'b':
			  setDigit(i);
 8002068:	79fb      	ldrb	r3, [r7, #7]
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff fed2 	bl	8001e14 <setDigit>
			  setb();
 8002070:	f7ff fb84 	bl	800177c <setb>
			  break;
 8002074:	e0cc      	b.n	8002210 <updateDisplay+0x398>
			case 'C':
			  setDigit(i);
 8002076:	79fb      	ldrb	r3, [r7, #7]
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff fecb 	bl	8001e14 <setDigit>
			  setC();
 800207e:	f7ff fb9d 	bl	80017bc <setC>
			  break;
 8002082:	e0c5      	b.n	8002210 <updateDisplay+0x398>
			case 'c':
			  setDigit(i);
 8002084:	79fb      	ldrb	r3, [r7, #7]
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff fec4 	bl	8001e14 <setDigit>
			  setc();
 800208c:	f7ff fbb0 	bl	80017f0 <setc>
			  break;
 8002090:	e0be      	b.n	8002210 <updateDisplay+0x398>
			case 'd':
			  setDigit(i);
 8002092:	79fb      	ldrb	r3, [r7, #7]
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff febd 	bl	8001e14 <setDigit>
			  setd();
 800209a:	f7ff fbbd 	bl	8001818 <setd>
			  break;
 800209e:	e0b7      	b.n	8002210 <updateDisplay+0x398>
			case 'E':
			  setDigit(i);
 80020a0:	79fb      	ldrb	r3, [r7, #7]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff feb6 	bl	8001e14 <setDigit>
			  setE();
 80020a8:	f7ff fbd6 	bl	8001858 <setE>
			  break;
 80020ac:	e0b0      	b.n	8002210 <updateDisplay+0x398>
			case 'F':
			  setDigit(i);
 80020ae:	79fb      	ldrb	r3, [r7, #7]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff feaf 	bl	8001e14 <setDigit>
			  setF();
 80020b6:	f7ff fbed 	bl	8001894 <setF>
			  break;
 80020ba:	e0a9      	b.n	8002210 <updateDisplay+0x398>
			case 'G':
			  setDigit(i);
 80020bc:	79fb      	ldrb	r3, [r7, #7]
 80020be:	4618      	mov	r0, r3
 80020c0:	f7ff fea8 	bl	8001e14 <setDigit>
			  setG();
 80020c4:	f7ff fc00 	bl	80018c8 <setG>
			  break;
 80020c8:	e0a2      	b.n	8002210 <updateDisplay+0x398>
			case 'H':
			  setDigit(i);
 80020ca:	79fb      	ldrb	r3, [r7, #7]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff fea1 	bl	8001e14 <setDigit>
			  setH();
 80020d2:	f7ff fc19 	bl	8001908 <setH>
			  break;
 80020d6:	e09b      	b.n	8002210 <updateDisplay+0x398>
			case 'h':
			  setDigit(i);
 80020d8:	79fb      	ldrb	r3, [r7, #7]
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff fe9a 	bl	8001e14 <setDigit>
			  seth();
 80020e0:	f7ff fc32 	bl	8001948 <seth>
			  break;
 80020e4:	e094      	b.n	8002210 <updateDisplay+0x398>
			case 'I':
			  setDigit(i);
 80020e6:	79fb      	ldrb	r3, [r7, #7]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff fe93 	bl	8001e14 <setDigit>
			  setI();
 80020ee:	f7ff fc47 	bl	8001980 <setI>
			  break;
 80020f2:	e08d      	b.n	8002210 <updateDisplay+0x398>
			case 'J':
			  setDigit(i);
 80020f4:	79fb      	ldrb	r3, [r7, #7]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff fe8c 	bl	8001e14 <setDigit>
			  setJ();
 80020fc:	f7ff fc50 	bl	80019a0 <setJ>
			  break;
 8002100:	e086      	b.n	8002210 <updateDisplay+0x398>
			case 'L':
			  setDigit(i);
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff fe85 	bl	8001e14 <setDigit>
			  setL();
 800210a:	f7ff fc65 	bl	80019d8 <setL>
			  break;
 800210e:	e07f      	b.n	8002210 <updateDisplay+0x398>
			case 'n':
			  setDigit(i);
 8002110:	79fb      	ldrb	r3, [r7, #7]
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff fe7e 	bl	8001e14 <setDigit>
			  setn();
 8002118:	f7ff fc74 	bl	8001a04 <setn>
			  break;
 800211c:	e078      	b.n	8002210 <updateDisplay+0x398>
			case 'O':
			  setDigit(i);
 800211e:	79fb      	ldrb	r3, [r7, #7]
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff fe77 	bl	8001e14 <setDigit>
			  setO();
 8002126:	f7ff fc83 	bl	8001a30 <setO>
			  break;
 800212a:	e071      	b.n	8002210 <updateDisplay+0x398>
			case 'o':
			  setDigit(i);
 800212c:	79fb      	ldrb	r3, [r7, #7]
 800212e:	4618      	mov	r0, r3
 8002130:	f7ff fe70 	bl	8001e14 <setDigit>
			  seto();
 8002134:	f7ff fca2 	bl	8001a7c <seto>
			  break;
 8002138:	e06a      	b.n	8002210 <updateDisplay+0x398>
			case 'P':
			  setDigit(i);
 800213a:	79fb      	ldrb	r3, [r7, #7]
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff fe69 	bl	8001e14 <setDigit>
			  setP();
 8002142:	f7ff fcb5 	bl	8001ab0 <setP>
			  break;
 8002146:	e063      	b.n	8002210 <updateDisplay+0x398>
			case 'q':
			  setDigit(i);
 8002148:	79fb      	ldrb	r3, [r7, #7]
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff fe62 	bl	8001e14 <setDigit>
			  setq();
 8002150:	f7ff fcce 	bl	8001af0 <setq>
			  break;
 8002154:	e05c      	b.n	8002210 <updateDisplay+0x398>
			case 'r':
			  setDigit(i);
 8002156:	79fb      	ldrb	r3, [r7, #7]
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff fe5b 	bl	8001e14 <setDigit>
			  setr();
 800215e:	f7ff fce7 	bl	8001b30 <setr>
			  break;
 8002162:	e055      	b.n	8002210 <updateDisplay+0x398>
			case 'S':
			  setDigit(i);
 8002164:	79fb      	ldrb	r3, [r7, #7]
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff fe54 	bl	8001e14 <setDigit>
			  setS();
 800216c:	f7ff fcf0 	bl	8001b50 <setS>
			  break;
 8002170:	e04e      	b.n	8002210 <updateDisplay+0x398>
			case 't':
			  setDigit(i);
 8002172:	79fb      	ldrb	r3, [r7, #7]
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff fe4d 	bl	8001e14 <setDigit>
			  sett();
 800217a:	f7ff fd07 	bl	8001b8c <sett>
			  break;
 800217e:	e047      	b.n	8002210 <updateDisplay+0x398>
			case 'U':
			  setDigit(i);
 8002180:	79fb      	ldrb	r3, [r7, #7]
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff fe46 	bl	8001e14 <setDigit>
			  setU();
 8002188:	f7ff fd1a 	bl	8001bc0 <setU>
			  break;
 800218c:	e040      	b.n	8002210 <updateDisplay+0x398>
			case 'u':
			  setDigit(i);
 800218e:	79fb      	ldrb	r3, [r7, #7]
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff fe3f 	bl	8001e14 <setDigit>
			  setu();
 8002196:	f7ff fd33 	bl	8001c00 <setu>
			  break;
 800219a:	e039      	b.n	8002210 <updateDisplay+0x398>
			case 'y':
			  setDigit(i);
 800219c:	79fb      	ldrb	r3, [r7, #7]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff fe38 	bl	8001e14 <setDigit>
			  sety();
 80021a4:	f7ff fd42 	bl	8001c2c <sety>
			  break;
 80021a8:	e032      	b.n	8002210 <updateDisplay+0x398>
			case 'K':
			  setDigit(i);
 80021aa:	79fb      	ldrb	r3, [r7, #7]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff fe31 	bl	8001e14 <setDigit>
			  setK();
 80021b2:	f7ff fd59 	bl	8001c68 <setK>
			  break;
 80021b6:	e02b      	b.n	8002210 <updateDisplay+0x398>
			case 'M':
			  setDigit(i);
 80021b8:	79fb      	ldrb	r3, [r7, #7]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff fe2a 	bl	8001e14 <setDigit>
			  setM();
 80021c0:	f7ff fd72 	bl	8001ca8 <setM>
			  break;
 80021c4:	e024      	b.n	8002210 <updateDisplay+0x398>
			case 'V':
			  setDigit(i);
 80021c6:	79fb      	ldrb	r3, [r7, #7]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff fe23 	bl	8001e14 <setDigit>
			  setV();
 80021ce:	f7ff fd85 	bl	8001cdc <setV>
			  break;
 80021d2:	e01d      	b.n	8002210 <updateDisplay+0x398>
 80021d4:	20000034 	.word	0x20000034
			case 'W':
			  setDigit(i);
 80021d8:	79fb      	ldrb	r3, [r7, #7]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff fe1a 	bl	8001e14 <setDigit>
			  setW();
 80021e0:	f7ff fd90 	bl	8001d04 <setW>
			  break;
 80021e4:	e014      	b.n	8002210 <updateDisplay+0x398>
			case 'X':
			  setDigit(i);
 80021e6:	79fb      	ldrb	r3, [r7, #7]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff fe13 	bl	8001e14 <setDigit>
			  setX();
 80021ee:	f7ff fdad 	bl	8001d4c <setX>
			  break;
 80021f2:	e00d      	b.n	8002210 <updateDisplay+0x398>
			case 'Z':
			  setDigit(i);
 80021f4:	79fb      	ldrb	r3, [r7, #7]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff fe0c 	bl	8001e14 <setDigit>
			  setZ();
 80021fc:	f7ff fdba 	bl	8001d74 <setZ>
			  break;
 8002200:	e006      	b.n	8002210 <updateDisplay+0x398>
			case '_':
			  setDigit(i);
 8002202:	79fb      	ldrb	r3, [r7, #7]
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff fe05 	bl	8001e14 <setDigit>
			  setUnderscore();
 800220a:	f7ff fdd1 	bl	8001db0 <setUnderscore>
			  break;
 800220e:	bf00      	nop
		}

		if(dDisplayData.resolution == i)
 8002210:	4b14      	ldr	r3, [pc, #80]	; (8002264 <updateDisplay+0x3ec>)
 8002212:	799b      	ldrb	r3, [r3, #6]
 8002214:	79fa      	ldrb	r2, [r7, #7]
 8002216:	429a      	cmp	r2, r3
 8002218:	d101      	bne.n	800221e <updateDisplay+0x3a6>
		{
			setDecimalPoint();
 800221a:	f7ff f92f 	bl	800147c <setDecimalPoint>
		}

		disp_time_saved = disp_time;
 800221e:	4b12      	ldr	r3, [pc, #72]	; (8002268 <updateDisplay+0x3f0>)
 8002220:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002224:	4a11      	ldr	r2, [pc, #68]	; (800226c <updateDisplay+0x3f4>)
 8002226:	e9c2 3400 	strd	r3, r4, [r2]
		while((disp_time_saved + 2) > disp_time){};
 800222a:	bf00      	nop
 800222c:	4b0f      	ldr	r3, [pc, #60]	; (800226c <updateDisplay+0x3f4>)
 800222e:	e9d3 1200 	ldrd	r1, r2, [r3]
 8002232:	1c8b      	adds	r3, r1, #2
 8002234:	f142 0400 	adc.w	r4, r2, #0
 8002238:	4a0b      	ldr	r2, [pc, #44]	; (8002268 <updateDisplay+0x3f0>)
 800223a:	e9d2 1200 	ldrd	r1, r2, [r2]
 800223e:	42a2      	cmp	r2, r4
 8002240:	bf08      	it	eq
 8002242:	4299      	cmpeq	r1, r3
 8002244:	d3f2      	bcc.n	800222c <updateDisplay+0x3b4>

		resetDigits();
 8002246:	f7ff f8fb 	bl	8001440 <resetDigits>
		resetSegments();
 800224a:	f7ff f8cb 	bl	80013e4 <resetSegments>
	for(uint8_t i = 0; i < 4; i++)
 800224e:	79fb      	ldrb	r3, [r7, #7]
 8002250:	3301      	adds	r3, #1
 8002252:	71fb      	strb	r3, [r7, #7]
 8002254:	79fb      	ldrb	r3, [r7, #7]
 8002256:	2b03      	cmp	r3, #3
 8002258:	f67f ae14 	bls.w	8001e84 <updateDisplay+0xc>
	}
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	bd90      	pop	{r4, r7, pc}
 8002264:	20000034 	.word	0x20000034
 8002268:	20000040 	.word	0x20000040
 800226c:	20000048 	.word	0x20000048

08002270 <TIM3_IRQHandler>:

//Update displayed data and keep display ON
void TIM3_IRQHandler(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
	if(LL_TIM_IsActiveFlag_UPDATE(TIM3))
 8002274:	4806      	ldr	r0, [pc, #24]	; (8002290 <TIM3_IRQHandler+0x20>)
 8002276:	f7ff f885 	bl	8001384 <LL_TIM_IsActiveFlag_UPDATE>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <TIM3_IRQHandler+0x14>
	{
		updateDisplay();
 8002280:	f7ff fdfa 	bl	8001e78 <updateDisplay>
	}

	LL_TIM_ClearFlag_UPDATE(TIM3);
 8002284:	4802      	ldr	r0, [pc, #8]	; (8002290 <TIM3_IRQHandler+0x20>)
 8002286:	f7ff f86f 	bl	8001368 <LL_TIM_ClearFlag_UPDATE>
}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40000400 	.word	0x40000400

08002294 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002298:	4b04      	ldr	r3, [pc, #16]	; (80022ac <NVIC_GetPriorityGrouping+0x18>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	0a1b      	lsrs	r3, r3, #8
 800229e:	f003 0307 	and.w	r3, r3, #7
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	e000ed00 	.word	0xe000ed00

080022b0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4603      	mov	r3, r0
 80022b8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80022ba:	79fb      	ldrb	r3, [r7, #7]
 80022bc:	f003 021f 	and.w	r2, r3, #31
 80022c0:	4907      	ldr	r1, [pc, #28]	; (80022e0 <NVIC_EnableIRQ+0x30>)
 80022c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c6:	095b      	lsrs	r3, r3, #5
 80022c8:	2001      	movs	r0, #1
 80022ca:	fa00 f202 	lsl.w	r2, r0, r2
 80022ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	e000e100 	.word	0xe000e100

080022e4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	6039      	str	r1, [r7, #0]
 80022ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80022f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	da0b      	bge.n	8002310 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	490c      	ldr	r1, [pc, #48]	; (8002330 <NVIC_SetPriority+0x4c>)
 80022fe:	79fb      	ldrb	r3, [r7, #7]
 8002300:	f003 030f 	and.w	r3, r3, #15
 8002304:	3b04      	subs	r3, #4
 8002306:	0112      	lsls	r2, r2, #4
 8002308:	b2d2      	uxtb	r2, r2
 800230a:	440b      	add	r3, r1
 800230c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800230e:	e009      	b.n	8002324 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	b2da      	uxtb	r2, r3
 8002314:	4907      	ldr	r1, [pc, #28]	; (8002334 <NVIC_SetPriority+0x50>)
 8002316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231a:	0112      	lsls	r2, r2, #4
 800231c:	b2d2      	uxtb	r2, r2
 800231e:	440b      	add	r3, r1
 8002320:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	e000ed00 	.word	0xe000ed00
 8002334:	e000e100 	.word	0xe000e100

08002338 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002338:	b480      	push	{r7}
 800233a:	b089      	sub	sp, #36	; 0x24
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	f1c3 0307 	rsb	r3, r3, #7
 8002352:	2b04      	cmp	r3, #4
 8002354:	bf28      	it	cs
 8002356:	2304      	movcs	r3, #4
 8002358:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	3304      	adds	r3, #4
 800235e:	2b06      	cmp	r3, #6
 8002360:	d902      	bls.n	8002368 <NVIC_EncodePriority+0x30>
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	3b03      	subs	r3, #3
 8002366:	e000      	b.n	800236a <NVIC_EncodePriority+0x32>
 8002368:	2300      	movs	r3, #0
 800236a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800236c:	f04f 32ff 	mov.w	r2, #4294967295
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	43da      	mvns	r2, r3
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	401a      	ands	r2, r3
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002380:	f04f 31ff 	mov.w	r1, #4294967295
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	fa01 f303 	lsl.w	r3, r1, r3
 800238a:	43d9      	mvns	r1, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002390:	4313      	orrs	r3, r2
         );
}
 8002392:	4618      	mov	r0, r3
 8002394:	3724      	adds	r7, #36	; 0x24
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
	...

080023a0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80023a8:	4b08      	ldr	r3, [pc, #32]	; (80023cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80023aa:	695a      	ldr	r2, [r3, #20]
 80023ac:	4907      	ldr	r1, [pc, #28]	; (80023cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80023b4:	4b05      	ldr	r3, [pc, #20]	; (80023cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80023b6:	695a      	ldr	r2, [r3, #20]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4013      	ands	r3, r2
 80023bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023be:	68fb      	ldr	r3, [r7, #12]
}
 80023c0:	bf00      	nop
 80023c2:	3714      	adds	r7, #20
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	40021000 	.word	0x40021000

080023d0 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 80023da:	4a12      	ldr	r2, [pc, #72]	; (8002424 <LL_SYSCFG_SetEXTISource+0x54>)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	3302      	adds	r3, #2
 80023e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	0c1b      	lsrs	r3, r3, #16
 80023ea:	43db      	mvns	r3, r3
 80023ec:	ea02 0103 	and.w	r1, r2, r3
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	0c1b      	lsrs	r3, r3, #16
 80023f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	fa93 f3a3 	rbit	r3, r3
 80023fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	fab3 f383 	clz	r3, r3
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	409a      	lsls	r2, r3
 8002408:	4806      	ldr	r0, [pc, #24]	; (8002424 <LL_SYSCFG_SetEXTISource+0x54>)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	b2db      	uxtb	r3, r3
 800240e:	430a      	orrs	r2, r1
 8002410:	3302      	adds	r3, #2
 8002412:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8002416:	bf00      	nop
 8002418:	3714      	adds	r7, #20
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	40010000 	.word	0x40010000

08002428 <LL_GPIO_SetPinMode>:
{
 8002428:	b480      	push	{r7}
 800242a:	b089      	sub	sp, #36	; 0x24
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	fa93 f3a3 	rbit	r3, r3
 8002442:	613b      	str	r3, [r7, #16]
  return(result);
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	fab3 f383 	clz	r3, r3
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	2103      	movs	r1, #3
 800244e:	fa01 f303 	lsl.w	r3, r1, r3
 8002452:	43db      	mvns	r3, r3
 8002454:	401a      	ands	r2, r3
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	fa93 f3a3 	rbit	r3, r3
 8002460:	61bb      	str	r3, [r7, #24]
  return(result);
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	fab3 f383 	clz	r3, r3
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	6879      	ldr	r1, [r7, #4]
 800246c:	fa01 f303 	lsl.w	r3, r1, r3
 8002470:	431a      	orrs	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	601a      	str	r2, [r3, #0]
}
 8002476:	bf00      	nop
 8002478:	3724      	adds	r7, #36	; 0x24
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <LL_GPIO_SetPinPull>:
{
 8002482:	b480      	push	{r7}
 8002484:	b089      	sub	sp, #36	; 0x24
 8002486:	af00      	add	r7, sp, #0
 8002488:	60f8      	str	r0, [r7, #12]
 800248a:	60b9      	str	r1, [r7, #8]
 800248c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	68da      	ldr	r2, [r3, #12]
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	fa93 f3a3 	rbit	r3, r3
 800249c:	613b      	str	r3, [r7, #16]
  return(result);
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	fab3 f383 	clz	r3, r3
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	2103      	movs	r1, #3
 80024a8:	fa01 f303 	lsl.w	r3, r1, r3
 80024ac:	43db      	mvns	r3, r3
 80024ae:	401a      	ands	r2, r3
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	fa93 f3a3 	rbit	r3, r3
 80024ba:	61bb      	str	r3, [r7, #24]
  return(result);
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	fab3 f383 	clz	r3, r3
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	6879      	ldr	r1, [r7, #4]
 80024c6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ca:	431a      	orrs	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	60da      	str	r2, [r3, #12]
}
 80024d0:	bf00      	nop
 80024d2:	3724      	adds	r7, #36	; 0x24
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <LL_GPIO_ResetOutputPin>:
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b08a      	sub	sp, #40	; 0x28
 80024fc:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80024fe:	f107 031c 	add.w	r3, r7, #28
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	605a      	str	r2, [r3, #4]
 8002508:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800250a:	1d3b      	adds	r3, r7, #4
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	605a      	str	r2, [r3, #4]
 8002512:	609a      	str	r2, [r3, #8]
 8002514:	60da      	str	r2, [r3, #12]
 8002516:	611a      	str	r2, [r3, #16]
 8002518:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800251a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800251e:	f7ff ff3f 	bl	80023a0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002522:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002526:	f7ff ff3b 	bl	80023a0 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, DISP_B_Pin|DISP_A_Pin|DISP_3_Pin|DISP_F_Pin
 800252a:	f641 119f 	movw	r1, #6559	; 0x199f
 800252e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002532:	f7ff ffd3 	bl	80024dc <LL_GPIO_ResetOutputPin>
                          |DISP_1_Pin|DISP_TIME_Pin|DISP_C_Pin|DISP_E_Pin
                          |DISP_2_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, DISP_0_Pin|DISP_DP_Pin|DISP_G_Pin|DISP_D_Pin);
 8002536:	2133      	movs	r1, #51	; 0x33
 8002538:	482b      	ldr	r0, [pc, #172]	; (80025e8 <MX_GPIO_Init+0xf0>)
 800253a:	f7ff ffcf 	bl	80024dc <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = DISP_B_Pin|DISP_A_Pin|DISP_3_Pin|DISP_F_Pin
 800253e:	f641 139f 	movw	r3, #6559	; 0x199f
 8002542:	607b      	str	r3, [r7, #4]
                          |DISP_1_Pin|DISP_TIME_Pin|DISP_C_Pin|DISP_E_Pin
                          |DISP_2_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002544:	2301      	movs	r3, #1
 8002546:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002548:	2300      	movs	r3, #0
 800254a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800254c:	2300      	movs	r3, #0
 800254e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002550:	2300      	movs	r3, #0
 8002552:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002554:	1d3b      	adds	r3, r7, #4
 8002556:	4619      	mov	r1, r3
 8002558:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800255c:	f7fe f947 	bl	80007ee <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_0_Pin|DISP_DP_Pin|DISP_G_Pin|DISP_D_Pin;
 8002560:	2333      	movs	r3, #51	; 0x33
 8002562:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002564:	2301      	movs	r3, #1
 8002566:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002568:	2300      	movs	r3, #0
 800256a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800256c:	2300      	movs	r3, #0
 800256e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002570:	2300      	movs	r3, #0
 8002572:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002574:	1d3b      	adds	r3, r7, #4
 8002576:	4619      	mov	r1, r3
 8002578:	481b      	ldr	r0, [pc, #108]	; (80025e8 <MX_GPIO_Init+0xf0>)
 800257a:	f7fe f938 	bl	80007ee <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE3);
 800257e:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 8002582:	2001      	movs	r0, #1
 8002584:	f7ff ff24 	bl	80023d0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(BUTTON_GPIO_Port, BUTTON_Pin, LL_GPIO_PULL_NO);
 8002588:	2200      	movs	r2, #0
 800258a:	2108      	movs	r1, #8
 800258c:	4816      	ldr	r0, [pc, #88]	; (80025e8 <MX_GPIO_Init+0xf0>)
 800258e:	f7ff ff78 	bl	8002482 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BUTTON_GPIO_Port, BUTTON_Pin, LL_GPIO_MODE_INPUT);
 8002592:	2200      	movs	r2, #0
 8002594:	2108      	movs	r1, #8
 8002596:	4814      	ldr	r0, [pc, #80]	; (80025e8 <MX_GPIO_Init+0xf0>)
 8002598:	f7ff ff46 	bl	8002428 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 800259c:	2308      	movs	r3, #8
 800259e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80025a0:	2300      	movs	r3, #0
 80025a2:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80025a4:	2301      	movs	r3, #1
 80025a6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80025aa:	2300      	movs	r3, #0
 80025ac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80025b0:	2301      	movs	r3, #1
 80025b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80025b6:	f107 031c 	add.w	r3, r7, #28
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7fd ff34 	bl	8000428 <LL_EXTI_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80025c0:	f7ff fe68 	bl	8002294 <NVIC_GetPriorityGrouping>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2200      	movs	r2, #0
 80025c8:	2100      	movs	r1, #0
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff feb4 	bl	8002338 <NVIC_EncodePriority>
 80025d0:	4603      	mov	r3, r0
 80025d2:	4619      	mov	r1, r3
 80025d4:	2009      	movs	r0, #9
 80025d6:	f7ff fe85 	bl	80022e4 <NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI3_IRQn);
 80025da:	2009      	movs	r0, #9
 80025dc:	f7ff fe68 	bl	80022b0 <NVIC_EnableIRQ>

}
 80025e0:	bf00      	nop
 80025e2:	3728      	adds	r7, #40	; 0x28
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	48000400 	.word	0x48000400

080025ec <NVIC_GetPriorityGrouping>:
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025f0:	4b04      	ldr	r3, [pc, #16]	; (8002604 <NVIC_GetPriorityGrouping+0x18>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	0a1b      	lsrs	r3, r3, #8
 80025f6:	f003 0307 	and.w	r3, r3, #7
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr
 8002604:	e000ed00 	.word	0xe000ed00

08002608 <NVIC_EnableIRQ>:
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	4603      	mov	r3, r0
 8002610:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002612:	79fb      	ldrb	r3, [r7, #7]
 8002614:	f003 021f 	and.w	r2, r3, #31
 8002618:	4907      	ldr	r1, [pc, #28]	; (8002638 <NVIC_EnableIRQ+0x30>)
 800261a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261e:	095b      	lsrs	r3, r3, #5
 8002620:	2001      	movs	r0, #1
 8002622:	fa00 f202 	lsl.w	r2, r0, r2
 8002626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800262a:	bf00      	nop
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	e000e100 	.word	0xe000e100

0800263c <NVIC_SetPriority>:
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	6039      	str	r1, [r7, #0]
 8002646:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264c:	2b00      	cmp	r3, #0
 800264e:	da0b      	bge.n	8002668 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	b2da      	uxtb	r2, r3
 8002654:	490c      	ldr	r1, [pc, #48]	; (8002688 <NVIC_SetPriority+0x4c>)
 8002656:	79fb      	ldrb	r3, [r7, #7]
 8002658:	f003 030f 	and.w	r3, r3, #15
 800265c:	3b04      	subs	r3, #4
 800265e:	0112      	lsls	r2, r2, #4
 8002660:	b2d2      	uxtb	r2, r2
 8002662:	440b      	add	r3, r1
 8002664:	761a      	strb	r2, [r3, #24]
}
 8002666:	e009      	b.n	800267c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	b2da      	uxtb	r2, r3
 800266c:	4907      	ldr	r1, [pc, #28]	; (800268c <NVIC_SetPriority+0x50>)
 800266e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002672:	0112      	lsls	r2, r2, #4
 8002674:	b2d2      	uxtb	r2, r2
 8002676:	440b      	add	r3, r1
 8002678:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	e000ed00 	.word	0xe000ed00
 800268c:	e000e100 	.word	0xe000e100

08002690 <NVIC_EncodePriority>:
{
 8002690:	b480      	push	{r7}
 8002692:	b089      	sub	sp, #36	; 0x24
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	f1c3 0307 	rsb	r3, r3, #7
 80026aa:	2b04      	cmp	r3, #4
 80026ac:	bf28      	it	cs
 80026ae:	2304      	movcs	r3, #4
 80026b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	3304      	adds	r3, #4
 80026b6:	2b06      	cmp	r3, #6
 80026b8:	d902      	bls.n	80026c0 <NVIC_EncodePriority+0x30>
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	3b03      	subs	r3, #3
 80026be:	e000      	b.n	80026c2 <NVIC_EncodePriority+0x32>
 80026c0:	2300      	movs	r3, #0
 80026c2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c4:	f04f 32ff 	mov.w	r2, #4294967295
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	43da      	mvns	r2, r3
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	401a      	ands	r2, r3
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026d8:	f04f 31ff 	mov.w	r1, #4294967295
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	fa01 f303 	lsl.w	r3, r1, r3
 80026e2:	43d9      	mvns	r1, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e8:	4313      	orrs	r3, r2
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3724      	adds	r7, #36	; 0x24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr

080026f6 <LL_I2C_Enable>:
{
 80026f6:	b480      	push	{r7}
 80026f8:	b083      	sub	sp, #12
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f043 0201 	orr.w	r2, r3, #1
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	601a      	str	r2, [r3, #0]
}
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <LL_I2C_EnableClockStretching>:
{
 8002716:	b480      	push	{r7}
 8002718:	b083      	sub	sp, #12
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	601a      	str	r2, [r3, #0]
}
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <LL_I2C_DisableGeneralCall>:
{
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	601a      	str	r2, [r3, #0]
}
 800274a:	bf00      	nop
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr

08002756 <LL_I2C_SetOwnAddress2>:
{
 8002756:	b480      	push	{r7}
 8002758:	b085      	sub	sp, #20
 800275a:	af00      	add	r7, sp, #0
 800275c:	60f8      	str	r0, [r7, #12]
 800275e:	60b9      	str	r1, [r7, #8]
 8002760:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800276a:	f023 0306 	bic.w	r3, r3, #6
 800276e:	68b9      	ldr	r1, [r7, #8]
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	430a      	orrs	r2, r1
 8002774:	431a      	orrs	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	60da      	str	r2, [r3, #12]
}
 800277a:	bf00      	nop
 800277c:	3714      	adds	r7, #20
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr

08002786 <LL_I2C_DisableOwnAddress2>:
{
 8002786:	b480      	push	{r7}
 8002788:	b083      	sub	sp, #12
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	60da      	str	r2, [r3, #12]
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <LL_I2C_EnableIT_RX>:
{
 80027a6:	b480      	push	{r7}
 80027a8:	b083      	sub	sp, #12
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f043 0204 	orr.w	r2, r3, #4
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	601a      	str	r2, [r3, #0]
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <LL_I2C_DisableIT_RX>:
{
 80027c6:	b480      	push	{r7}
 80027c8:	b083      	sub	sp, #12
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f023 0204 	bic.w	r2, r3, #4
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	601a      	str	r2, [r3, #0]
}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <LL_I2C_IsActiveFlag_TXIS>:
{
 80027e6:	b480      	push	{r7}
 80027e8:	b083      	sub	sp, #12
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS));
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	bf0c      	ite	eq
 80027fa:	2301      	moveq	r3, #1
 80027fc:	2300      	movne	r3, #0
 80027fe:	b2db      	uxtb	r3, r3
}
 8002800:	4618      	mov	r0, r3
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <LL_I2C_IsActiveFlag_RXNE>:
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE));
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	f003 0304 	and.w	r3, r3, #4
 800281c:	2b04      	cmp	r3, #4
 800281e:	bf0c      	ite	eq
 8002820:	2301      	moveq	r3, #1
 8002822:	2300      	movne	r3, #0
 8002824:	b2db      	uxtb	r3, r3
}
 8002826:	4618      	mov	r0, r3
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr

08002832 <LL_I2C_IsActiveFlag_STOP>:
{
 8002832:	b480      	push	{r7}
 8002834:	b083      	sub	sp, #12
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF));
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	f003 0320 	and.w	r3, r3, #32
 8002842:	2b20      	cmp	r3, #32
 8002844:	bf0c      	ite	eq
 8002846:	2301      	moveq	r3, #1
 8002848:	2300      	movne	r3, #0
 800284a:	b2db      	uxtb	r3, r3
}
 800284c:	4618      	mov	r0, r3
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <LL_I2C_ClearFlag_STOP>:
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	69db      	ldr	r3, [r3, #28]
 8002864:	f043 0220 	orr.w	r2, r3, #32
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	61da      	str	r2, [r3, #28]
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <LL_I2C_EnableAutoEndMode>:
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	605a      	str	r2, [r3, #4]
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
 80028a4:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	685a      	ldr	r2, [r3, #4]
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	0d5b      	lsrs	r3, r3, #21
 80028ae:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80028b2:	4b0b      	ldr	r3, [pc, #44]	; (80028e0 <LL_I2C_HandleTransfer+0x48>)
 80028b4:	430b      	orrs	r3, r1
 80028b6:	43db      	mvns	r3, r3
 80028b8:	401a      	ands	r2, r3
 80028ba:	68b9      	ldr	r1, [r7, #8]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4319      	orrs	r1, r3
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	041b      	lsls	r3, r3, #16
 80028c4:	4319      	orrs	r1, r3
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	4319      	orrs	r1, r3
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	430b      	orrs	r3, r1
 80028ce:	431a      	orrs	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	605a      	str	r2, [r3, #4]
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | TransferSize << I2C_CR2_NBYTES_Pos | EndMode | Request);
}
 80028d4:	bf00      	nop
 80028d6:	3714      	adds	r7, #20
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	03ff7bff 	.word	0x03ff7bff

080028e4 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f0:	b2db      	uxtb	r3, r3
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 80028fe:	b480      	push	{r7}
 8002900:	b083      	sub	sp, #12
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
 8002906:	460b      	mov	r3, r1
 8002908:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 800290a:	78fa      	ldrb	r2, [r7, #3]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <LL_AHB1_GRP1_EnableClock>:
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8002924:	4b08      	ldr	r3, [pc, #32]	; (8002948 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002926:	695a      	ldr	r2, [r3, #20]
 8002928:	4907      	ldr	r1, [pc, #28]	; (8002948 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4313      	orrs	r3, r2
 800292e:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8002930:	4b05      	ldr	r3, [pc, #20]	; (8002948 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002932:	695a      	ldr	r2, [r3, #20]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4013      	ands	r3, r2
 8002938:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800293a:	68fb      	ldr	r3, [r7, #12]
}
 800293c:	bf00      	nop
 800293e:	3714      	adds	r7, #20
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr
 8002948:	40021000 	.word	0x40021000

0800294c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8002954:	4b08      	ldr	r3, [pc, #32]	; (8002978 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002956:	69da      	ldr	r2, [r3, #28]
 8002958:	4907      	ldr	r1, [pc, #28]	; (8002978 <LL_APB1_GRP1_EnableClock+0x2c>)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4313      	orrs	r3, r2
 800295e:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002960:	4b05      	ldr	r3, [pc, #20]	; (8002978 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002962:	69da      	ldr	r2, [r3, #28]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4013      	ands	r3, r2
 8002968:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800296a:	68fb      	ldr	r3, [r7, #12]
}
 800296c:	bf00      	nop
 800296e:	3714      	adds	r7, #20
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr
 8002978:	40021000 	.word	0x40021000

0800297c <MX_I2C1_Init>:
volatile uint8_t ubReceiveIndex = 0;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b08e      	sub	sp, #56	; 0x38
 8002980:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8002982:	f107 031c 	add.w	r3, r7, #28
 8002986:	2200      	movs	r2, #0
 8002988:	601a      	str	r2, [r3, #0]
 800298a:	605a      	str	r2, [r3, #4]
 800298c:	609a      	str	r2, [r3, #8]
 800298e:	60da      	str	r2, [r3, #12]
 8002990:	611a      	str	r2, [r3, #16]
 8002992:	615a      	str	r2, [r3, #20]
 8002994:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002996:	1d3b      	adds	r3, r7, #4
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]
 800299c:	605a      	str	r2, [r3, #4]
 800299e:	609a      	str	r2, [r3, #8]
 80029a0:	60da      	str	r2, [r3, #12]
 80029a2:	611a      	str	r2, [r3, #16]
 80029a4:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80029a6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80029aa:	f7ff ffb7 	bl	800291c <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80029ae:	23c0      	movs	r3, #192	; 0xc0
 80029b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80029b2:	2302      	movs	r3, #2
 80029b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80029b6:	2303      	movs	r3, #3
 80029b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80029ba:	2301      	movs	r3, #1
 80029bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80029be:	2301      	movs	r3, #1
 80029c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80029c2:	2304      	movs	r3, #4
 80029c4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029c6:	1d3b      	adds	r3, r7, #4
 80029c8:	4619      	mov	r1, r3
 80029ca:	4821      	ldr	r0, [pc, #132]	; (8002a50 <MX_I2C1_Init+0xd4>)
 80029cc:	f7fd ff0f 	bl	80007ee <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 80029d0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80029d4:	f7ff ffba 	bl	800294c <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80029d8:	f7ff fe08 	bl	80025ec <NVIC_GetPriorityGrouping>
 80029dc:	4603      	mov	r3, r0
 80029de:	2200      	movs	r2, #0
 80029e0:	2100      	movs	r1, #0
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff fe54 	bl	8002690 <NVIC_EncodePriority>
 80029e8:	4603      	mov	r3, r0
 80029ea:	4619      	mov	r1, r3
 80029ec:	201f      	movs	r0, #31
 80029ee:	f7ff fe25 	bl	800263c <NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 80029f2:	201f      	movs	r0, #31
 80029f4:	f7ff fe08 	bl	8002608 <NVIC_EnableIRQ>

  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 80029f8:	4816      	ldr	r0, [pc, #88]	; (8002a54 <MX_I2C1_Init+0xd8>)
 80029fa:	f7ff ff3d 	bl	8002878 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 80029fe:	4815      	ldr	r0, [pc, #84]	; (8002a54 <MX_I2C1_Init+0xd8>)
 8002a00:	f7ff fec1 	bl	8002786 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8002a04:	4813      	ldr	r0, [pc, #76]	; (8002a54 <MX_I2C1_Init+0xd8>)
 8002a06:	f7ff fe96 	bl	8002736 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8002a0a:	4812      	ldr	r0, [pc, #72]	; (8002a54 <MX_I2C1_Init+0xd8>)
 8002a0c:	f7ff fe83 	bl	8002716 <LL_I2C_EnableClockStretching>

  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8002a10:	2300      	movs	r3, #0
 8002a12:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 8002a14:	4b10      	ldr	r3, [pc, #64]	; (8002a58 <MX_I2C1_Init+0xdc>)
 8002a16:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 8002a20:	2302      	movs	r3, #2
 8002a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8002a24:	2300      	movs	r3, #0
 8002a26:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8002a2c:	f107 031c 	add.w	r3, r7, #28
 8002a30:	4619      	mov	r1, r3
 8002a32:	4808      	ldr	r0, [pc, #32]	; (8002a54 <MX_I2C1_Init+0xd8>)
 8002a34:	f7fd fff8 	bl	8000a28 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8002a38:	2200      	movs	r2, #0
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	4805      	ldr	r0, [pc, #20]	; (8002a54 <MX_I2C1_Init+0xd8>)
 8002a3e:	f7ff fe8a 	bl	8002756 <LL_I2C_SetOwnAddress2>

  LL_I2C_Enable(I2C1);
 8002a42:	4804      	ldr	r0, [pc, #16]	; (8002a54 <MX_I2C1_Init+0xd8>)
 8002a44:	f7ff fe57 	bl	80026f6 <LL_I2C_Enable>
}
 8002a48:	bf00      	nop
 8002a4a:	3738      	adds	r7, #56	; 0x38
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	48000400 	.word	0x48000400
 8002a54:	40005400 	.word	0x40005400
 8002a58:	2000090e 	.word	0x2000090e

08002a5c <i2c_master_write>:

void i2c_master_write(uint8_t data, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8002a5c:	b590      	push	{r4, r7, lr}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af02      	add	r7, sp, #8
 8002a62:	4604      	mov	r4, r0
 8002a64:	4608      	mov	r0, r1
 8002a66:	4611      	mov	r1, r2
 8002a68:	461a      	mov	r2, r3
 8002a6a:	4623      	mov	r3, r4
 8002a6c:	71fb      	strb	r3, [r7, #7]
 8002a6e:	4603      	mov	r3, r0
 8002a70:	71bb      	strb	r3, [r7, #6]
 8002a72:	460b      	mov	r3, r1
 8002a74:	717b      	strb	r3, [r7, #5]
 8002a76:	4613      	mov	r3, r2
 8002a78:	713b      	strb	r3, [r7, #4]
	if(read_flag)
 8002a7a:	793b      	ldrb	r3, [r7, #4]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d003      	beq.n	8002a88 <i2c_master_write+0x2c>
	{
		register_addr |= (1 << 7);
 8002a80:	79bb      	ldrb	r3, [r7, #6]
 8002a82:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002a86:	71bb      	strb	r3, [r7, #6]
	}

	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8002a88:	7979      	ldrb	r1, [r7, #5]
 8002a8a:	4b14      	ldr	r3, [pc, #80]	; (8002adc <i2c_master_write+0x80>)
 8002a8c:	9301      	str	r3, [sp, #4]
 8002a8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a92:	9300      	str	r3, [sp, #0]
 8002a94:	2302      	movs	r3, #2
 8002a96:	2200      	movs	r2, #0
 8002a98:	4811      	ldr	r0, [pc, #68]	; (8002ae0 <i2c_master_write+0x84>)
 8002a9a:	f7ff fefd 	bl	8002898 <LL_I2C_HandleTransfer>

	LL_I2C_TransmitData8(I2C1, register_addr);
 8002a9e:	79bb      	ldrb	r3, [r7, #6]
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	480f      	ldr	r0, [pc, #60]	; (8002ae0 <i2c_master_write+0x84>)
 8002aa4:	f7ff ff2b 	bl	80028fe <LL_I2C_TransmitData8>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8002aa8:	e00a      	b.n	8002ac0 <i2c_master_write+0x64>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8002aaa:	480d      	ldr	r0, [pc, #52]	; (8002ae0 <i2c_master_write+0x84>)
 8002aac:	f7ff fe9b 	bl	80027e6 <LL_I2C_IsActiveFlag_TXIS>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d004      	beq.n	8002ac0 <i2c_master_write+0x64>
		{
			LL_I2C_TransmitData8(I2C1, data);
 8002ab6:	79fb      	ldrb	r3, [r7, #7]
 8002ab8:	4619      	mov	r1, r3
 8002aba:	4809      	ldr	r0, [pc, #36]	; (8002ae0 <i2c_master_write+0x84>)
 8002abc:	f7ff ff1f 	bl	80028fe <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8002ac0:	4807      	ldr	r0, [pc, #28]	; (8002ae0 <i2c_master_write+0x84>)
 8002ac2:	f7ff feb6 	bl	8002832 <LL_I2C_IsActiveFlag_STOP>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d0ee      	beq.n	8002aaa <i2c_master_write+0x4e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8002acc:	4804      	ldr	r0, [pc, #16]	; (8002ae0 <i2c_master_write+0x84>)
 8002ace:	f7ff fec3 	bl	8002858 <LL_I2C_ClearFlag_STOP>
}
 8002ad2:	bf00      	nop
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd90      	pop	{r4, r7, pc}
 8002ada:	bf00      	nop
 8002adc:	80002000 	.word	0x80002000
 8002ae0:	40005400 	.word	0x40005400

08002ae4 <i2c_master_read>:


uint8_t* i2c_master_read(uint8_t* buffer, uint8_t length, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af02      	add	r7, sp, #8
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	4608      	mov	r0, r1
 8002aee:	4611      	mov	r1, r2
 8002af0:	461a      	mov	r2, r3
 8002af2:	4603      	mov	r3, r0
 8002af4:	70fb      	strb	r3, [r7, #3]
 8002af6:	460b      	mov	r3, r1
 8002af8:	70bb      	strb	r3, [r7, #2]
 8002afa:	4613      	mov	r3, r2
 8002afc:	707b      	strb	r3, [r7, #1]
	aReceiveBuffer_read = buffer;
 8002afe:	4a31      	ldr	r2, [pc, #196]	; (8002bc4 <i2c_master_read+0xe0>)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6013      	str	r3, [r2, #0]

	if(read_flag)
 8002b04:	7c3b      	ldrb	r3, [r7, #16]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d003      	beq.n	8002b12 <i2c_master_read+0x2e>
	{
		register_addr |= (1 << 7);
 8002b0a:	78bb      	ldrb	r3, [r7, #2]
 8002b0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b10:	70bb      	strb	r3, [r7, #2]
	}

	end_of_read_flag = 0;
 8002b12:	4b2d      	ldr	r3, [pc, #180]	; (8002bc8 <i2c_master_read+0xe4>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	701a      	strb	r2, [r3, #0]

	LL_I2C_EnableIT_RX(I2C1);
 8002b18:	482c      	ldr	r0, [pc, #176]	; (8002bcc <i2c_master_read+0xe8>)
 8002b1a:	f7ff fe44 	bl	80027a6 <LL_I2C_EnableIT_RX>

	//poziadam slejva o citanie z jeho registra
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8002b1e:	7879      	ldrb	r1, [r7, #1]
 8002b20:	4b2b      	ldr	r3, [pc, #172]	; (8002bd0 <i2c_master_read+0xec>)
 8002b22:	9301      	str	r3, [sp, #4]
 8002b24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	4827      	ldr	r0, [pc, #156]	; (8002bcc <i2c_master_read+0xe8>)
 8002b30:	f7ff feb2 	bl	8002898 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8002b34:	e00a      	b.n	8002b4c <i2c_master_read+0x68>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8002b36:	4825      	ldr	r0, [pc, #148]	; (8002bcc <i2c_master_read+0xe8>)
 8002b38:	f7ff fe55 	bl	80027e6 <LL_I2C_IsActiveFlag_TXIS>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d004      	beq.n	8002b4c <i2c_master_read+0x68>
		{
			LL_I2C_TransmitData8(I2C1, register_addr);
 8002b42:	78bb      	ldrb	r3, [r7, #2]
 8002b44:	4619      	mov	r1, r3
 8002b46:	4821      	ldr	r0, [pc, #132]	; (8002bcc <i2c_master_read+0xe8>)
 8002b48:	f7ff fed9 	bl	80028fe <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8002b4c:	481f      	ldr	r0, [pc, #124]	; (8002bcc <i2c_master_read+0xe8>)
 8002b4e:	f7ff fe70 	bl	8002832 <LL_I2C_IsActiveFlag_STOP>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d0ee      	beq.n	8002b36 <i2c_master_read+0x52>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8002b58:	481c      	ldr	r0, [pc, #112]	; (8002bcc <i2c_master_read+0xe8>)
 8002b5a:	f7ff fe7d 	bl	8002858 <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){}
 8002b5e:	bf00      	nop
 8002b60:	481a      	ldr	r0, [pc, #104]	; (8002bcc <i2c_master_read+0xe8>)
 8002b62:	f7ff fe66 	bl	8002832 <LL_I2C_IsActiveFlag_STOP>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d1f9      	bne.n	8002b60 <i2c_master_read+0x7c>

	//citam register od slejva
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 8002b6c:	7879      	ldrb	r1, [r7, #1]
 8002b6e:	78fa      	ldrb	r2, [r7, #3]
 8002b70:	4b18      	ldr	r3, [pc, #96]	; (8002bd4 <i2c_master_read+0xf0>)
 8002b72:	9301      	str	r3, [sp, #4]
 8002b74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b78:	9300      	str	r3, [sp, #0]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	4813      	ldr	r0, [pc, #76]	; (8002bcc <i2c_master_read+0xe8>)
 8002b80:	f7ff fe8a 	bl	8002898 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 8002b84:	bf00      	nop
 8002b86:	4811      	ldr	r0, [pc, #68]	; (8002bcc <i2c_master_read+0xe8>)
 8002b88:	f7ff fe53 	bl	8002832 <LL_I2C_IsActiveFlag_STOP>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0f9      	beq.n	8002b86 <i2c_master_read+0xa2>

	//End of transfer
	LL_I2C_ClearFlag_STOP(I2C1);
 8002b92:	480e      	ldr	r0, [pc, #56]	; (8002bcc <i2c_master_read+0xe8>)
 8002b94:	f7ff fe60 	bl	8002858 <LL_I2C_ClearFlag_STOP>
	LL_I2C_DisableIT_RX(I2C1);
 8002b98:	480c      	ldr	r0, [pc, #48]	; (8002bcc <i2c_master_read+0xe8>)
 8002b9a:	f7ff fe14 	bl	80027c6 <LL_I2C_DisableIT_RX>
	I2C1->ICR |= (1 << 4);
 8002b9e:	4b0b      	ldr	r3, [pc, #44]	; (8002bcc <i2c_master_read+0xe8>)
 8002ba0:	69db      	ldr	r3, [r3, #28]
 8002ba2:	4a0a      	ldr	r2, [pc, #40]	; (8002bcc <i2c_master_read+0xe8>)
 8002ba4:	f043 0310 	orr.w	r3, r3, #16
 8002ba8:	61d3      	str	r3, [r2, #28]
	ubReceiveIndex = 0;
 8002baa:	4b0b      	ldr	r3, [pc, #44]	; (8002bd8 <i2c_master_read+0xf4>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	701a      	strb	r2, [r3, #0]
	end_of_read_flag = 1;
 8002bb0:	4b05      	ldr	r3, [pc, #20]	; (8002bc8 <i2c_master_read+0xe4>)
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	701a      	strb	r2, [r3, #0]

	return aReceiveBuffer_read;
 8002bb6:	4b03      	ldr	r3, [pc, #12]	; (8002bc4 <i2c_master_read+0xe0>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	20000054 	.word	0x20000054
 8002bc8:	20000050 	.word	0x20000050
 8002bcc:	40005400 	.word	0x40005400
 8002bd0:	80002000 	.word	0x80002000
 8002bd4:	80002400 	.word	0x80002400
 8002bd8:	20000051 	.word	0x20000051

08002bdc <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 8002bdc:	b598      	push	{r3, r4, r7, lr}
 8002bde:	af00      	add	r7, sp, #0
	/* Check RXNE flag value in ISR register */
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 8002be0:	4812      	ldr	r0, [pc, #72]	; (8002c2c <I2C1_EV_IRQHandler+0x50>)
 8002be2:	f7ff fe13 	bl	800280c <LL_I2C_IsActiveFlag_RXNE>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d01c      	beq.n	8002c26 <I2C1_EV_IRQHandler+0x4a>
	{
		/* Call function Master Reception Callback */
		aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 8002bec:	4b10      	ldr	r3, [pc, #64]	; (8002c30 <I2C1_EV_IRQHandler+0x54>)
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	4b10      	ldr	r3, [pc, #64]	; (8002c34 <I2C1_EV_IRQHandler+0x58>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	1c59      	adds	r1, r3, #1
 8002bf8:	b2c8      	uxtb	r0, r1
 8002bfa:	490e      	ldr	r1, [pc, #56]	; (8002c34 <I2C1_EV_IRQHandler+0x58>)
 8002bfc:	7008      	strb	r0, [r1, #0]
 8002bfe:	18d4      	adds	r4, r2, r3
 8002c00:	480a      	ldr	r0, [pc, #40]	; (8002c2c <I2C1_EV_IRQHandler+0x50>)
 8002c02:	f7ff fe6f 	bl	80028e4 <LL_I2C_ReceiveData8>
 8002c06:	4603      	mov	r3, r0
 8002c08:	7023      	strb	r3, [r4, #0]
		(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 8002c0a:	4b0a      	ldr	r3, [pc, #40]	; (8002c34 <I2C1_EV_IRQHandler+0x58>)
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b13      	cmp	r3, #19
 8002c12:	d903      	bls.n	8002c1c <I2C1_EV_IRQHandler+0x40>
 8002c14:	4b07      	ldr	r3, [pc, #28]	; (8002c34 <I2C1_EV_IRQHandler+0x58>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	701a      	strb	r2, [r3, #0]
 8002c1a:	e001      	b.n	8002c20 <I2C1_EV_IRQHandler+0x44>
 8002c1c:	4b05      	ldr	r3, [pc, #20]	; (8002c34 <I2C1_EV_IRQHandler+0x58>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
		end_of_read_flag = 0;
 8002c20:	4b05      	ldr	r3, [pc, #20]	; (8002c38 <I2C1_EV_IRQHandler+0x5c>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	701a      	strb	r2, [r3, #0]
	}
}
 8002c26:	bf00      	nop
 8002c28:	bd98      	pop	{r3, r4, r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40005400 	.word	0x40005400
 8002c30:	20000054 	.word	0x20000054
 8002c34:	20000051 	.word	0x20000051
 8002c38:	20000050 	.word	0x20000050

08002c3c <NVIC_SetPriorityGrouping>:
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c4c:	4b0c      	ldr	r3, [pc, #48]	; (8002c80 <NVIC_SetPriorityGrouping+0x44>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c52:	68ba      	ldr	r2, [r7, #8]
 8002c54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c58:	4013      	ands	r3, r2
 8002c5a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c6e:	4a04      	ldr	r2, [pc, #16]	; (8002c80 <NVIC_SetPriorityGrouping+0x44>)
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	60d3      	str	r3, [r2, #12]
}
 8002c74:	bf00      	nop
 8002c76:	3714      	adds	r7, #20
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	e000ed00 	.word	0xe000ed00

08002c84 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002c88:	4b05      	ldr	r3, [pc, #20]	; (8002ca0 <LL_RCC_HSI_Enable+0x1c>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a04      	ldr	r2, [pc, #16]	; (8002ca0 <LL_RCC_HSI_Enable+0x1c>)
 8002c8e:	f043 0301 	orr.w	r3, r3, #1
 8002c92:	6013      	str	r3, [r2, #0]
}
 8002c94:	bf00      	nop
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	40021000 	.word	0x40021000

08002ca4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002ca8:	4b06      	ldr	r3, [pc, #24]	; (8002cc4 <LL_RCC_HSI_IsReady+0x20>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	bf0c      	ite	eq
 8002cb4:	2301      	moveq	r3, #1
 8002cb6:	2300      	movne	r3, #0
 8002cb8:	b2db      	uxtb	r3, r3
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr
 8002cc4:	40021000 	.word	0x40021000

08002cc8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8002cd0:	4b07      	ldr	r3, [pc, #28]	; (8002cf0 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	4904      	ldr	r1, [pc, #16]	; (8002cf0 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	600b      	str	r3, [r1, #0]
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	40021000 	.word	0x40021000

08002cf4 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002cfc:	4b06      	ldr	r3, [pc, #24]	; (8002d18 <LL_RCC_SetSysClkSource+0x24>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f023 0203 	bic.w	r2, r3, #3
 8002d04:	4904      	ldr	r1, [pc, #16]	; (8002d18 <LL_RCC_SetSysClkSource+0x24>)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	604b      	str	r3, [r1, #4]
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	40021000 	.word	0x40021000

08002d1c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002d20:	4b04      	ldr	r3, [pc, #16]	; (8002d34 <LL_RCC_GetSysClkSource+0x18>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f003 030c 	and.w	r3, r3, #12
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	40021000 	.word	0x40021000

08002d38 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002d40:	4b06      	ldr	r3, [pc, #24]	; (8002d5c <LL_RCC_SetAHBPrescaler+0x24>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d48:	4904      	ldr	r1, [pc, #16]	; (8002d5c <LL_RCC_SetAHBPrescaler+0x24>)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	604b      	str	r3, [r1, #4]
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr
 8002d5c:	40021000 	.word	0x40021000

08002d60 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002d68:	4b06      	ldr	r3, [pc, #24]	; (8002d84 <LL_RCC_SetAPB1Prescaler+0x24>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d70:	4904      	ldr	r1, [pc, #16]	; (8002d84 <LL_RCC_SetAPB1Prescaler+0x24>)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	604b      	str	r3, [r1, #4]
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr
 8002d84:	40021000 	.word	0x40021000

08002d88 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002d90:	4b06      	ldr	r3, [pc, #24]	; (8002dac <LL_RCC_SetAPB2Prescaler+0x24>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d98:	4904      	ldr	r1, [pc, #16]	; (8002dac <LL_RCC_SetAPB2Prescaler+0x24>)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	604b      	str	r3, [r1, #4]
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr
 8002dac:	40021000 	.word	0x40021000

08002db0 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 8002db8:	4b08      	ldr	r3, [pc, #32]	; (8002ddc <LL_RCC_SetI2CClockSource+0x2c>)
 8002dba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	0e1b      	lsrs	r3, r3, #24
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	401a      	ands	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002dca:	4904      	ldr	r1, [pc, #16]	; (8002ddc <LL_RCC_SetI2CClockSource+0x2c>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	630b      	str	r3, [r1, #48]	; 0x30
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr
 8002ddc:	40021000 	.word	0x40021000

08002de0 <LL_APB1_GRP1_EnableClock>:
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002de8:	4b08      	ldr	r3, [pc, #32]	; (8002e0c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002dea:	69da      	ldr	r2, [r3, #28]
 8002dec:	4907      	ldr	r1, [pc, #28]	; (8002e0c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002df4:	4b05      	ldr	r3, [pc, #20]	; (8002e0c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002df6:	69da      	ldr	r2, [r3, #28]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
}
 8002e00:	bf00      	nop
 8002e02:	3714      	adds	r7, #20
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr
 8002e0c:	40021000 	.word	0x40021000

08002e10 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002e18:	4b08      	ldr	r3, [pc, #32]	; (8002e3c <LL_APB2_GRP1_EnableClock+0x2c>)
 8002e1a:	699a      	ldr	r2, [r3, #24]
 8002e1c:	4907      	ldr	r1, [pc, #28]	; (8002e3c <LL_APB2_GRP1_EnableClock+0x2c>)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002e24:	4b05      	ldr	r3, [pc, #20]	; (8002e3c <LL_APB2_GRP1_EnableClock+0x2c>)
 8002e26:	699a      	ldr	r2, [r3, #24]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
}
 8002e30:	bf00      	nop
 8002e32:	3714      	adds	r7, #20
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr
 8002e3c:	40021000 	.word	0x40021000

08002e40 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8002e48:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <LL_FLASH_SetLatency+0x24>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f023 0207 	bic.w	r2, r3, #7
 8002e50:	4904      	ldr	r1, [pc, #16]	; (8002e64 <LL_FLASH_SetLatency+0x24>)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	600b      	str	r3, [r1, #0]
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	40022000 	.word	0x40022000

08002e68 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8002e6c:	4b04      	ldr	r3, [pc, #16]	; (8002e80 <LL_FLASH_GetLatency+0x18>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0307 	and.w	r3, r3, #7
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	40022000 	.word	0x40022000

08002e84 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	d106      	bne.n	8002ea0 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8002e92:	4b09      	ldr	r3, [pc, #36]	; (8002eb8 <LL_SYSTICK_SetClkSource+0x34>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a08      	ldr	r2, [pc, #32]	; (8002eb8 <LL_SYSTICK_SetClkSource+0x34>)
 8002e98:	f043 0304 	orr.w	r3, r3, #4
 8002e9c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 8002e9e:	e005      	b.n	8002eac <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8002ea0:	4b05      	ldr	r3, [pc, #20]	; (8002eb8 <LL_SYSTICK_SetClkSource+0x34>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a04      	ldr	r2, [pc, #16]	; (8002eb8 <LL_SYSTICK_SetClkSource+0x34>)
 8002ea6:	f023 0304 	bic.w	r3, r3, #4
 8002eaa:	6013      	str	r3, [r2, #0]
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	e000e010 	.word	0xe000e010

08002ebc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8002ec2:	2001      	movs	r0, #1
 8002ec4:	f7ff ffa4 	bl	8002e10 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8002ec8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002ecc:	f7ff ff88 	bl	8002de0 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ed0:	2003      	movs	r0, #3
 8002ed2:	f7ff feb3 	bl	8002c3c <NVIC_SetPriorityGrouping>

  /* System interrupt init*/


  /* Configure the system clock */
  SystemClock_Config();
 8002ed6:	f000 f883 	bl	8002fe0 <SystemClock_Config>


  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002eda:	f7ff fb0d 	bl	80024f8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002ede:	f7ff fd4d 	bl	800297c <MX_I2C1_Init>
  MX_TIM3_Init();
 8002ee2:	f000 fb1d 	bl	8003520 <MX_TIM3_Init>

  lsm6ds0_init();
 8002ee6:	f000 fc51 	bl	800378c <lsm6ds0_init>
  /* Infinite loop */

  while (1)
  {
	  //os			   x      y        z
	  lsm6ds0_get_acc(acc, (acc+1), (acc+2));
 8002eea:	4b35      	ldr	r3, [pc, #212]	; (8002fc0 <main+0x104>)
 8002eec:	4a35      	ldr	r2, [pc, #212]	; (8002fc4 <main+0x108>)
 8002eee:	4619      	mov	r1, r3
 8002ef0:	4835      	ldr	r0, [pc, #212]	; (8002fc8 <main+0x10c>)
 8002ef2:	f000 fbe9 	bl	80036c8 <lsm6ds0_get_acc>

	  if(backwards) {
 8002ef6:	4b35      	ldr	r3, [pc, #212]	; (8002fcc <main+0x110>)
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d020      	beq.n	8002f40 <main+0x84>
		  for (uint8_t i = 0; i < 4; i++) {
 8002efe:	2300      	movs	r3, #0
 8002f00:	71fb      	strb	r3, [r7, #7]
 8002f02:	e00c      	b.n	8002f1e <main+0x62>
			  string_disp[i] = string[pos-2+i];
 8002f04:	4b32      	ldr	r3, [pc, #200]	; (8002fd0 <main+0x114>)
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	1e9a      	subs	r2, r3, #2
 8002f0a:	79fb      	ldrb	r3, [r7, #7]
 8002f0c:	441a      	add	r2, r3
 8002f0e:	79fb      	ldrb	r3, [r7, #7]
 8002f10:	4930      	ldr	r1, [pc, #192]	; (8002fd4 <main+0x118>)
 8002f12:	5c89      	ldrb	r1, [r1, r2]
 8002f14:	4a30      	ldr	r2, [pc, #192]	; (8002fd8 <main+0x11c>)
 8002f16:	54d1      	strb	r1, [r2, r3]
		  for (uint8_t i = 0; i < 4; i++) {
 8002f18:	79fb      	ldrb	r3, [r7, #7]
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	71fb      	strb	r3, [r7, #7]
 8002f1e:	79fb      	ldrb	r3, [r7, #7]
 8002f20:	2b03      	cmp	r3, #3
 8002f22:	d9ef      	bls.n	8002f04 <main+0x48>
		  }

		  --pos;
 8002f24:	4b2a      	ldr	r3, [pc, #168]	; (8002fd0 <main+0x114>)
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	b2da      	uxtb	r2, r3
 8002f2c:	4b28      	ldr	r3, [pc, #160]	; (8002fd0 <main+0x114>)
 8002f2e:	701a      	strb	r2, [r3, #0]

		  if (pos <= 1) {
 8002f30:	4b27      	ldr	r3, [pc, #156]	; (8002fd0 <main+0x114>)
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d823      	bhi.n	8002f80 <main+0xc4>
			  backwards = 0;
 8002f38:	4b24      	ldr	r3, [pc, #144]	; (8002fcc <main+0x110>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	701a      	strb	r2, [r3, #0]
 8002f3e:	e01f      	b.n	8002f80 <main+0xc4>
		  }
	  }

	  else {
		  for (uint8_t i = 0; i < 4; i++) {
 8002f40:	2300      	movs	r3, #0
 8002f42:	71bb      	strb	r3, [r7, #6]
 8002f44:	e00c      	b.n	8002f60 <main+0xa4>
			  string_disp[i] = string[pos+i];
 8002f46:	4b22      	ldr	r3, [pc, #136]	; (8002fd0 <main+0x114>)
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	79bb      	ldrb	r3, [r7, #6]
 8002f4e:	441a      	add	r2, r3
 8002f50:	79bb      	ldrb	r3, [r7, #6]
 8002f52:	4920      	ldr	r1, [pc, #128]	; (8002fd4 <main+0x118>)
 8002f54:	5c89      	ldrb	r1, [r1, r2]
 8002f56:	4a20      	ldr	r2, [pc, #128]	; (8002fd8 <main+0x11c>)
 8002f58:	54d1      	strb	r1, [r2, r3]
		  for (uint8_t i = 0; i < 4; i++) {
 8002f5a:	79bb      	ldrb	r3, [r7, #6]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	71bb      	strb	r3, [r7, #6]
 8002f60:	79bb      	ldrb	r3, [r7, #6]
 8002f62:	2b03      	cmp	r3, #3
 8002f64:	d9ef      	bls.n	8002f46 <main+0x8a>
		  }

		  ++pos;
 8002f66:	4b1a      	ldr	r3, [pc, #104]	; (8002fd0 <main+0x114>)
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	b2da      	uxtb	r2, r3
 8002f6e:	4b18      	ldr	r3, [pc, #96]	; (8002fd0 <main+0x114>)
 8002f70:	701a      	strb	r2, [r3, #0]

		  if (pos >= (sizeof(string)/sizeof(string[1])-4)) {
 8002f72:	4b17      	ldr	r3, [pc, #92]	; (8002fd0 <main+0x114>)
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d902      	bls.n	8002f80 <main+0xc4>
			  backwards = 1;
 8002f7a:	4b14      	ldr	r3, [pc, #80]	; (8002fcc <main+0x110>)
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  if (switch_state == 1) displayNumber(acc);
 8002f80:	4b16      	ldr	r3, [pc, #88]	; (8002fdc <main+0x120>)
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d102      	bne.n	8002f8e <main+0xd2>
 8002f88:	480f      	ldr	r0, [pc, #60]	; (8002fc8 <main+0x10c>)
 8002f8a:	f7fe ff1b 	bl	8001dc4 <displayNumber>
	  if (switch_state == 2) displayNumber(acc+1);
 8002f8e:	4b13      	ldr	r3, [pc, #76]	; (8002fdc <main+0x120>)
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d103      	bne.n	8002f9e <main+0xe2>
 8002f96:	4b0a      	ldr	r3, [pc, #40]	; (8002fc0 <main+0x104>)
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7fe ff13 	bl	8001dc4 <displayNumber>
	  if (switch_state == 3) displayNumber(acc+2);
 8002f9e:	4b0f      	ldr	r3, [pc, #60]	; (8002fdc <main+0x120>)
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	2b03      	cmp	r3, #3
 8002fa4:	d104      	bne.n	8002fb0 <main+0xf4>
 8002fa6:	4b07      	ldr	r3, [pc, #28]	; (8002fc4 <main+0x108>)
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7fe ff0b 	bl	8001dc4 <displayNumber>
 8002fae:	e002      	b.n	8002fb6 <main+0xfa>
	  else displayNumber(string_disp);
 8002fb0:	4809      	ldr	r0, [pc, #36]	; (8002fd8 <main+0x11c>)
 8002fb2:	f7fe ff07 	bl	8001dc4 <displayNumber>

	  LL_mDelay(50);
 8002fb6:	2032      	movs	r0, #50	; 0x32
 8002fb8:	f7fe f9a2 	bl	8001300 <LL_mDelay>
	  lsm6ds0_get_acc(acc, (acc+1), (acc+2));
 8002fbc:	e795      	b.n	8002eea <main+0x2e>
 8002fbe:	bf00      	nop
 8002fc0:	2000005c 	.word	0x2000005c
 8002fc4:	20000060 	.word	0x20000060
 8002fc8:	20000058 	.word	0x20000058
 8002fcc:	20000053 	.word	0x20000053
 8002fd0:	20000052 	.word	0x20000052
 8002fd4:	20000004 	.word	0x20000004
 8002fd8:	20000064 	.word	0x20000064
 8002fdc:	20000000 	.word	0x20000000

08002fe0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8002fe4:	2000      	movs	r0, #0
 8002fe6:	f7ff ff2b 	bl	8002e40 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8002fea:	f7ff ff3d 	bl	8002e68 <LL_FLASH_GetLatency>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <SystemClock_Config+0x18>
  {
  Error_Handler();
 8002ff4:	f000 f82e 	bl	8003054 <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 8002ff8:	f7ff fe44 	bl	8002c84 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8002ffc:	bf00      	nop
 8002ffe:	f7ff fe51 	bl	8002ca4 <LL_RCC_HSI_IsReady>
 8003002:	4603      	mov	r3, r0
 8003004:	2b01      	cmp	r3, #1
 8003006:	d1fa      	bne.n	8002ffe <SystemClock_Config+0x1e>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8003008:	2010      	movs	r0, #16
 800300a:	f7ff fe5d 	bl	8002cc8 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800300e:	2000      	movs	r0, #0
 8003010:	f7ff fe92 	bl	8002d38 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8003014:	2000      	movs	r0, #0
 8003016:	f7ff fea3 	bl	8002d60 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 800301a:	2000      	movs	r0, #0
 800301c:	f7ff feb4 	bl	8002d88 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8003020:	2000      	movs	r0, #0
 8003022:	f7ff fe67 	bl	8002cf4 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8003026:	bf00      	nop
 8003028:	f7ff fe78 	bl	8002d1c <LL_RCC_GetSysClkSource>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1fa      	bne.n	8003028 <SystemClock_Config+0x48>
  {

  }
  LL_Init1msTick(8000000);
 8003032:	4807      	ldr	r0, [pc, #28]	; (8003050 <SystemClock_Config+0x70>)
 8003034:	f7fe f956 	bl	80012e4 <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8003038:	2004      	movs	r0, #4
 800303a:	f7ff ff23 	bl	8002e84 <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(8000000);
 800303e:	4804      	ldr	r0, [pc, #16]	; (8003050 <SystemClock_Config+0x70>)
 8003040:	f7fe f982 	bl	8001348 <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8003044:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003048:	f7ff feb2 	bl	8002db0 <LL_RCC_SetI2CClockSource>
}
 800304c:	bf00      	nop
 800304e:	bd80      	pop	{r7, pc}
 8003050:	007a1200 	.word	0x007a1200

08003054 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003058:	bf00      	nop
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
	...

08003064 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 800306c:	4b07      	ldr	r3, [pc, #28]	; (800308c <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800306e:	695a      	ldr	r2, [r3, #20]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4013      	ands	r3, r2
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	429a      	cmp	r2, r3
 8003078:	bf0c      	ite	eq
 800307a:	2301      	moveq	r3, #1
 800307c:	2300      	movne	r3, #0
 800307e:	b2db      	uxtb	r3, r3
}
 8003080:	4618      	mov	r0, r3
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	40010400 	.word	0x40010400

08003090 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8003098:	4a04      	ldr	r2, [pc, #16]	; (80030ac <LL_EXTI_ClearFlag_0_31+0x1c>)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6153      	str	r3, [r2, #20]
}
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	40010400 	.word	0x40010400

080030b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80030b4:	bf00      	nop
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr

080030be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030be:	b480      	push	{r7}
 80030c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030c2:	e7fe      	b.n	80030c2 <HardFault_Handler+0x4>

080030c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030c8:	e7fe      	b.n	80030c8 <MemManage_Handler+0x4>

080030ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030ca:	b480      	push	{r7}
 80030cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030ce:	e7fe      	b.n	80030ce <BusFault_Handler+0x4>

080030d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030d4:	e7fe      	b.n	80030d4 <UsageFault_Handler+0x4>

080030d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030d6:	b480      	push	{r7}
 80030d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030da:	bf00      	nop
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030e8:	bf00      	nop
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr

080030f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030f2:	b480      	push	{r7}
 80030f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030f6:	bf00      	nop
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003104:	bf00      	nop
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
	...

08003110 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af02      	add	r7, sp, #8
	if(checkButtonState(GPIO_PORT_BUTTON,
 8003116:	2314      	movs	r3, #20
 8003118:	9300      	str	r3, [sp, #0]
 800311a:	231e      	movs	r3, #30
 800311c:	2200      	movs	r2, #0
 800311e:	2103      	movs	r1, #3
 8003120:	480f      	ldr	r0, [pc, #60]	; (8003160 <EXTI3_IRQHandler+0x50>)
 8003122:	f000 f821 	bl	8003168 <checkButtonState>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00c      	beq.n	8003146 <EXTI3_IRQHandler+0x36>
													GPIO_PIN_BUTTON,
													BUTTON_EXTI_TRIGGER,
													BUTTON_EXTI_SAMPLES_WINDOW,
													BUTTON_EXTI_SAMPLES_REQUIRED))
			{
		if (switch_state == 5) switch_state = 1;
 800312c:	4b0d      	ldr	r3, [pc, #52]	; (8003164 <EXTI3_IRQHandler+0x54>)
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	2b05      	cmp	r3, #5
 8003132:	d102      	bne.n	800313a <EXTI3_IRQHandler+0x2a>
 8003134:	4b0b      	ldr	r3, [pc, #44]	; (8003164 <EXTI3_IRQHandler+0x54>)
 8003136:	2201      	movs	r2, #1
 8003138:	701a      	strb	r2, [r3, #0]
		switch_state++;   // todo:change state machine
 800313a:	4b0a      	ldr	r3, [pc, #40]	; (8003164 <EXTI3_IRQHandler+0x54>)
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	3301      	adds	r3, #1
 8003140:	b2da      	uxtb	r2, r3
 8003142:	4b08      	ldr	r3, [pc, #32]	; (8003164 <EXTI3_IRQHandler+0x54>)
 8003144:	701a      	strb	r2, [r3, #0]
			}


	  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_3) != RESET)
 8003146:	2008      	movs	r0, #8
 8003148:	f7ff ff8c 	bl	8003064 <LL_EXTI_IsActiveFlag_0_31>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d002      	beq.n	8003158 <EXTI3_IRQHandler+0x48>
	  {
	    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_3);
 8003152:	2008      	movs	r0, #8
 8003154:	f7ff ff9c 	bl	8003090 <LL_EXTI_ClearFlag_0_31>

	  }
}
 8003158:	bf00      	nop
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	48000400 	.word	0x48000400
 8003164:	20000000 	.word	0x20000000

08003168 <checkButtonState>:
//
//  /* USER CODE END I2C1_EV_IRQn 1 */
//}

uint8_t checkButtonState(GPIO_TypeDef* PORT, uint8_t PIN, uint8_t edge, uint8_t samples_window, uint8_t samples_required)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	4608      	mov	r0, r1
 8003172:	4611      	mov	r1, r2
 8003174:	461a      	mov	r2, r3
 8003176:	4603      	mov	r3, r0
 8003178:	70fb      	strb	r3, [r7, #3]
 800317a:	460b      	mov	r3, r1
 800317c:	70bb      	strb	r3, [r7, #2]
 800317e:	4613      	mov	r3, r2
 8003180:	707b      	strb	r3, [r7, #1]
	uint8_t button_state = 0, it = 0;
 8003182:	2300      	movs	r3, #0
 8003184:	73fb      	strb	r3, [r7, #15]
 8003186:	2300      	movs	r3, #0
 8003188:	73bb      	strb	r3, [r7, #14]

	while(it < samples_window)
 800318a:	e01b      	b.n	80031c4 <checkButtonState+0x5c>
	{
		if((!(PORT->IDR & (1 << PIN)) == edge) /*LL_GPIO_IsInputPinSet(PORT, PIN)*/)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	78fa      	ldrb	r2, [r7, #3]
 8003192:	2101      	movs	r1, #1
 8003194:	fa01 f202 	lsl.w	r2, r1, r2
 8003198:	4013      	ands	r3, r2
 800319a:	2b00      	cmp	r3, #0
 800319c:	bf0c      	ite	eq
 800319e:	2301      	moveq	r3, #1
 80031a0:	2300      	movne	r3, #0
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	461a      	mov	r2, r3
 80031a6:	78bb      	ldrb	r3, [r7, #2]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d103      	bne.n	80031b4 <checkButtonState+0x4c>
		{
			button_state += 1;
 80031ac:	7bfb      	ldrb	r3, [r7, #15]
 80031ae:	3301      	adds	r3, #1
 80031b0:	73fb      	strb	r3, [r7, #15]
 80031b2:	e001      	b.n	80031b8 <checkButtonState+0x50>
		}
		else
		{
			button_state = 0;
 80031b4:	2300      	movs	r3, #0
 80031b6:	73fb      	strb	r3, [r7, #15]
		}

		it++;
 80031b8:	7bbb      	ldrb	r3, [r7, #14]
 80031ba:	3301      	adds	r3, #1
 80031bc:	73bb      	strb	r3, [r7, #14]
		LL_mDelay(1);
 80031be:	2001      	movs	r0, #1
 80031c0:	f7fe f89e 	bl	8001300 <LL_mDelay>
	while(it < samples_window)
 80031c4:	7bba      	ldrb	r2, [r7, #14]
 80031c6:	787b      	ldrb	r3, [r7, #1]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d3df      	bcc.n	800318c <checkButtonState+0x24>
	}

	if(button_state >= samples_required)
 80031cc:	7bfa      	ldrb	r2, [r7, #15]
 80031ce:	7e3b      	ldrb	r3, [r7, #24]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d301      	bcc.n	80031d8 <checkButtonState+0x70>
	{
		return 1;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e000      	b.n	80031da <checkButtonState+0x72>
	}

	else
	{
		return 0;
 80031d8:	2300      	movs	r3, #0
	}
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
	...

080031e4 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031e8:	4b1f      	ldr	r3, [pc, #124]	; (8003268 <SystemInit+0x84>)
 80031ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ee:	4a1e      	ldr	r2, [pc, #120]	; (8003268 <SystemInit+0x84>)
 80031f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80031f8:	4b1c      	ldr	r3, [pc, #112]	; (800326c <SystemInit+0x88>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a1b      	ldr	r2, [pc, #108]	; (800326c <SystemInit+0x88>)
 80031fe:	f043 0301 	orr.w	r3, r3, #1
 8003202:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8003204:	4b19      	ldr	r3, [pc, #100]	; (800326c <SystemInit+0x88>)
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	4918      	ldr	r1, [pc, #96]	; (800326c <SystemInit+0x88>)
 800320a:	4b19      	ldr	r3, [pc, #100]	; (8003270 <SystemInit+0x8c>)
 800320c:	4013      	ands	r3, r2
 800320e:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003210:	4b16      	ldr	r3, [pc, #88]	; (800326c <SystemInit+0x88>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a15      	ldr	r2, [pc, #84]	; (800326c <SystemInit+0x88>)
 8003216:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800321a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800321e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003220:	4b12      	ldr	r3, [pc, #72]	; (800326c <SystemInit+0x88>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a11      	ldr	r2, [pc, #68]	; (800326c <SystemInit+0x88>)
 8003226:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800322a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800322c:	4b0f      	ldr	r3, [pc, #60]	; (800326c <SystemInit+0x88>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	4a0e      	ldr	r2, [pc, #56]	; (800326c <SystemInit+0x88>)
 8003232:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003236:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8003238:	4b0c      	ldr	r3, [pc, #48]	; (800326c <SystemInit+0x88>)
 800323a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323c:	4a0b      	ldr	r2, [pc, #44]	; (800326c <SystemInit+0x88>)
 800323e:	f023 030f 	bic.w	r3, r3, #15
 8003242:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8003244:	4b09      	ldr	r3, [pc, #36]	; (800326c <SystemInit+0x88>)
 8003246:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003248:	4908      	ldr	r1, [pc, #32]	; (800326c <SystemInit+0x88>)
 800324a:	4b0a      	ldr	r3, [pc, #40]	; (8003274 <SystemInit+0x90>)
 800324c:	4013      	ands	r3, r2
 800324e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8003250:	4b06      	ldr	r3, [pc, #24]	; (800326c <SystemInit+0x88>)
 8003252:	2200      	movs	r2, #0
 8003254:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003256:	4b04      	ldr	r3, [pc, #16]	; (8003268 <SystemInit+0x84>)
 8003258:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800325c:	609a      	str	r2, [r3, #8]
#endif
}
 800325e:	bf00      	nop
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr
 8003268:	e000ed00 	.word	0xe000ed00
 800326c:	40021000 	.word	0x40021000
 8003270:	f87fc00c 	.word	0xf87fc00c
 8003274:	ff00fccc 	.word	0xff00fccc

08003278 <NVIC_GetPriorityGrouping>:
{
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800327c:	4b04      	ldr	r3, [pc, #16]	; (8003290 <NVIC_GetPriorityGrouping+0x18>)
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	0a1b      	lsrs	r3, r3, #8
 8003282:	f003 0307 	and.w	r3, r3, #7
}
 8003286:	4618      	mov	r0, r3
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	e000ed00 	.word	0xe000ed00

08003294 <NVIC_EnableIRQ>:
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	4603      	mov	r3, r0
 800329c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800329e:	79fb      	ldrb	r3, [r7, #7]
 80032a0:	f003 021f 	and.w	r2, r3, #31
 80032a4:	4907      	ldr	r1, [pc, #28]	; (80032c4 <NVIC_EnableIRQ+0x30>)
 80032a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032aa:	095b      	lsrs	r3, r3, #5
 80032ac:	2001      	movs	r0, #1
 80032ae:	fa00 f202 	lsl.w	r2, r0, r2
 80032b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80032b6:	bf00      	nop
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	e000e100 	.word	0xe000e100

080032c8 <NVIC_SetPriority>:
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	4603      	mov	r3, r0
 80032d0:	6039      	str	r1, [r7, #0]
 80032d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80032d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	da0b      	bge.n	80032f4 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	b2da      	uxtb	r2, r3
 80032e0:	490c      	ldr	r1, [pc, #48]	; (8003314 <NVIC_SetPriority+0x4c>)
 80032e2:	79fb      	ldrb	r3, [r7, #7]
 80032e4:	f003 030f 	and.w	r3, r3, #15
 80032e8:	3b04      	subs	r3, #4
 80032ea:	0112      	lsls	r2, r2, #4
 80032ec:	b2d2      	uxtb	r2, r2
 80032ee:	440b      	add	r3, r1
 80032f0:	761a      	strb	r2, [r3, #24]
}
 80032f2:	e009      	b.n	8003308 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	b2da      	uxtb	r2, r3
 80032f8:	4907      	ldr	r1, [pc, #28]	; (8003318 <NVIC_SetPriority+0x50>)
 80032fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032fe:	0112      	lsls	r2, r2, #4
 8003300:	b2d2      	uxtb	r2, r2
 8003302:	440b      	add	r3, r1
 8003304:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr
 8003314:	e000ed00 	.word	0xe000ed00
 8003318:	e000e100 	.word	0xe000e100

0800331c <NVIC_EncodePriority>:
{
 800331c:	b480      	push	{r7}
 800331e:	b089      	sub	sp, #36	; 0x24
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f003 0307 	and.w	r3, r3, #7
 800332e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	f1c3 0307 	rsb	r3, r3, #7
 8003336:	2b04      	cmp	r3, #4
 8003338:	bf28      	it	cs
 800333a:	2304      	movcs	r3, #4
 800333c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	3304      	adds	r3, #4
 8003342:	2b06      	cmp	r3, #6
 8003344:	d902      	bls.n	800334c <NVIC_EncodePriority+0x30>
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	3b03      	subs	r3, #3
 800334a:	e000      	b.n	800334e <NVIC_EncodePriority+0x32>
 800334c:	2300      	movs	r3, #0
 800334e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003350:	f04f 32ff 	mov.w	r2, #4294967295
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	fa02 f303 	lsl.w	r3, r2, r3
 800335a:	43da      	mvns	r2, r3
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	401a      	ands	r2, r3
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003364:	f04f 31ff 	mov.w	r1, #4294967295
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	fa01 f303 	lsl.w	r3, r1, r3
 800336e:	43d9      	mvns	r1, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003374:	4313      	orrs	r3, r2
}
 8003376:	4618      	mov	r0, r3
 8003378:	3724      	adds	r7, #36	; 0x24
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
	...

08003384 <LL_APB1_GRP1_EnableClock>:
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800338c:	4b08      	ldr	r3, [pc, #32]	; (80033b0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800338e:	69da      	ldr	r2, [r3, #28]
 8003390:	4907      	ldr	r1, [pc, #28]	; (80033b0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4313      	orrs	r3, r2
 8003396:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003398:	4b05      	ldr	r3, [pc, #20]	; (80033b0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800339a:	69da      	ldr	r2, [r3, #28]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4013      	ands	r3, r2
 80033a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80033a2:	68fb      	ldr	r3, [r7, #12]
}
 80033a4:	bf00      	nop
 80033a6:	3714      	adds	r7, #20
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr
 80033b0:	40021000 	.word	0x40021000

080033b4 <LL_TIM_EnableCounter>:
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f043 0201 	orr.w	r2, r3, #1
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	601a      	str	r2, [r3, #0]
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <LL_TIM_EnableARRPreload>:
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	601a      	str	r2, [r3, #0]
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <LL_TIM_OC_DisableFast>:
{
 80033f4:	b4b0      	push	{r4, r5, r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d028      	beq.n	8003456 <LL_TIM_OC_DisableFast+0x62>
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	2b04      	cmp	r3, #4
 8003408:	d023      	beq.n	8003452 <LL_TIM_OC_DisableFast+0x5e>
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	2b10      	cmp	r3, #16
 800340e:	d01e      	beq.n	800344e <LL_TIM_OC_DisableFast+0x5a>
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	2b40      	cmp	r3, #64	; 0x40
 8003414:	d019      	beq.n	800344a <LL_TIM_OC_DisableFast+0x56>
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800341c:	d013      	beq.n	8003446 <LL_TIM_OC_DisableFast+0x52>
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003424:	d00d      	beq.n	8003442 <LL_TIM_OC_DisableFast+0x4e>
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800342c:	d007      	beq.n	800343e <LL_TIM_OC_DisableFast+0x4a>
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003434:	d101      	bne.n	800343a <LL_TIM_OC_DisableFast+0x46>
 8003436:	2307      	movs	r3, #7
 8003438:	e00e      	b.n	8003458 <LL_TIM_OC_DisableFast+0x64>
 800343a:	2308      	movs	r3, #8
 800343c:	e00c      	b.n	8003458 <LL_TIM_OC_DisableFast+0x64>
 800343e:	2306      	movs	r3, #6
 8003440:	e00a      	b.n	8003458 <LL_TIM_OC_DisableFast+0x64>
 8003442:	2305      	movs	r3, #5
 8003444:	e008      	b.n	8003458 <LL_TIM_OC_DisableFast+0x64>
 8003446:	2304      	movs	r3, #4
 8003448:	e006      	b.n	8003458 <LL_TIM_OC_DisableFast+0x64>
 800344a:	2303      	movs	r3, #3
 800344c:	e004      	b.n	8003458 <LL_TIM_OC_DisableFast+0x64>
 800344e:	2302      	movs	r3, #2
 8003450:	e002      	b.n	8003458 <LL_TIM_OC_DisableFast+0x64>
 8003452:	2301      	movs	r3, #1
 8003454:	e000      	b.n	8003458 <LL_TIM_OC_DisableFast+0x64>
 8003456:	2300      	movs	r3, #0
 8003458:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	3318      	adds	r3, #24
 800345e:	461a      	mov	r2, r3
 8003460:	4629      	mov	r1, r5
 8003462:	4b09      	ldr	r3, [pc, #36]	; (8003488 <LL_TIM_OC_DisableFast+0x94>)
 8003464:	5c5b      	ldrb	r3, [r3, r1]
 8003466:	4413      	add	r3, r2
 8003468:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800346a:	6822      	ldr	r2, [r4, #0]
 800346c:	4629      	mov	r1, r5
 800346e:	4b07      	ldr	r3, [pc, #28]	; (800348c <LL_TIM_OC_DisableFast+0x98>)
 8003470:	5c5b      	ldrb	r3, [r3, r1]
 8003472:	4619      	mov	r1, r3
 8003474:	2304      	movs	r3, #4
 8003476:	408b      	lsls	r3, r1
 8003478:	43db      	mvns	r3, r3
 800347a:	4013      	ands	r3, r2
 800347c:	6023      	str	r3, [r4, #0]
}
 800347e:	bf00      	nop
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	bcb0      	pop	{r4, r5, r7}
 8003486:	4770      	bx	lr
 8003488:	08003860 	.word	0x08003860
 800348c:	0800386c 	.word	0x0800386c

08003490 <LL_TIM_SetClockSource>:
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80034a2:	f023 0307 	bic.w	r3, r3, #7
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	431a      	orrs	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	609a      	str	r2, [r3, #8]
}
 80034ae:	bf00      	nop
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <LL_TIM_SetTriggerOutput>:
{
 80034ba:	b480      	push	{r7}
 80034bc:	b083      	sub	sp, #12
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
 80034c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	431a      	orrs	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	605a      	str	r2, [r3, #4]
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <LL_TIM_DisableMasterSlaveMode>:
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	609a      	str	r2, [r3, #8]
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <LL_TIM_EnableIT_UPDATE>:
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	f043 0201 	orr.w	r2, r3, #1
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	60da      	str	r2, [r3, #12]
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b08e      	sub	sp, #56	; 0x38
 8003524:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003526:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800352a:	2200      	movs	r2, #0
 800352c:	601a      	str	r2, [r3, #0]
 800352e:	605a      	str	r2, [r3, #4]
 8003530:	609a      	str	r2, [r3, #8]
 8003532:	60da      	str	r2, [r3, #12]
 8003534:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8003536:	1d3b      	adds	r3, r7, #4
 8003538:	2220      	movs	r2, #32
 800353a:	2100      	movs	r1, #0
 800353c:	4618      	mov	r0, r3
 800353e:	f000 f97b 	bl	8003838 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8003542:	2002      	movs	r0, #2
 8003544:	f7ff ff1e 	bl	8003384 <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003548:	f7ff fe96 	bl	8003278 <NVIC_GetPriorityGrouping>
 800354c:	4603      	mov	r3, r0
 800354e:	2200      	movs	r2, #0
 8003550:	2100      	movs	r1, #0
 8003552:	4618      	mov	r0, r3
 8003554:	f7ff fee2 	bl	800331c <NVIC_EncodePriority>
 8003558:	4603      	mov	r3, r0
 800355a:	4619      	mov	r1, r3
 800355c:	201d      	movs	r0, #29
 800355e:	f7ff feb3 	bl	80032c8 <NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 8003562:	201d      	movs	r0, #29
 8003564:	f7ff fe96 	bl	8003294 <NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 7999;
 8003568:	f641 733f 	movw	r3, #7999	; 0x1f3f
 800356c:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800356e:	2300      	movs	r3, #0
 8003570:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 19;
 8003572:	2313      	movs	r3, #19
 8003574:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003576:	2300      	movs	r3, #0
 8003578:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 800357a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800357e:	4619      	mov	r1, r3
 8003580:	4817      	ldr	r0, [pc, #92]	; (80035e0 <MX_TIM3_Init+0xc0>)
 8003582:	f7fd fb1b 	bl	8000bbc <LL_TIM_Init>

  //LL_TIM_DisableARRPreload(TIM3);
	LL_TIM_EnableARRPreload(TIM3);
 8003586:	4816      	ldr	r0, [pc, #88]	; (80035e0 <MX_TIM3_Init+0xc0>)
 8003588:	f7ff ff24 	bl	80033d4 <LL_TIM_EnableARRPreload>
	LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 800358c:	2100      	movs	r1, #0
 800358e:	4814      	ldr	r0, [pc, #80]	; (80035e0 <MX_TIM3_Init+0xc0>)
 8003590:	f7ff ff7e 	bl	8003490 <LL_TIM_SetClockSource>
	TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_ACTIVE;
 8003594:	2310      	movs	r3, #16
 8003596:	607b      	str	r3, [r7, #4]
	TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8003598:	2300      	movs	r3, #0
 800359a:	60bb      	str	r3, [r7, #8]
	TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800359c:	2300      	movs	r3, #0
 800359e:	60fb      	str	r3, [r7, #12]
	TIM_OC_InitStruct.CompareValue = 0;
 80035a0:	2300      	movs	r3, #0
 80035a2:	613b      	str	r3, [r7, #16]
	TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80035a4:	2300      	movs	r3, #0
 80035a6:	617b      	str	r3, [r7, #20]
	LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80035a8:	1d3b      	adds	r3, r7, #4
 80035aa:	461a      	mov	r2, r3
 80035ac:	2101      	movs	r1, #1
 80035ae:	480c      	ldr	r0, [pc, #48]	; (80035e0 <MX_TIM3_Init+0xc0>)
 80035b0:	f7fd fb78 	bl	8000ca4 <LL_TIM_OC_Init>
	LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 80035b4:	2101      	movs	r1, #1
 80035b6:	480a      	ldr	r0, [pc, #40]	; (80035e0 <MX_TIM3_Init+0xc0>)
 80035b8:	f7ff ff1c 	bl	80033f4 <LL_TIM_OC_DisableFast>

	LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 80035bc:	2100      	movs	r1, #0
 80035be:	4808      	ldr	r0, [pc, #32]	; (80035e0 <MX_TIM3_Init+0xc0>)
 80035c0:	f7ff ff7b 	bl	80034ba <LL_TIM_SetTriggerOutput>
	LL_TIM_DisableMasterSlaveMode(TIM3);
 80035c4:	4806      	ldr	r0, [pc, #24]	; (80035e0 <MX_TIM3_Init+0xc0>)
 80035c6:	f7ff ff8b 	bl	80034e0 <LL_TIM_DisableMasterSlaveMode>

	LL_TIM_EnableIT_UPDATE(TIM3);
 80035ca:	4805      	ldr	r0, [pc, #20]	; (80035e0 <MX_TIM3_Init+0xc0>)
 80035cc:	f7ff ff98 	bl	8003500 <LL_TIM_EnableIT_UPDATE>
	LL_TIM_EnableCounter(TIM3);
 80035d0:	4803      	ldr	r0, [pc, #12]	; (80035e0 <MX_TIM3_Init+0xc0>)
 80035d2:	f7ff feef 	bl	80033b4 <LL_TIM_EnableCounter>

}
 80035d6:	bf00      	nop
 80035d8:	3738      	adds	r7, #56	; 0x38
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	40000400 	.word	0x40000400

080035e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80035e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800361c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80035e8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80035ea:	e003      	b.n	80035f4 <LoopCopyDataInit>

080035ec <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80035ec:	4b0c      	ldr	r3, [pc, #48]	; (8003620 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80035ee:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80035f0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80035f2:	3104      	adds	r1, #4

080035f4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80035f4:	480b      	ldr	r0, [pc, #44]	; (8003624 <LoopForever+0xa>)
	ldr	r3, =_edata
 80035f6:	4b0c      	ldr	r3, [pc, #48]	; (8003628 <LoopForever+0xe>)
	adds	r2, r0, r1
 80035f8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80035fa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80035fc:	d3f6      	bcc.n	80035ec <CopyDataInit>
	ldr	r2, =_sbss
 80035fe:	4a0b      	ldr	r2, [pc, #44]	; (800362c <LoopForever+0x12>)
	b	LoopFillZerobss
 8003600:	e002      	b.n	8003608 <LoopFillZerobss>

08003602 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003602:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003604:	f842 3b04 	str.w	r3, [r2], #4

08003608 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003608:	4b09      	ldr	r3, [pc, #36]	; (8003630 <LoopForever+0x16>)
	cmp	r2, r3
 800360a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800360c:	d3f9      	bcc.n	8003602 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800360e:	f7ff fde9 	bl	80031e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003612:	f000 f8ed 	bl	80037f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003616:	f7ff fc51 	bl	8002ebc <main>

0800361a <LoopForever>:

LoopForever:
    b LoopForever
 800361a:	e7fe      	b.n	800361a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800361c:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8003620:	08003880 	.word	0x08003880
	ldr	r0, =_sdata
 8003624:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003628:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 800362c:	20000018 	.word	0x20000018
	ldr	r3, = _ebss
 8003630:	20000074 	.word	0x20000074

08003634 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003634:	e7fe      	b.n	8003634 <ADC1_2_IRQHandler>
	...

08003638 <lsm6ds0_read_byte>:
#include "lsm6ds0.h"

uint8_t addres = LSM6DS0_DEVICE_ADDRESS_0;

uint8_t lsm6ds0_read_byte(uint8_t reg_addr)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af02      	add	r7, sp, #8
 800363e:	4603      	mov	r3, r0
 8003640:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8003642:	2300      	movs	r3, #0
 8003644:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, addres, 0));
 8003646:	4b08      	ldr	r3, [pc, #32]	; (8003668 <lsm6ds0_read_byte+0x30>)
 8003648:	7819      	ldrb	r1, [r3, #0]
 800364a:	79fa      	ldrb	r2, [r7, #7]
 800364c:	f107 000f 	add.w	r0, r7, #15
 8003650:	2300      	movs	r3, #0
 8003652:	9300      	str	r3, [sp, #0]
 8003654:	460b      	mov	r3, r1
 8003656:	2101      	movs	r1, #1
 8003658:	f7ff fa44 	bl	8002ae4 <i2c_master_read>
 800365c:	4603      	mov	r3, r0
 800365e:	781b      	ldrb	r3, [r3, #0]
}
 8003660:	4618      	mov	r0, r3
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	20000010 	.word	0x20000010

0800366c <lsm6ds0_write_byte>:


void lsm6ds0_write_byte(uint8_t reg_addr, uint8_t value)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	4603      	mov	r3, r0
 8003674:	460a      	mov	r2, r1
 8003676:	71fb      	strb	r3, [r7, #7]
 8003678:	4613      	mov	r3, r2
 800367a:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, addres, 0);
 800367c:	4b05      	ldr	r3, [pc, #20]	; (8003694 <lsm6ds0_write_byte+0x28>)
 800367e:	781a      	ldrb	r2, [r3, #0]
 8003680:	79f9      	ldrb	r1, [r7, #7]
 8003682:	79b8      	ldrb	r0, [r7, #6]
 8003684:	2300      	movs	r3, #0
 8003686:	f7ff f9e9 	bl	8002a5c <i2c_master_write>
}
 800368a:	bf00      	nop
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	20000010 	.word	0x20000010

08003698 <lsm6ds0_readArray>:


void lsm6ds0_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af02      	add	r7, sp, #8
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	460b      	mov	r3, r1
 80036a2:	70fb      	strb	r3, [r7, #3]
 80036a4:	4613      	mov	r3, r2
 80036a6:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, addres, 1);
 80036a8:	4b06      	ldr	r3, [pc, #24]	; (80036c4 <lsm6ds0_readArray+0x2c>)
 80036aa:	7818      	ldrb	r0, [r3, #0]
 80036ac:	78fa      	ldrb	r2, [r7, #3]
 80036ae:	78b9      	ldrb	r1, [r7, #2]
 80036b0:	2301      	movs	r3, #1
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	4603      	mov	r3, r0
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f7ff fa14 	bl	8002ae4 <i2c_master_read>
}
 80036bc:	bf00      	nop
 80036be:	3708      	adds	r7, #8
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	20000010 	.word	0x20000010

080036c8 <lsm6ds0_get_acc>:
	return (((int16_t)((temp[1] << 8) | temp[0])) >> 3)  + 25;
}


void lsm6ds0_get_acc(float* x, float* y, float* z)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b088      	sub	sp, #32
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
	int16_t xx, yy, zz;

	uint8_t temp;

	//get current scale and use it for final calculation
    temp = lsm6ds0_read_byte(LSM6DS0_ADDRESS_CTRL1);
 80036d4:	2010      	movs	r0, #16
 80036d6:	f7ff ffaf 	bl	8003638 <lsm6ds0_read_byte>
 80036da:	4603      	mov	r3, r0
 80036dc:	77fb      	strb	r3, [r7, #31]

	temp = temp >> 2;
 80036de:	7ffb      	ldrb	r3, [r7, #31]
 80036e0:	089b      	lsrs	r3, r3, #2
 80036e2:	77fb      	strb	r3, [r7, #31]
    temp &= 0x03;			//full scale bits exctracted
 80036e4:	7ffb      	ldrb	r3, [r7, #31]
 80036e6:	f003 0303 	and.w	r3, r3, #3
 80036ea:	77fb      	strb	r3, [r7, #31]

	lsm6ds0_readArray(data, LSM6DS0_ADDRESS_ACCX, 6);
 80036ec:	f107 0310 	add.w	r3, r7, #16
 80036f0:	2206      	movs	r2, #6
 80036f2:	2128      	movs	r1, #40	; 0x28
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7ff ffcf 	bl	8003698 <lsm6ds0_readArray>

	xx = ((uint16_t)data[1]) << 8 | data[0];
 80036fa:	7c7b      	ldrb	r3, [r7, #17]
 80036fc:	021b      	lsls	r3, r3, #8
 80036fe:	b21a      	sxth	r2, r3
 8003700:	7c3b      	ldrb	r3, [r7, #16]
 8003702:	b21b      	sxth	r3, r3
 8003704:	4313      	orrs	r3, r2
 8003706:	83bb      	strh	r3, [r7, #28]
	yy = ((uint16_t)data[3]) << 8 | data[2];
 8003708:	7cfb      	ldrb	r3, [r7, #19]
 800370a:	021b      	lsls	r3, r3, #8
 800370c:	b21a      	sxth	r2, r3
 800370e:	7cbb      	ldrb	r3, [r7, #18]
 8003710:	b21b      	sxth	r3, r3
 8003712:	4313      	orrs	r3, r2
 8003714:	837b      	strh	r3, [r7, #26]
	zz = ((uint16_t)data[5]) << 8 | data[4];
 8003716:	7d7b      	ldrb	r3, [r7, #21]
 8003718:	021b      	lsls	r3, r3, #8
 800371a:	b21a      	sxth	r2, r3
 800371c:	7d3b      	ldrb	r3, [r7, #20]
 800371e:	b21b      	sxth	r3, r3
 8003720:	4313      	orrs	r3, r2
 8003722:	833b      	strh	r3, [r7, #24]

	*x = (xx >> 4) / 1000.0f;
 8003724:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003728:	111b      	asrs	r3, r3, #4
 800372a:	b21b      	sxth	r3, r3
 800372c:	ee07 3a90 	vmov	s15, r3
 8003730:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003734:	eddf 6a14 	vldr	s13, [pc, #80]	; 8003788 <lsm6ds0_get_acc+0xc0>
 8003738:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	edc3 7a00 	vstr	s15, [r3]
	*y = (yy >> 4) / 1000.0f;
 8003742:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003746:	111b      	asrs	r3, r3, #4
 8003748:	b21b      	sxth	r3, r3
 800374a:	ee07 3a90 	vmov	s15, r3
 800374e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003752:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8003788 <lsm6ds0_get_acc+0xc0>
 8003756:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	edc3 7a00 	vstr	s15, [r3]
	*z = (zz >> 4) / 1000.0f;
 8003760:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003764:	111b      	asrs	r3, r3, #4
 8003766:	b21b      	sxth	r3, r3
 8003768:	ee07 3a90 	vmov	s15, r3
 800376c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003770:	eddf 6a05 	vldr	s13, [pc, #20]	; 8003788 <lsm6ds0_get_acc+0xc0>
 8003774:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	edc3 7a00 	vstr	s15, [r3]
}
 800377e:	bf00      	nop
 8003780:	3720      	adds	r7, #32
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	447a0000 	.word	0x447a0000

0800378c <lsm6ds0_init>:


uint8_t lsm6ds0_init(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 8003792:	2301      	movs	r3, #1
 8003794:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 8003796:	2064      	movs	r0, #100	; 0x64
 8003798:	f7fd fdb2 	bl	8001300 <LL_mDelay>

	uint8_t val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);
 800379c:	200f      	movs	r0, #15
 800379e:	f7ff ff4b 	bl	8003638 <lsm6ds0_read_byte>
 80037a2:	4603      	mov	r3, r0
 80037a4:	71bb      	strb	r3, [r7, #6]

	if(val == LSM6DS0_WHO_AM_I_VALUE)
 80037a6:	79bb      	ldrb	r3, [r7, #6]
 80037a8:	2b68      	cmp	r3, #104	; 0x68
 80037aa:	d102      	bne.n	80037b2 <lsm6ds0_init+0x26>
	{
		status = 1;
 80037ac:	2301      	movs	r3, #1
 80037ae:	71fb      	strb	r3, [r7, #7]
 80037b0:	e00f      	b.n	80037d2 <lsm6ds0_init+0x46>
	}
	else			//if the device is not found on one address, try another one
	{
		addres = LSM6DS0_DEVICE_ADDRESS_1;
 80037b2:	4b0e      	ldr	r3, [pc, #56]	; (80037ec <lsm6ds0_init+0x60>)
 80037b4:	22d6      	movs	r2, #214	; 0xd6
 80037b6:	701a      	strb	r2, [r3, #0]
		val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);
 80037b8:	200f      	movs	r0, #15
 80037ba:	f7ff ff3d 	bl	8003638 <lsm6ds0_read_byte>
 80037be:	4603      	mov	r3, r0
 80037c0:	71bb      	strb	r3, [r7, #6]
		if(val == LSM6DS0_WHO_AM_I_VALUE)
 80037c2:	79bb      	ldrb	r3, [r7, #6]
 80037c4:	2b68      	cmp	r3, #104	; 0x68
 80037c6:	d102      	bne.n	80037ce <lsm6ds0_init+0x42>
		{
			status = 1;
 80037c8:	2301      	movs	r3, #1
 80037ca:	71fb      	strb	r3, [r7, #7]
 80037cc:	e001      	b.n	80037d2 <lsm6ds0_init+0x46>
		}
		else
		{
			status = 0;
 80037ce:	2300      	movs	r3, #0
 80037d0:	71fb      	strb	r3, [r7, #7]
		}
	}

	//acc device init

	uint8_t ctrl1 = 8 << 4; // +-2g res
 80037d2:	2380      	movs	r3, #128	; 0x80
 80037d4:	717b      	strb	r3, [r7, #5]
	lsm6ds0_write_byte(LSM6DS0_ADDRESS_CTRL1, ctrl1);
 80037d6:	797b      	ldrb	r3, [r7, #5]
 80037d8:	4619      	mov	r1, r3
 80037da:	2010      	movs	r0, #16
 80037dc:	f7ff ff46 	bl	800366c <lsm6ds0_write_byte>

	return status;
 80037e0:	79fb      	ldrb	r3, [r7, #7]
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	20000010 	.word	0x20000010

080037f0 <__libc_init_array>:
 80037f0:	b570      	push	{r4, r5, r6, lr}
 80037f2:	4e0d      	ldr	r6, [pc, #52]	; (8003828 <__libc_init_array+0x38>)
 80037f4:	4c0d      	ldr	r4, [pc, #52]	; (800382c <__libc_init_array+0x3c>)
 80037f6:	1ba4      	subs	r4, r4, r6
 80037f8:	10a4      	asrs	r4, r4, #2
 80037fa:	2500      	movs	r5, #0
 80037fc:	42a5      	cmp	r5, r4
 80037fe:	d109      	bne.n	8003814 <__libc_init_array+0x24>
 8003800:	4e0b      	ldr	r6, [pc, #44]	; (8003830 <__libc_init_array+0x40>)
 8003802:	4c0c      	ldr	r4, [pc, #48]	; (8003834 <__libc_init_array+0x44>)
 8003804:	f000 f820 	bl	8003848 <_init>
 8003808:	1ba4      	subs	r4, r4, r6
 800380a:	10a4      	asrs	r4, r4, #2
 800380c:	2500      	movs	r5, #0
 800380e:	42a5      	cmp	r5, r4
 8003810:	d105      	bne.n	800381e <__libc_init_array+0x2e>
 8003812:	bd70      	pop	{r4, r5, r6, pc}
 8003814:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003818:	4798      	blx	r3
 800381a:	3501      	adds	r5, #1
 800381c:	e7ee      	b.n	80037fc <__libc_init_array+0xc>
 800381e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003822:	4798      	blx	r3
 8003824:	3501      	adds	r5, #1
 8003826:	e7f2      	b.n	800380e <__libc_init_array+0x1e>
 8003828:	08003878 	.word	0x08003878
 800382c:	08003878 	.word	0x08003878
 8003830:	08003878 	.word	0x08003878
 8003834:	0800387c 	.word	0x0800387c

08003838 <memset>:
 8003838:	4402      	add	r2, r0
 800383a:	4603      	mov	r3, r0
 800383c:	4293      	cmp	r3, r2
 800383e:	d100      	bne.n	8003842 <memset+0xa>
 8003840:	4770      	bx	lr
 8003842:	f803 1b01 	strb.w	r1, [r3], #1
 8003846:	e7f9      	b.n	800383c <memset+0x4>

08003848 <_init>:
 8003848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800384a:	bf00      	nop
 800384c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800384e:	bc08      	pop	{r3}
 8003850:	469e      	mov	lr, r3
 8003852:	4770      	bx	lr

08003854 <_fini>:
 8003854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003856:	bf00      	nop
 8003858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800385a:	bc08      	pop	{r3}
 800385c:	469e      	mov	lr, r3
 800385e:	4770      	bx	lr
