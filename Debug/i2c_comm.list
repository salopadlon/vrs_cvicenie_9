
i2c_comm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000390  08009b48  08009b48  00019b48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ed8  08009ed8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08009ed8  08009ed8  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009ed8  08009ed8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ed8  08009ed8  00019ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009edc  08009edc  00019edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009ee0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  200001e0  0800a0c0  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  0800a0c0  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009385  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e77  00000000  00000000  00029595  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a40  00000000  00000000  0002b410  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000928  00000000  00000000  0002be50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000052e6  00000000  00000000  0002c778  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000079b4  00000000  00000000  00031a5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00079fac  00000000  00000000  00039412  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b33be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000381c  00000000  00000000  000b343c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009b2c 	.word	0x08009b2c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08009b2c 	.word	0x08009b2c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8000c90:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <LL_EXTI_EnableIT_0_31+0x20>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	4904      	ldr	r1, [pc, #16]	; (8000ca8 <LL_EXTI_EnableIT_0_31+0x20>)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	600b      	str	r3, [r1, #0]
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	40010400 	.word	0x40010400

08000cac <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000cb4:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <LL_EXTI_EnableIT_32_63+0x20>)
 8000cb6:	6a1a      	ldr	r2, [r3, #32]
 8000cb8:	4904      	ldr	r1, [pc, #16]	; (8000ccc <LL_EXTI_EnableIT_32_63+0x20>)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	620b      	str	r3, [r1, #32]
}
 8000cc0:	bf00      	nop
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	40010400 	.word	0x40010400

08000cd0 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <LL_EXTI_DisableIT_0_31+0x24>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	43db      	mvns	r3, r3
 8000ce0:	4904      	ldr	r1, [pc, #16]	; (8000cf4 <LL_EXTI_DisableIT_0_31+0x24>)
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	600b      	str	r3, [r1, #0]
}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	40010400 	.word	0x40010400

08000cf8 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <LL_EXTI_DisableIT_32_63+0x24>)
 8000d02:	6a1a      	ldr	r2, [r3, #32]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	43db      	mvns	r3, r3
 8000d08:	4904      	ldr	r1, [pc, #16]	; (8000d1c <LL_EXTI_DisableIT_32_63+0x24>)
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	620b      	str	r3, [r1, #32]
}
 8000d0e:	bf00      	nop
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	40010400 	.word	0x40010400

08000d20 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8000d28:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <LL_EXTI_EnableEvent_0_31+0x20>)
 8000d2a:	685a      	ldr	r2, [r3, #4]
 8000d2c:	4904      	ldr	r1, [pc, #16]	; (8000d40 <LL_EXTI_EnableEvent_0_31+0x20>)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	604b      	str	r3, [r1, #4]

}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	40010400 	.word	0x40010400

08000d44 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8000d4c:	4b05      	ldr	r3, [pc, #20]	; (8000d64 <LL_EXTI_EnableEvent_32_63+0x20>)
 8000d4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d50:	4904      	ldr	r1, [pc, #16]	; (8000d64 <LL_EXTI_EnableEvent_32_63+0x20>)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	624b      	str	r3, [r1, #36]	; 0x24
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	40010400 	.word	0x40010400

08000d68 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8000d70:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <LL_EXTI_DisableEvent_0_31+0x24>)
 8000d72:	685a      	ldr	r2, [r3, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	43db      	mvns	r3, r3
 8000d78:	4904      	ldr	r1, [pc, #16]	; (8000d8c <LL_EXTI_DisableEvent_0_31+0x24>)
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	604b      	str	r3, [r1, #4]
}
 8000d7e:	bf00      	nop
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	40010400 	.word	0x40010400

08000d90 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <LL_EXTI_DisableEvent_32_63+0x24>)
 8000d9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	43db      	mvns	r3, r3
 8000da0:	4904      	ldr	r1, [pc, #16]	; (8000db4 <LL_EXTI_DisableEvent_32_63+0x24>)
 8000da2:	4013      	ands	r3, r2
 8000da4:	624b      	str	r3, [r1, #36]	; 0x24
}
 8000da6:	bf00      	nop
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	40010400 	.word	0x40010400

08000db8 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8000dc0:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000dc2:	689a      	ldr	r2, [r3, #8]
 8000dc4:	4904      	ldr	r1, [pc, #16]	; (8000dd8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	608b      	str	r3, [r1, #8]

}
 8000dcc:	bf00      	nop
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	40010400 	.word	0x40010400

08000ddc <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8000de4:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8000de6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000de8:	4904      	ldr	r1, [pc, #16]	; (8000dfc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	628b      	str	r3, [r1, #40]	; 0x28
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	40010400 	.word	0x40010400

08000e00 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8000e0a:	689a      	ldr	r2, [r3, #8]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	43db      	mvns	r3, r3
 8000e10:	4904      	ldr	r1, [pc, #16]	; (8000e24 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8000e12:	4013      	ands	r3, r2
 8000e14:	608b      	str	r3, [r1, #8]

}
 8000e16:	bf00      	nop
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	40010400 	.word	0x40010400

08000e28 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8000e32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	43db      	mvns	r3, r3
 8000e38:	4904      	ldr	r1, [pc, #16]	; (8000e4c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	628b      	str	r3, [r1, #40]	; 0x28
}
 8000e3e:	bf00      	nop
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	40010400 	.word	0x40010400

08000e50 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8000e58:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000e5a:	68da      	ldr	r2, [r3, #12]
 8000e5c:	4904      	ldr	r1, [pc, #16]	; (8000e70 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	60cb      	str	r3, [r1, #12]
}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	40010400 	.word	0x40010400

08000e74 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8000e7c:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8000e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e80:	4904      	ldr	r1, [pc, #16]	; (8000e94 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8000e88:	bf00      	nop
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	40010400 	.word	0x40010400

08000e98 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8000ea2:	68da      	ldr	r2, [r3, #12]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	4904      	ldr	r1, [pc, #16]	; (8000ebc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8000eaa:	4013      	ands	r3, r2
 8000eac:	60cb      	str	r3, [r1, #12]
}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	40010400 	.word	0x40010400

08000ec0 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8000eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	4904      	ldr	r1, [pc, #16]	; (8000ee4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	40010400 	.word	0x40010400

08000ee8 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	73fb      	strb	r3, [r7, #15]
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	7a1b      	ldrb	r3, [r3, #8]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	f000 80c2 	beq.w	8001082 <LL_EXTI_Init+0x19a>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d05b      	beq.n	8000fbe <LL_EXTI_Init+0xd6>
    {
      switch (EXTI_InitStruct->Mode)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	7a5b      	ldrb	r3, [r3, #9]
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d00e      	beq.n	8000f2c <LL_EXTI_Init+0x44>
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	d017      	beq.n	8000f42 <LL_EXTI_Init+0x5a>
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d120      	bne.n	8000f58 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff ff24 	bl	8000d68 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff feaf 	bl	8000c88 <LL_EXTI_EnableIT_0_31>
          break;
 8000f2a:	e018      	b.n	8000f5e <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff fecd 	bl	8000cd0 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff fef0 	bl	8000d20 <LL_EXTI_EnableEvent_0_31>
          break;
 8000f40:	e00d      	b.n	8000f5e <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff fe9e 	bl	8000c88 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff fee5 	bl	8000d20 <LL_EXTI_EnableEvent_0_31>
          break;
 8000f56:	e002      	b.n	8000f5e <LL_EXTI_Init+0x76>
        default:
          status = ERROR;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	73fb      	strb	r3, [r7, #15]
          break;
 8000f5c:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	7a9b      	ldrb	r3, [r3, #10]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d02b      	beq.n	8000fbe <LL_EXTI_Init+0xd6>
      {
        switch (EXTI_InitStruct->Trigger)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	7a9b      	ldrb	r3, [r3, #10]
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d00e      	beq.n	8000f8c <LL_EXTI_Init+0xa4>
 8000f6e:	2b03      	cmp	r3, #3
 8000f70:	d017      	beq.n	8000fa2 <LL_EXTI_Init+0xba>
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d120      	bne.n	8000fb8 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff ff8c 	bl	8000e98 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff ff17 	bl	8000db8 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8000f8a:	e019      	b.n	8000fc0 <LL_EXTI_Init+0xd8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff ff35 	bl	8000e00 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff ff58 	bl	8000e50 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8000fa0:	e00e      	b.n	8000fc0 <LL_EXTI_Init+0xd8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff ff06 	bl	8000db8 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff ff4d 	bl	8000e50 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8000fb6:	e003      	b.n	8000fc0 <LL_EXTI_Init+0xd8>
          default:
            status = ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	73fb      	strb	r3, [r7, #15]
            break;
 8000fbc:	e000      	b.n	8000fc0 <LL_EXTI_Init+0xd8>
        }
      }
 8000fbe:	bf00      	nop
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d071      	beq.n	80010ac <LL_EXTI_Init+0x1c4>
    {
      switch (EXTI_InitStruct->Mode)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	7a5b      	ldrb	r3, [r3, #9]
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d00e      	beq.n	8000fee <LL_EXTI_Init+0x106>
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d017      	beq.n	8001004 <LL_EXTI_Init+0x11c>
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d120      	bne.n	800101a <LL_EXTI_Init+0x132>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff fed7 	bl	8000d90 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff fe60 	bl	8000cac <LL_EXTI_EnableIT_32_63>
          break;
 8000fec:	e018      	b.n	8001020 <LL_EXTI_Init+0x138>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff fe80 	bl	8000cf8 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff fea1 	bl	8000d44 <LL_EXTI_EnableEvent_32_63>
          break;
 8001002:	e00d      	b.n	8001020 <LL_EXTI_Init+0x138>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff fe4f 	bl	8000cac <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff fe96 	bl	8000d44 <LL_EXTI_EnableEvent_32_63>
          break;
 8001018:	e002      	b.n	8001020 <LL_EXTI_Init+0x138>
        default:
          status = ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	73fb      	strb	r3, [r7, #15]
          break;
 800101e:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	7a9b      	ldrb	r3, [r3, #10]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d041      	beq.n	80010ac <LL_EXTI_Init+0x1c4>
      {
        switch (EXTI_InitStruct->Trigger)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	7a9b      	ldrb	r3, [r3, #10]
 800102c:	2b02      	cmp	r3, #2
 800102e:	d00e      	beq.n	800104e <LL_EXTI_Init+0x166>
 8001030:	2b03      	cmp	r3, #3
 8001032:	d017      	beq.n	8001064 <LL_EXTI_Init+0x17c>
 8001034:	2b01      	cmp	r3, #1
 8001036:	d120      	bne.n	800107a <LL_EXTI_Init+0x192>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff ff3f 	bl	8000ec0 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fec8 	bl	8000ddc <LL_EXTI_EnableRisingTrig_32_63>
            break;
 800104c:	e02f      	b.n	80010ae <LL_EXTI_Init+0x1c6>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff fee8 	bl	8000e28 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ff09 	bl	8000e74 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8001062:	e024      	b.n	80010ae <LL_EXTI_Init+0x1c6>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff feb7 	bl	8000ddc <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff fefe 	bl	8000e74 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8001078:	e019      	b.n	80010ae <LL_EXTI_Init+0x1c6>
          default:
            status = ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	73fb      	strb	r3, [r7, #15]
            break;
 800107e:	bf00      	nop
 8001080:	e015      	b.n	80010ae <LL_EXTI_Init+0x1c6>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fe22 	bl	8000cd0 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff fe69 	bl	8000d68 <LL_EXTI_DisableEvent_0_31>
#if defined(EXTI_32_63_SUPPORT)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fe2c 	bl	8000cf8 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fe73 	bl	8000d90 <LL_EXTI_DisableEvent_32_63>
 80010aa:	e000      	b.n	80010ae <LL_EXTI_Init+0x1c6>
      }
 80010ac:	bf00      	nop
#endif
  }
  return status;
 80010ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b089      	sub	sp, #36	; 0x24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	fa93 f3a3 	rbit	r3, r3
 80010d2:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	fab3 f383 	clz	r3, r3
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	2103      	movs	r1, #3
 80010de:	fa01 f303 	lsl.w	r3, r1, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	401a      	ands	r2, r3
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	fa93 f3a3 	rbit	r3, r3
 80010f0:	61bb      	str	r3, [r7, #24]
  return(result);
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	fab3 f383 	clz	r3, r3
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	6879      	ldr	r1, [r7, #4]
 80010fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001100:	431a      	orrs	r2, r3
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	601a      	str	r2, [r3, #0]
}
 8001106:	bf00      	nop
 8001108:	3724      	adds	r7, #36	; 0x24
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8001112:	b480      	push	{r7}
 8001114:	b085      	sub	sp, #20
 8001116:	af00      	add	r7, sp, #0
 8001118:	60f8      	str	r0, [r7, #12]
 800111a:	60b9      	str	r1, [r7, #8]
 800111c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	685a      	ldr	r2, [r3, #4]
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	43db      	mvns	r3, r3
 8001126:	401a      	ands	r2, r3
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	6879      	ldr	r1, [r7, #4]
 800112c:	fb01 f303 	mul.w	r3, r1, r3
 8001130:	431a      	orrs	r2, r3
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	605a      	str	r2, [r3, #4]
}
 8001136:	bf00      	nop
 8001138:	3714      	adds	r7, #20
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8001142:	b480      	push	{r7}
 8001144:	b089      	sub	sp, #36	; 0x24
 8001146:	af00      	add	r7, sp, #0
 8001148:	60f8      	str	r0, [r7, #12]
 800114a:	60b9      	str	r1, [r7, #8]
 800114c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	689a      	ldr	r2, [r3, #8]
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	fa93 f3a3 	rbit	r3, r3
 800115c:	613b      	str	r3, [r7, #16]
  return(result);
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	fab3 f383 	clz	r3, r3
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	2103      	movs	r1, #3
 8001168:	fa01 f303 	lsl.w	r3, r1, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	401a      	ands	r2, r3
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	fa93 f3a3 	rbit	r3, r3
 800117a:	61bb      	str	r3, [r7, #24]
  return(result);
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	fab3 f383 	clz	r3, r3
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	6879      	ldr	r1, [r7, #4]
 8001186:	fa01 f303 	lsl.w	r3, r1, r3
 800118a:	431a      	orrs	r2, r3
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8001190:	bf00      	nop
 8001192:	3724      	adds	r7, #36	; 0x24
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800119c:	b480      	push	{r7}
 800119e:	b089      	sub	sp, #36	; 0x24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	68da      	ldr	r2, [r3, #12]
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	fa93 f3a3 	rbit	r3, r3
 80011b6:	613b      	str	r3, [r7, #16]
  return(result);
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	fab3 f383 	clz	r3, r3
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	2103      	movs	r1, #3
 80011c2:	fa01 f303 	lsl.w	r3, r1, r3
 80011c6:	43db      	mvns	r3, r3
 80011c8:	401a      	ands	r2, r3
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	fa93 f3a3 	rbit	r3, r3
 80011d4:	61bb      	str	r3, [r7, #24]
  return(result);
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	fab3 f383 	clz	r3, r3
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	6879      	ldr	r1, [r7, #4]
 80011e0:	fa01 f303 	lsl.w	r3, r1, r3
 80011e4:	431a      	orrs	r2, r3
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	60da      	str	r2, [r3, #12]
}
 80011ea:	bf00      	nop
 80011ec:	3724      	adds	r7, #36	; 0x24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80011f6:	b480      	push	{r7}
 80011f8:	b089      	sub	sp, #36	; 0x24
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	60f8      	str	r0, [r7, #12]
 80011fe:	60b9      	str	r1, [r7, #8]
 8001200:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	6a1a      	ldr	r2, [r3, #32]
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	fa93 f3a3 	rbit	r3, r3
 8001210:	613b      	str	r3, [r7, #16]
  return(result);
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	fab3 f383 	clz	r3, r3
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	210f      	movs	r1, #15
 800121c:	fa01 f303 	lsl.w	r3, r1, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	401a      	ands	r2, r3
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	fa93 f3a3 	rbit	r3, r3
 800122e:	61bb      	str	r3, [r7, #24]
  return(result);
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	fab3 f383 	clz	r3, r3
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	6879      	ldr	r1, [r7, #4]
 800123a:	fa01 f303 	lsl.w	r3, r1, r3
 800123e:	431a      	orrs	r2, r3
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8001244:	bf00      	nop
 8001246:	3724      	adds	r7, #36	; 0x24
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001250:	b480      	push	{r7}
 8001252:	b089      	sub	sp, #36	; 0x24
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	0a1b      	lsrs	r3, r3, #8
 8001264:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	fa93 f3a3 	rbit	r3, r3
 800126c:	613b      	str	r3, [r7, #16]
  return(result);
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	fab3 f383 	clz	r3, r3
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	210f      	movs	r1, #15
 8001278:	fa01 f303 	lsl.w	r3, r1, r3
 800127c:	43db      	mvns	r3, r3
 800127e:	401a      	ands	r2, r3
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	0a1b      	lsrs	r3, r3, #8
 8001284:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	fa93 f3a3 	rbit	r3, r3
 800128c:	61bb      	str	r3, [r7, #24]
  return(result);
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	fab3 f383 	clz	r3, r3
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	fa01 f303 	lsl.w	r3, r1, r3
 800129c:	431a      	orrs	r2, r3
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80012a2:	bf00      	nop
 80012a4:	3724      	adds	r7, #36	; 0x24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b088      	sub	sp, #32
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
 80012b6:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80012bc:	2300      	movs	r3, #0
 80012be:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	fa93 f3a3 	rbit	r3, r3
 80012cc:	613b      	str	r3, [r7, #16]
  return(result);
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	fab3 f383 	clz	r3, r3
 80012d4:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80012d6:	e048      	b.n	800136a <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	2101      	movs	r1, #1
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	fa01 f303 	lsl.w	r3, r1, r3
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d03a      	beq.n	8001364 <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	461a      	mov	r2, r3
 80012f4:	69b9      	ldr	r1, [r7, #24]
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff fede 	bl	80010b8 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	2b01      	cmp	r3, #1
 8001302:	d003      	beq.n	800130c <LL_GPIO_Init+0x5e>
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	2b02      	cmp	r3, #2
 800130a:	d106      	bne.n	800131a <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	461a      	mov	r2, r3
 8001312:	69b9      	ldr	r1, [r7, #24]
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7ff ff14 	bl	8001142 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	691b      	ldr	r3, [r3, #16]
 800131e:	461a      	mov	r2, r3
 8001320:	69b9      	ldr	r1, [r7, #24]
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff ff3a 	bl	800119c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	2b02      	cmp	r3, #2
 800132e:	d119      	bne.n	8001364 <LL_GPIO_Init+0xb6>
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	fa93 f3a3 	rbit	r3, r3
 800133a:	60bb      	str	r3, [r7, #8]
  return(result);
 800133c:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800133e:	fab3 f383 	clz	r3, r3
 8001342:	2b07      	cmp	r3, #7
 8001344:	d807      	bhi.n	8001356 <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	695b      	ldr	r3, [r3, #20]
 800134a:	461a      	mov	r2, r3
 800134c:	69b9      	ldr	r1, [r7, #24]
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f7ff ff51 	bl	80011f6 <LL_GPIO_SetAFPin_0_7>
 8001354:	e006      	b.n	8001364 <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	695b      	ldr	r3, [r3, #20]
 800135a:	461a      	mov	r2, r3
 800135c:	69b9      	ldr	r1, [r7, #24]
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff ff76 	bl	8001250 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	3301      	adds	r3, #1
 8001368:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	fa22 f303 	lsr.w	r3, r2, r3
 8001374:	2b00      	cmp	r3, #0
 8001376:	d1af      	bne.n	80012d8 <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	2b01      	cmp	r3, #1
 800137e:	d003      	beq.n	8001388 <LL_GPIO_Init+0xda>
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	2b02      	cmp	r3, #2
 8001386:	d107      	bne.n	8001398 <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	6819      	ldr	r1, [r3, #0]
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	461a      	mov	r2, r3
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff febd 	bl	8001112 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8001398:	2300      	movs	r3, #0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3720      	adds	r7, #32
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 80013a2:	b480      	push	{r7}
 80013a4:	b083      	sub	sp, #12
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f043 0201 	orr.w	r2, r3, #1
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	601a      	str	r2, [r3, #0]
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <LL_I2C_Disable>:
  * @rmtoll CR1          PE            LL_I2C_Disable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
 80013c2:	b480      	push	{r7}
 80013c4:	b083      	sub	sp, #12
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f023 0201 	bic.w	r2, r3, #1
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	601a      	str	r2, [r3, #0]
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <LL_I2C_ConfigFilters>:
  *         This parameter is used to configure the digital noise filter on SDA and SCL input.
  *         The digital filter will filter spikes with a length of up to DNF[3:0]*ti2cclk.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigFilters(I2C_TypeDef *I2Cx, uint32_t AnalogFilter, uint32_t DigitalFilter)
{
 80013e2:	b480      	push	{r7}
 80013e4:	b085      	sub	sp, #20
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	60f8      	str	r0, [r7, #12]
 80013ea:	60b9      	str	r1, [r7, #8]
 80013ec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	0219      	lsls	r1, r3, #8
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	430b      	orrs	r3, r1
 80013fe:	431a      	orrs	r2, r3
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	601a      	str	r2, [r3, #0]
}
 8001404:	bf00      	nop
 8001406:	3714      	adds	r7, #20
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <LL_I2C_SetOwnAddress1>:
  *         @arg @ref LL_I2C_OWNADDRESS1_7BIT
  *         @arg @ref LL_I2C_OWNADDRESS1_10BIT
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress1(I2C_TypeDef *I2Cx, uint32_t OwnAddress1, uint32_t OwnAddrSize)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001424:	f023 0307 	bic.w	r3, r3, #7
 8001428:	68b9      	ldr	r1, [r7, #8]
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	430a      	orrs	r2, r1
 800142e:	431a      	orrs	r2, r3
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	609a      	str	r2, [r3, #8]
}
 8001434:	bf00      	nop
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <LL_I2C_EnableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_EnableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	609a      	str	r2, [r3, #8]
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <LL_I2C_DisableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_DisableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	609a      	str	r2, [r3, #8]
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <LL_I2C_SetTiming>:
  * @param  Timing This parameter must be a value between Min_Data=0 and Max_Data=0xFFFFFFFF.
  * @note   This parameter is computed with the STM32CubeMX Tool.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTiming(I2C_TypeDef *I2Cx, uint32_t Timing)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	683a      	ldr	r2, [r7, #0]
 800148e:	611a      	str	r2, [r3, #16]
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	431a      	orrs	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	601a      	str	r2, [r3, #0]
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 80014c2:	b480      	push	{r7}
 80014c4:	b083      	sub	sp, #12
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
 80014ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	431a      	orrs	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	605a      	str	r2, [r3, #4]
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff ff65 	bl	80013c2 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	6899      	ldr	r1, [r3, #8]
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	461a      	mov	r2, r3
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f7ff ff6d 	bl	80013e2 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	4619      	mov	r1, r3
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7ff ffb6 	bl	8001480 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f7ff ff44 	bl	80013a2 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7ff ffa0 	bl	8001460 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	6919      	ldr	r1, [r3, #16]
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	461a      	mov	r2, r3
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff ff70 	bl	8001410 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	691b      	ldr	r3, [r3, #16]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d002      	beq.n	800153e <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f7ff ff81 	bl	8001440 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4619      	mov	r1, r3
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7ff ffa9 	bl	800149c <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	695b      	ldr	r3, [r3, #20]
 800154e:	4619      	mov	r1, r3
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff ffb6 	bl	80014c2 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8001556:	2300      	movs	r3, #0
}
 8001558:	4618      	mov	r0, r3
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	683a      	ldr	r2, [r7, #0]
 800156e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	683a      	ldr	r2, [r7, #0]
 80015de:	639a      	str	r2, [r3, #56]	; 0x38
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	683a      	ldr	r2, [r7, #0]
 80015fa:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <LL_TIM_OC_SetCompareCH5>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH5 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH5(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR5, CompareValue);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <LL_TIM_OC_SetCompareCH6>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH6 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH6(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	695b      	ldr	r3, [r3, #20]
 8001668:	f043 0201 	orr.w	r2, r3, #1
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	615a      	str	r2, [r3, #20]
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4a2f      	ldr	r2, [pc, #188]	; (8001750 <LL_TIM_Init+0xd4>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d007      	beq.n	80016a8 <LL_TIM_Init+0x2c>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800169e:	d003      	beq.n	80016a8 <LL_TIM_Init+0x2c>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4a2c      	ldr	r2, [pc, #176]	; (8001754 <LL_TIM_Init+0xd8>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d106      	bne.n	80016b6 <LL_TIM_Init+0x3a>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a25      	ldr	r2, [pc, #148]	; (8001750 <LL_TIM_Init+0xd4>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d013      	beq.n	80016e6 <LL_TIM_Init+0x6a>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016c4:	d00f      	beq.n	80016e6 <LL_TIM_Init+0x6a>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a22      	ldr	r2, [pc, #136]	; (8001754 <LL_TIM_Init+0xd8>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d00b      	beq.n	80016e6 <LL_TIM_Init+0x6a>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a21      	ldr	r2, [pc, #132]	; (8001758 <LL_TIM_Init+0xdc>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d007      	beq.n	80016e6 <LL_TIM_Init+0x6a>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a20      	ldr	r2, [pc, #128]	; (800175c <LL_TIM_Init+0xe0>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d003      	beq.n	80016e6 <LL_TIM_Init+0x6a>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a1f      	ldr	r2, [pc, #124]	; (8001760 <LL_TIM_Init+0xe4>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d106      	bne.n	80016f4 <LL_TIM_Init+0x78>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	4619      	mov	r1, r3
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff ff3b 	bl	800157c <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	881b      	ldrh	r3, [r3, #0]
 800170a:	4619      	mov	r1, r3
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f7ff ff27 	bl	8001560 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a0e      	ldr	r2, [pc, #56]	; (8001750 <LL_TIM_Init+0xd4>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d00b      	beq.n	8001732 <LL_TIM_Init+0xb6>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a0e      	ldr	r2, [pc, #56]	; (8001758 <LL_TIM_Init+0xdc>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d007      	beq.n	8001732 <LL_TIM_Init+0xb6>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a0d      	ldr	r2, [pc, #52]	; (800175c <LL_TIM_Init+0xe0>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d003      	beq.n	8001732 <LL_TIM_Init+0xb6>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a0c      	ldr	r2, [pc, #48]	; (8001760 <LL_TIM_Init+0xe4>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d105      	bne.n	800173e <LL_TIM_Init+0xc2>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	7c1b      	ldrb	r3, [r3, #16]
 8001736:	4619      	mov	r1, r3
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff ff2d 	bl	8001598 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f7ff ff8c 	bl	800165c <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40012c00 	.word	0x40012c00
 8001754:	40000400 	.word	0x40000400
 8001758:	40014000 	.word	0x40014000
 800175c:	40014400 	.word	0x40014400
 8001760:	40014800 	.word	0x40014800

08001764 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800177a:	d01f      	beq.n	80017bc <LL_TIM_OC_Init+0x58>
 800177c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001780:	d804      	bhi.n	800178c <LL_TIM_OC_Init+0x28>
 8001782:	2b01      	cmp	r3, #1
 8001784:	d00c      	beq.n	80017a0 <LL_TIM_OC_Init+0x3c>
 8001786:	2b10      	cmp	r3, #16
 8001788:	d011      	beq.n	80017ae <LL_TIM_OC_Init+0x4a>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 800178a:	e033      	b.n	80017f4 <LL_TIM_OC_Init+0x90>
  switch (Channel)
 800178c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001790:	d022      	beq.n	80017d8 <LL_TIM_OC_Init+0x74>
 8001792:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001796:	d026      	beq.n	80017e6 <LL_TIM_OC_Init+0x82>
 8001798:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800179c:	d015      	beq.n	80017ca <LL_TIM_OC_Init+0x66>
      break;
 800179e:	e029      	b.n	80017f4 <LL_TIM_OC_Init+0x90>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80017a0:	6879      	ldr	r1, [r7, #4]
 80017a2:	68f8      	ldr	r0, [r7, #12]
 80017a4:	f000 f82c 	bl	8001800 <OC1Config>
 80017a8:	4603      	mov	r3, r0
 80017aa:	75fb      	strb	r3, [r7, #23]
      break;
 80017ac:	e022      	b.n	80017f4 <LL_TIM_OC_Init+0x90>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	68f8      	ldr	r0, [r7, #12]
 80017b2:	f000 f8a5 	bl	8001900 <OC2Config>
 80017b6:	4603      	mov	r3, r0
 80017b8:	75fb      	strb	r3, [r7, #23]
      break;
 80017ba:	e01b      	b.n	80017f4 <LL_TIM_OC_Init+0x90>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80017bc:	6879      	ldr	r1, [r7, #4]
 80017be:	68f8      	ldr	r0, [r7, #12]
 80017c0:	f000 f922 	bl	8001a08 <OC3Config>
 80017c4:	4603      	mov	r3, r0
 80017c6:	75fb      	strb	r3, [r7, #23]
      break;
 80017c8:	e014      	b.n	80017f4 <LL_TIM_OC_Init+0x90>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	68f8      	ldr	r0, [r7, #12]
 80017ce:	f000 f99f 	bl	8001b10 <OC4Config>
 80017d2:	4603      	mov	r3, r0
 80017d4:	75fb      	strb	r3, [r7, #23]
      break;
 80017d6:	e00d      	b.n	80017f4 <LL_TIM_OC_Init+0x90>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 80017d8:	6879      	ldr	r1, [r7, #4]
 80017da:	68f8      	ldr	r0, [r7, #12]
 80017dc:	f000 fa04 	bl	8001be8 <OC5Config>
 80017e0:	4603      	mov	r3, r0
 80017e2:	75fb      	strb	r3, [r7, #23]
      break;
 80017e4:	e006      	b.n	80017f4 <LL_TIM_OC_Init+0x90>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 80017e6:	6879      	ldr	r1, [r7, #4]
 80017e8:	68f8      	ldr	r0, [r7, #12]
 80017ea:	f000 fa5f 	bl	8001cac <OC6Config>
 80017ee:	4603      	mov	r3, r0
 80017f0:	75fb      	strb	r3, [r7, #23]
      break;
 80017f2:	bf00      	nop
  }

  return result;
 80017f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3718      	adds	r7, #24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
	...

08001800 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800180e:	2300      	movs	r3, #0
 8001810:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8001812:	2300      	movs	r3, #0
 8001814:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a1b      	ldr	r3, [r3, #32]
 800181a:	f023 0201 	bic.w	r2, r3, #1
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a1b      	ldr	r3, [r3, #32]
 8001826:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f023 0303 	bic.w	r3, r3, #3
 800183a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	6812      	ldr	r2, [r2, #0]
 800184a:	4313      	orrs	r3, r2
 800184c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	f023 0202 	bic.w	r2, r3, #2
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	691b      	ldr	r3, [r3, #16]
 8001858:	4313      	orrs	r3, r2
 800185a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	f023 0201 	bic.w	r2, r3, #1
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	4313      	orrs	r3, r2
 8001868:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a20      	ldr	r2, [pc, #128]	; (80018f0 <OC1Config+0xf0>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d00b      	beq.n	800188a <OC1Config+0x8a>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a1f      	ldr	r2, [pc, #124]	; (80018f4 <OC1Config+0xf4>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d007      	beq.n	800188a <OC1Config+0x8a>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a1e      	ldr	r2, [pc, #120]	; (80018f8 <OC1Config+0xf8>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d003      	beq.n	800188a <OC1Config+0x8a>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a1d      	ldr	r2, [pc, #116]	; (80018fc <OC1Config+0xfc>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d11e      	bne.n	80018c8 <OC1Config+0xc8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	f023 0208 	bic.w	r2, r3, #8
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	695b      	ldr	r3, [r3, #20]
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4313      	orrs	r3, r2
 8001898:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	f023 0204 	bic.w	r2, r3, #4
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4313      	orrs	r3, r2
 80018a8:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	4313      	orrs	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68fa      	ldr	r2, [r7, #12]
 80018d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	4619      	mov	r1, r3
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff fe6a 	bl	80015b4 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	697a      	ldr	r2, [r7, #20]
 80018e4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3718      	adds	r7, #24
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40012c00 	.word	0x40012c00
 80018f4:	40014000 	.word	0x40014000
 80018f8:	40014400 	.word	0x40014400
 80018fc:	40014800 	.word	0x40014800

08001900 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 800190a:	2300      	movs	r3, #0
 800190c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800190e:	2300      	movs	r3, #0
 8001910:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8001912:	2300      	movs	r3, #0
 8001914:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a1b      	ldr	r3, [r3, #32]
 800191a:	f023 0210 	bic.w	r2, r3, #16
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a1b      	ldr	r3, [r3, #32]
 8001926:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800193a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001942:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	6812      	ldr	r2, [r2, #0]
 800194a:	0212      	lsls	r2, r2, #8
 800194c:	4313      	orrs	r3, r2
 800194e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	f023 0220 	bic.w	r2, r3, #32
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	011b      	lsls	r3, r3, #4
 800195c:	4313      	orrs	r3, r2
 800195e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	f023 0210 	bic.w	r2, r3, #16
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	011b      	lsls	r3, r3, #4
 800196c:	4313      	orrs	r3, r2
 800196e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4a21      	ldr	r2, [pc, #132]	; (80019f8 <OC2Config+0xf8>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d00b      	beq.n	8001990 <OC2Config+0x90>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4a20      	ldr	r2, [pc, #128]	; (80019fc <OC2Config+0xfc>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d007      	beq.n	8001990 <OC2Config+0x90>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a1f      	ldr	r2, [pc, #124]	; (8001a00 <OC2Config+0x100>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d003      	beq.n	8001990 <OC2Config+0x90>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4a1e      	ldr	r2, [pc, #120]	; (8001a04 <OC2Config+0x104>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d11f      	bne.n	80019d0 <OC2Config+0xd0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	695b      	ldr	r3, [r3, #20]
 800199a:	019b      	lsls	r3, r3, #6
 800199c:	4313      	orrs	r3, r2
 800199e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	019b      	lsls	r3, r3, #6
 80019ac:	4313      	orrs	r3, r2
 80019ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	4313      	orrs	r3, r2
 80019be:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	4313      	orrs	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	68fa      	ldr	r2, [r7, #12]
 80019da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	4619      	mov	r1, r3
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f7ff fdf4 	bl	80015d0 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	697a      	ldr	r2, [r7, #20]
 80019ec:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3718      	adds	r7, #24
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40012c00 	.word	0x40012c00
 80019fc:	40014000 	.word	0x40014000
 8001a00:	40014400 	.word	0x40014400
 8001a04:	40014800 	.word	0x40014800

08001a08 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8001a12:	2300      	movs	r3, #0
 8001a14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001a16:	2300      	movs	r3, #0
 8001a18:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a1b      	ldr	r3, [r3, #32]
 8001a22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a1b      	ldr	r3, [r3, #32]
 8001a2e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f023 0303 	bic.w	r3, r3, #3
 8001a42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a4e:	683a      	ldr	r2, [r7, #0]
 8001a50:	6812      	ldr	r2, [r2, #0]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	021b      	lsls	r3, r3, #8
 8001a62:	4313      	orrs	r3, r2
 8001a64:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	021b      	lsls	r3, r3, #8
 8001a72:	4313      	orrs	r3, r2
 8001a74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a21      	ldr	r2, [pc, #132]	; (8001b00 <OC3Config+0xf8>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d00b      	beq.n	8001a96 <OC3Config+0x8e>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a20      	ldr	r2, [pc, #128]	; (8001b04 <OC3Config+0xfc>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d007      	beq.n	8001a96 <OC3Config+0x8e>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a1f      	ldr	r2, [pc, #124]	; (8001b08 <OC3Config+0x100>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d003      	beq.n	8001a96 <OC3Config+0x8e>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a1e      	ldr	r2, [pc, #120]	; (8001b0c <OC3Config+0x104>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d11f      	bne.n	8001ad6 <OC3Config+0xce>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	695b      	ldr	r3, [r3, #20]
 8001aa0:	029b      	lsls	r3, r3, #10
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	029b      	lsls	r3, r3, #10
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	011b      	lsls	r3, r3, #4
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	69db      	ldr	r3, [r3, #28]
 8001ad0:	015b      	lsls	r3, r3, #5
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f7ff fd7f 	bl	80015ec <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	697a      	ldr	r2, [r7, #20]
 8001af2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3718      	adds	r7, #24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40012c00 	.word	0x40012c00
 8001b04:	40014000 	.word	0x40014000
 8001b08:	40014400 	.word	0x40014400
 8001b0c:	40014800 	.word	0x40014800

08001b10 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8001b22:	2300      	movs	r3, #0
 8001b24:	617b      	str	r3, [r7, #20]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a1b      	ldr	r3, [r3, #32]
 8001b2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a1b      	ldr	r3, [r3, #32]
 8001b36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	613b      	str	r3, [r7, #16]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b4a:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	6812      	ldr	r2, [r2, #0]
 8001b5a:	0212      	lsls	r2, r2, #8
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	613b      	str	r3, [r7, #16]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	031b      	lsls	r3, r3, #12
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	031b      	lsls	r3, r3, #12
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4a15      	ldr	r2, [pc, #84]	; (8001bd8 <OC4Config+0xc8>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d00b      	beq.n	8001ba0 <OC4Config+0x90>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4a14      	ldr	r2, [pc, #80]	; (8001bdc <OC4Config+0xcc>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d007      	beq.n	8001ba0 <OC4Config+0x90>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4a13      	ldr	r2, [pc, #76]	; (8001be0 <OC4Config+0xd0>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d003      	beq.n	8001ba0 <OC4Config+0x90>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4a12      	ldr	r2, [pc, #72]	; (8001be4 <OC4Config+0xd4>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d107      	bne.n	8001bb0 <OC4Config+0xa0>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	019b      	lsls	r3, r3, #6
 8001bac:	4313      	orrs	r3, r2
 8001bae:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	697a      	ldr	r2, [r7, #20]
 8001bb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f7ff fd20 	bl	8001608 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3718      	adds	r7, #24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40012c00 	.word	0x40012c00
 8001bdc:	40014000 	.word	0x40014000
 8001be0:	40014400 	.word	0x40014400
 8001be4:	40014800 	.word	0x40014800

08001be8 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a1b      	ldr	r3, [r3, #32]
 8001bfe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a1b      	ldr	r3, [r3, #32]
 8001c0a:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c10:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	6812      	ldr	r2, [r2, #0]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	691b      	ldr	r3, [r3, #16]
 8001c2e:	041b      	lsls	r3, r3, #16
 8001c30:	4313      	orrs	r3, r2
 8001c32:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	041b      	lsls	r3, r3, #16
 8001c40:	4313      	orrs	r3, r2
 8001c42:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4a15      	ldr	r2, [pc, #84]	; (8001c9c <OC5Config+0xb4>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d00b      	beq.n	8001c64 <OC5Config+0x7c>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4a14      	ldr	r2, [pc, #80]	; (8001ca0 <OC5Config+0xb8>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d007      	beq.n	8001c64 <OC5Config+0x7c>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4a13      	ldr	r2, [pc, #76]	; (8001ca4 <OC5Config+0xbc>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d003      	beq.n	8001c64 <OC5Config+0x7c>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4a12      	ldr	r2, [pc, #72]	; (8001ca8 <OC5Config+0xc0>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d109      	bne.n	8001c78 <OC5Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	021b      	lsls	r3, r3, #8
 8001c72:	431a      	orrs	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	4619      	mov	r1, r3
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f7ff fccd 	bl	8001624 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68ba      	ldr	r2, [r7, #8]
 8001c8e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40012c00 	.word	0x40012c00
 8001ca0:	40014000 	.word	0x40014000
 8001ca4:	40014400 	.word	0x40014400
 8001ca8:	40014800 	.word	0x40014800

08001cac <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
 8001cc2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ce0:	683a      	ldr	r2, [r7, #0]
 8001ce2:	6812      	ldr	r2, [r2, #0]
 8001ce4:	0212      	lsls	r2, r2, #8
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	051b      	lsls	r3, r3, #20
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	051b      	lsls	r3, r3, #20
 8001d06:	4313      	orrs	r3, r2
 8001d08:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a14      	ldr	r2, [pc, #80]	; (8001d60 <OC6Config+0xb4>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d00b      	beq.n	8001d2a <OC6Config+0x7e>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a13      	ldr	r2, [pc, #76]	; (8001d64 <OC6Config+0xb8>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d007      	beq.n	8001d2a <OC6Config+0x7e>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a12      	ldr	r2, [pc, #72]	; (8001d68 <OC6Config+0xbc>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d003      	beq.n	8001d2a <OC6Config+0x7e>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a11      	ldr	r2, [pc, #68]	; (8001d6c <OC6Config+0xc0>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d109      	bne.n	8001d3e <OC6Config+0x92>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	029b      	lsls	r3, r3, #10
 8001d38:	431a      	orrs	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	4619      	mov	r1, r3
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f7ff fc78 	bl	8001640 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68ba      	ldr	r2, [r7, #8]
 8001d54:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3710      	adds	r7, #16
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40012c00 	.word	0x40012c00
 8001d64:	40014000 	.word	0x40014000
 8001d68:	40014400 	.word	0x40014400
 8001d6c:	40014800 	.word	0x40014800

08001d70 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d82:	4a07      	ldr	r2, [pc, #28]	; (8001da0 <LL_InitTick+0x30>)
 8001d84:	3b01      	subs	r3, #1
 8001d86:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001d88:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <LL_InitTick+0x30>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d8e:	4b04      	ldr	r3, [pc, #16]	; (8001da0 <LL_InitTick+0x30>)
 8001d90:	2205      	movs	r2, #5
 8001d92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	e000e010 	.word	0xe000e010

08001da4 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001dac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f7ff ffdd 	bl	8001d70 <LL_InitTick>
}
 8001db6:	bf00      	nop
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
	...

08001dc0 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8001dc8:	4b0e      	ldr	r3, [pc, #56]	; (8001e04 <LL_mDelay+0x44>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8001dce:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dd6:	d00c      	beq.n	8001df2 <LL_mDelay+0x32>
  {
    Delay++;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8001dde:	e008      	b.n	8001df2 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001de0:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <LL_mDelay+0x44>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d002      	beq.n	8001df2 <LL_mDelay+0x32>
    {
      Delay--;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3b01      	subs	r3, #1
 8001df0:	607b      	str	r3, [r7, #4]
  while (Delay)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1f3      	bne.n	8001de0 <LL_mDelay+0x20>
    }
  }
}
 8001df8:	bf00      	nop
 8001dfa:	3714      	adds	r7, #20
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	e000e010 	.word	0xe000e010

08001e08 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001e10:	4a04      	ldr	r2, [pc, #16]	; (8001e24 <LL_SetSystemCoreClock+0x1c>)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6013      	str	r3, [r2, #0]
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	20000004 	.word	0x20000004

08001e28 <LL_TIM_ClearFlag_UPDATE>:
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f06f 0201 	mvn.w	r2, #1
 8001e36:	611a      	str	r2, [r3, #16]
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	bf0c      	ite	eq
 8001e58:	2301      	moveq	r3, #1
 8001e5a:	2300      	movne	r3, #0
 8001e5c:	b2db      	uxtb	r3, r3
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
 8001e72:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	619a      	str	r2, [r3, #24]
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
 8001e8e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
	...

08001ea4 <resetSegments>:
void updateDisplay(void);
void setDigit(uint8_t pos);

/*Reset (turn-off) all the segments of display*/
void resetSegments(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8001ea8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001eac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eb0:	f7ff ffdb 	bl	8001e6a <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8001eb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001eb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ebc:	f7ff ffd5 	bl	8001e6a <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_1);
 8001ec0:	2102      	movs	r1, #2
 8001ec2:	480e      	ldr	r0, [pc, #56]	; (8001efc <resetSegments+0x58>)
 8001ec4:	f7ff ffd1 	bl	8001e6a <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8001ec8:	2120      	movs	r1, #32
 8001eca:	480c      	ldr	r0, [pc, #48]	; (8001efc <resetSegments+0x58>)
 8001ecc:	f7ff ffcd 	bl	8001e6a <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8001ed0:	2110      	movs	r1, #16
 8001ed2:	480a      	ldr	r0, [pc, #40]	; (8001efc <resetSegments+0x58>)
 8001ed4:	f7ff ffc9 	bl	8001e6a <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8001ed8:	2101      	movs	r1, #1
 8001eda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ede:	f7ff ffc4 	bl	8001e6a <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_1);
 8001ee2:	2102      	movs	r1, #2
 8001ee4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ee8:	f7ff ffbf 	bl	8001e6a <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8001eec:	2108      	movs	r1, #8
 8001eee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ef2:	f7ff ffba 	bl	8001e6a <LL_GPIO_SetOutputPin>
}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	48000400 	.word	0x48000400

08001f00 <setSegments>:

/*Set (turn-on) all the segments of display*/
void setSegments(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8001f04:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f0c:	f7ff ffbb 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8001f10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f18:	f7ff ffb5 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1);
 8001f1c:	2102      	movs	r1, #2
 8001f1e:	480e      	ldr	r0, [pc, #56]	; (8001f58 <setSegments+0x58>)
 8001f20:	f7ff ffb1 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8001f24:	2120      	movs	r1, #32
 8001f26:	480c      	ldr	r0, [pc, #48]	; (8001f58 <setSegments+0x58>)
 8001f28:	f7ff ffad 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8001f2c:	2110      	movs	r1, #16
 8001f2e:	480a      	ldr	r0, [pc, #40]	; (8001f58 <setSegments+0x58>)
 8001f30:	f7ff ffa9 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8001f34:	2101      	movs	r1, #1
 8001f36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f3a:	f7ff ffa4 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_1);
 8001f3e:	2102      	movs	r1, #2
 8001f40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f44:	f7ff ff9f 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8001f48:	2108      	movs	r1, #8
 8001f4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f4e:	f7ff ff9a 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	48000400 	.word	0x48000400

08001f5c <resetDigits>:

/* Reset (turn-off) all digits*/
void resetDigits(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_2);
 8001f60:	2104      	movs	r1, #4
 8001f62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f66:	f7ff ff8e 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);
 8001f6a:	2120      	movs	r1, #32
 8001f6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f70:	f7ff ff89 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 8001f74:	2110      	movs	r1, #16
 8001f76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f7a:	f7ff ff84 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_6);
 8001f7e:	2140      	movs	r1, #64	; 0x40
 8001f80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f84:	f7ff ff7f 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7);
 8001f88:	2180      	movs	r1, #128	; 0x80
 8001f8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f8e:	f7ff ff7a 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
	...

08001f98 <setDigits>:

/* Reset (turn-on) all digits*/
void setDigits(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
	DIGIT_1_ON;
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	480d      	ldr	r0, [pc, #52]	; (8001fd4 <setDigits+0x3c>)
 8001fa0:	f7ff ff63 	bl	8001e6a <LL_GPIO_SetOutputPin>
	DIGIT_2_ON;
 8001fa4:	2110      	movs	r1, #16
 8001fa6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001faa:	f7ff ff5e 	bl	8001e6a <LL_GPIO_SetOutputPin>
	DIGIT_3_ON;
 8001fae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fb6:	f7ff ff58 	bl	8001e6a <LL_GPIO_SetOutputPin>
	DIGIT_4_ON;
 8001fba:	2104      	movs	r1, #4
 8001fbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fc0:	f7ff ff53 	bl	8001e6a <LL_GPIO_SetOutputPin>
	DIGIT_TIME_ON;
 8001fc4:	2180      	movs	r1, #128	; 0x80
 8001fc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fca:	f7ff ff4e 	bl	8001e6a <LL_GPIO_SetOutputPin>
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	48000400 	.word	0x48000400

08001fd8 <setDecimalPoint>:

void setDecimalPoint(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTDP_PORT, SEGMENTDP_PIN);
 8001fdc:	2102      	movs	r1, #2
 8001fde:	4802      	ldr	r0, [pc, #8]	; (8001fe8 <setDecimalPoint+0x10>)
 8001fe0:	f7ff ff51 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8001fe4:	bf00      	nop
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	48000400 	.word	0x48000400

08001fec <setOne>:

/* Functions to display numbers 0 - 9 */
void setOne(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
	// B,C
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ff6:	f7ff ff46 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001ffa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ffe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002002:	f7ff ff40 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
	...

0800200c <setTwo>:

void setTwo(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
	// A,B,G,E,D
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002010:	2101      	movs	r1, #1
 8002012:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002016:	f7ff ff36 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800201a:	2102      	movs	r1, #2
 800201c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002020:	f7ff ff31 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002024:	2110      	movs	r1, #16
 8002026:	4807      	ldr	r0, [pc, #28]	; (8002044 <setTwo+0x38>)
 8002028:	f7ff ff2d 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800202c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002030:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002034:	f7ff ff27 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002038:	2120      	movs	r1, #32
 800203a:	4802      	ldr	r0, [pc, #8]	; (8002044 <setTwo+0x38>)
 800203c:	f7ff ff23 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8002040:	bf00      	nop
 8002042:	bd80      	pop	{r7, pc}
 8002044:	48000400 	.word	0x48000400

08002048 <setThree>:

void setThree(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
	// A,B,G,C,D
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 800204c:	2101      	movs	r1, #1
 800204e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002052:	f7ff ff18 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8002056:	2102      	movs	r1, #2
 8002058:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800205c:	f7ff ff13 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002060:	2110      	movs	r1, #16
 8002062:	4807      	ldr	r0, [pc, #28]	; (8002080 <setThree+0x38>)
 8002064:	f7ff ff0f 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8002068:	f44f 7180 	mov.w	r1, #256	; 0x100
 800206c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002070:	f7ff ff09 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002074:	2120      	movs	r1, #32
 8002076:	4802      	ldr	r0, [pc, #8]	; (8002080 <setThree+0x38>)
 8002078:	f7ff ff05 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 800207c:	bf00      	nop
 800207e:	bd80      	pop	{r7, pc}
 8002080:	48000400 	.word	0x48000400

08002084 <setFour>:

void setFour(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
	// F,B,G,C
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002088:	2108      	movs	r1, #8
 800208a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800208e:	f7ff fefa 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002092:	2101      	movs	r1, #1
 8002094:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002098:	f7ff fef5 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800209c:	2110      	movs	r1, #16
 800209e:	4805      	ldr	r0, [pc, #20]	; (80020b4 <setFour+0x30>)
 80020a0:	f7ff fef1 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80020a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020ac:	f7ff feeb 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 80020b0:	bf00      	nop
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	48000400 	.word	0x48000400

080020b8 <setFive>:

void setFive(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
	// A,F,G,C,D
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80020bc:	2108      	movs	r1, #8
 80020be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020c2:	f7ff fee0 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80020c6:	2120      	movs	r1, #32
 80020c8:	4809      	ldr	r0, [pc, #36]	; (80020f0 <setFive+0x38>)
 80020ca:	f7ff fedc 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80020ce:	2110      	movs	r1, #16
 80020d0:	4807      	ldr	r0, [pc, #28]	; (80020f0 <setFive+0x38>)
 80020d2:	f7ff fed8 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80020d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020de:	f7ff fed2 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80020e2:	2102      	movs	r1, #2
 80020e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020e8:	f7ff fecd 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 80020ec:	bf00      	nop
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	48000400 	.word	0x48000400

080020f4 <setSix>:

void setSix(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
	// A,F,G,E,C,D
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80020f8:	2108      	movs	r1, #8
 80020fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020fe:	f7ff fec2 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002102:	2120      	movs	r1, #32
 8002104:	480c      	ldr	r0, [pc, #48]	; (8002138 <setSix+0x44>)
 8002106:	f7ff febe 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800210a:	2110      	movs	r1, #16
 800210c:	480a      	ldr	r0, [pc, #40]	; (8002138 <setSix+0x44>)
 800210e:	f7ff feba 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8002112:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002116:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800211a:	f7ff feb4 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800211e:	2102      	movs	r1, #2
 8002120:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002124:	f7ff feaf 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002128:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800212c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002130:	f7ff fea9 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8002134:	bf00      	nop
 8002136:	bd80      	pop	{r7, pc}
 8002138:	48000400 	.word	0x48000400

0800213c <setSeven>:

void setSeven(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
	// A,B,C
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002140:	2101      	movs	r1, #1
 8002142:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002146:	f7ff fe9e 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800214a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800214e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002152:	f7ff fe98 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8002156:	2102      	movs	r1, #2
 8002158:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800215c:	f7ff fe93 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8002160:	bf00      	nop
 8002162:	bd80      	pop	{r7, pc}

08002164 <setEight>:

void setEight(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
	// A,B,C,D,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002168:	2108      	movs	r1, #8
 800216a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800216e:	f7ff fe8a 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002172:	2120      	movs	r1, #32
 8002174:	480f      	ldr	r0, [pc, #60]	; (80021b4 <setEight+0x50>)
 8002176:	f7ff fe86 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800217a:	2110      	movs	r1, #16
 800217c:	480d      	ldr	r0, [pc, #52]	; (80021b4 <setEight+0x50>)
 800217e:	f7ff fe82 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8002182:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002186:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800218a:	f7ff fe7c 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800218e:	2102      	movs	r1, #2
 8002190:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002194:	f7ff fe77 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002198:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800219c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021a0:	f7ff fe71 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80021a4:	2101      	movs	r1, #1
 80021a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021aa:	f7ff fe6c 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 80021ae:	bf00      	nop
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	48000400 	.word	0x48000400

080021b8 <setNine>:

void setNine(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
	// A,B,C
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80021bc:	2101      	movs	r1, #1
 80021be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021c2:	f7ff fe60 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80021c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021ce:	f7ff fe5a 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80021d2:	2102      	movs	r1, #2
 80021d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021d8:	f7ff fe55 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80021dc:	2110      	movs	r1, #16
 80021de:	4805      	ldr	r0, [pc, #20]	; (80021f4 <setNine+0x3c>)
 80021e0:	f7ff fe51 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80021e4:	2108      	movs	r1, #8
 80021e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021ea:	f7ff fe4c 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	48000400 	.word	0x48000400

080021f8 <setZero>:

void setZero(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
	// A,B,C,D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80021fc:	2108      	movs	r1, #8
 80021fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002202:	f7ff fe40 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002206:	2120      	movs	r1, #32
 8002208:	480d      	ldr	r0, [pc, #52]	; (8002240 <setZero+0x48>)
 800220a:	f7ff fe3c 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800220e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002212:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002216:	f7ff fe36 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800221a:	2102      	movs	r1, #2
 800221c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002220:	f7ff fe31 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002224:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002228:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800222c:	f7ff fe2b 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002230:	2101      	movs	r1, #1
 8002232:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002236:	f7ff fe26 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 800223a:	bf00      	nop
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	48000400 	.word	0x48000400

08002244 <setA>:

void setA(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
	// A,B,C,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002248:	2108      	movs	r1, #8
 800224a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800224e:	f7ff fe1a 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002252:	2110      	movs	r1, #16
 8002254:	480d      	ldr	r0, [pc, #52]	; (800228c <setA+0x48>)
 8002256:	f7ff fe16 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800225a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800225e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002262:	f7ff fe10 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8002266:	2102      	movs	r1, #2
 8002268:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800226c:	f7ff fe0b 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002270:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002274:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002278:	f7ff fe05 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 800227c:	2101      	movs	r1, #1
 800227e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002282:	f7ff fe00 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8002286:	bf00      	nop
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	48000400 	.word	0x48000400

08002290 <seta>:

void seta(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
	// A,B,C,E,D,G
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002294:	2120      	movs	r1, #32
 8002296:	480f      	ldr	r0, [pc, #60]	; (80022d4 <seta+0x44>)
 8002298:	f7ff fdf5 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800229c:	2110      	movs	r1, #16
 800229e:	480d      	ldr	r0, [pc, #52]	; (80022d4 <seta+0x44>)
 80022a0:	f7ff fdf1 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80022a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022ac:	f7ff fdeb 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80022b0:	2102      	movs	r1, #2
 80022b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022b6:	f7ff fde6 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80022ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022c2:	f7ff fde0 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80022c6:	2101      	movs	r1, #1
 80022c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022cc:	f7ff fddb 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 80022d0:	bf00      	nop
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	48000400 	.word	0x48000400

080022d8 <setb>:

void setb(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
	// C,D,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80022dc:	2108      	movs	r1, #8
 80022de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022e2:	f7ff fdd0 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80022e6:	2110      	movs	r1, #16
 80022e8:	480a      	ldr	r0, [pc, #40]	; (8002314 <setb+0x3c>)
 80022ea:	f7ff fdcc 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80022ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022f6:	f7ff fdc6 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80022fa:	2120      	movs	r1, #32
 80022fc:	4805      	ldr	r0, [pc, #20]	; (8002314 <setb+0x3c>)
 80022fe:	f7ff fdc2 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002302:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002306:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800230a:	f7ff fdbc 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 800230e:	bf00      	nop
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	48000400 	.word	0x48000400

08002318 <setC>:

void setC(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
	// A,D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800231c:	2108      	movs	r1, #8
 800231e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002322:	f7ff fdb0 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002326:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800232a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800232e:	f7ff fdaa 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8002332:	2102      	movs	r1, #2
 8002334:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002338:	f7ff fda5 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800233c:	2120      	movs	r1, #32
 800233e:	4802      	ldr	r0, [pc, #8]	; (8002348 <setC+0x30>)
 8002340:	f7ff fda1 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8002344:	bf00      	nop
 8002346:	bd80      	pop	{r7, pc}
 8002348:	48000400 	.word	0x48000400

0800234c <setc>:

void setc(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
	// D,E,G
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002350:	2120      	movs	r1, #32
 8002352:	4807      	ldr	r0, [pc, #28]	; (8002370 <setc+0x24>)
 8002354:	f7ff fd97 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002358:	2110      	movs	r1, #16
 800235a:	4805      	ldr	r0, [pc, #20]	; (8002370 <setc+0x24>)
 800235c:	f7ff fd93 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002360:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002364:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002368:	f7ff fd8d 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 800236c:	bf00      	nop
 800236e:	bd80      	pop	{r7, pc}
 8002370:	48000400 	.word	0x48000400

08002374 <setd>:

void setd(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
	// B,C,D,E,G
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002378:	2120      	movs	r1, #32
 800237a:	480d      	ldr	r0, [pc, #52]	; (80023b0 <setd+0x3c>)
 800237c:	f7ff fd83 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002380:	2110      	movs	r1, #16
 8002382:	480b      	ldr	r0, [pc, #44]	; (80023b0 <setd+0x3c>)
 8002384:	f7ff fd7f 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8002388:	f44f 7180 	mov.w	r1, #256	; 0x100
 800238c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002390:	f7ff fd79 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002394:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002398:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800239c:	f7ff fd73 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80023a0:	2101      	movs	r1, #1
 80023a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023a6:	f7ff fd6e 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 80023aa:	bf00      	nop
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	48000400 	.word	0x48000400

080023b4 <setE>:

void setE(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
	// A,D,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80023b8:	2108      	movs	r1, #8
 80023ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023be:	f7ff fd62 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80023c2:	2110      	movs	r1, #16
 80023c4:	4809      	ldr	r0, [pc, #36]	; (80023ec <setE+0x38>)
 80023c6:	f7ff fd5e 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80023ca:	2120      	movs	r1, #32
 80023cc:	4807      	ldr	r0, [pc, #28]	; (80023ec <setE+0x38>)
 80023ce:	f7ff fd5a 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80023d2:	2102      	movs	r1, #2
 80023d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023d8:	f7ff fd55 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80023dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023e4:	f7ff fd4f 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 80023e8:	bf00      	nop
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	48000400 	.word	0x48000400

080023f0 <setF>:

void setF(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
	// A,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80023f4:	2108      	movs	r1, #8
 80023f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023fa:	f7ff fd44 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80023fe:	2110      	movs	r1, #16
 8002400:	4807      	ldr	r0, [pc, #28]	; (8002420 <setF+0x30>)
 8002402:	f7ff fd40 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8002406:	2102      	movs	r1, #2
 8002408:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800240c:	f7ff fd3b 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002410:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002414:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002418:	f7ff fd35 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 800241c:	bf00      	nop
 800241e:	bd80      	pop	{r7, pc}
 8002420:	48000400 	.word	0x48000400

08002424 <setG>:

void setG(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
	// A,C,D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002428:	2108      	movs	r1, #8
 800242a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800242e:	f7ff fd2a 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002432:	2120      	movs	r1, #32
 8002434:	480a      	ldr	r0, [pc, #40]	; (8002460 <setG+0x3c>)
 8002436:	f7ff fd26 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800243a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800243e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002442:	f7ff fd20 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8002446:	2102      	movs	r1, #2
 8002448:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800244c:	f7ff fd1b 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002450:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002454:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002458:	f7ff fd15 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 800245c:	bf00      	nop
 800245e:	bd80      	pop	{r7, pc}
 8002460:	48000400 	.word	0x48000400

08002464 <setH>:

void setH(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
	// B,C,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002468:	2108      	movs	r1, #8
 800246a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800246e:	f7ff fd0a 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002472:	2110      	movs	r1, #16
 8002474:	480a      	ldr	r0, [pc, #40]	; (80024a0 <setH+0x3c>)
 8002476:	f7ff fd06 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800247a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800247e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002482:	f7ff fd00 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002486:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800248a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800248e:	f7ff fcfa 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002492:	2101      	movs	r1, #1
 8002494:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002498:	f7ff fcf5 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 800249c:	bf00      	nop
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	48000400 	.word	0x48000400

080024a4 <seth>:

void seth(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
	// C,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80024a8:	2108      	movs	r1, #8
 80024aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024ae:	f7ff fcea 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80024b2:	2110      	movs	r1, #16
 80024b4:	4808      	ldr	r0, [pc, #32]	; (80024d8 <seth+0x34>)
 80024b6:	f7ff fce6 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80024ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024c2:	f7ff fce0 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80024c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024ce:	f7ff fcda 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 80024d2:	bf00      	nop
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	48000400 	.word	0x48000400

080024dc <setI>:

void setI(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
	// E,F
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80024e0:	2108      	movs	r1, #8
 80024e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024e6:	f7ff fcce 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80024ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024f2:	f7ff fcc8 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 80024f6:	bf00      	nop
 80024f8:	bd80      	pop	{r7, pc}
	...

080024fc <setJ>:

void setJ(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
	// B,C,D,E
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002500:	2120      	movs	r1, #32
 8002502:	480b      	ldr	r0, [pc, #44]	; (8002530 <setJ+0x34>)
 8002504:	f7ff fcbf 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8002508:	f44f 7180 	mov.w	r1, #256	; 0x100
 800250c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002510:	f7ff fcb9 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002514:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002518:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800251c:	f7ff fcb3 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002520:	2101      	movs	r1, #1
 8002522:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002526:	f7ff fcae 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 800252a:	bf00      	nop
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	48000400 	.word	0x48000400

08002534 <setL>:

void setL(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
	// D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002538:	2108      	movs	r1, #8
 800253a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800253e:	f7ff fca2 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002542:	2120      	movs	r1, #32
 8002544:	4805      	ldr	r0, [pc, #20]	; (800255c <setL+0x28>)
 8002546:	f7ff fc9e 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800254a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800254e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002552:	f7ff fc98 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8002556:	bf00      	nop
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	48000400 	.word	0x48000400

08002560 <setn>:

void setn(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
	// C,E,G
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002564:	2110      	movs	r1, #16
 8002566:	4808      	ldr	r0, [pc, #32]	; (8002588 <setn+0x28>)
 8002568:	f7ff fc8d 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800256c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002570:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002574:	f7ff fc87 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002578:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800257c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002580:	f7ff fc81 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8002584:	bf00      	nop
 8002586:	bd80      	pop	{r7, pc}
 8002588:	48000400 	.word	0x48000400

0800258c <setO>:

void setO(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
	// A,B,C,D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002590:	2108      	movs	r1, #8
 8002592:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002596:	f7ff fc76 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800259a:	2120      	movs	r1, #32
 800259c:	480d      	ldr	r0, [pc, #52]	; (80025d4 <setO+0x48>)
 800259e:	f7ff fc72 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80025a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025aa:	f7ff fc6c 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80025ae:	2102      	movs	r1, #2
 80025b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025b4:	f7ff fc67 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80025b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025c0:	f7ff fc61 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80025c4:	2101      	movs	r1, #1
 80025c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025ca:	f7ff fc5c 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 80025ce:	bf00      	nop
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	48000400 	.word	0x48000400

080025d8 <seto>:

void seto(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
	// C,D,E,G
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80025dc:	2120      	movs	r1, #32
 80025de:	480a      	ldr	r0, [pc, #40]	; (8002608 <seto+0x30>)
 80025e0:	f7ff fc51 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80025e4:	2110      	movs	r1, #16
 80025e6:	4808      	ldr	r0, [pc, #32]	; (8002608 <seto+0x30>)
 80025e8:	f7ff fc4d 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80025ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025f4:	f7ff fc47 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80025f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002600:	f7ff fc41 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8002604:	bf00      	nop
 8002606:	bd80      	pop	{r7, pc}
 8002608:	48000400 	.word	0x48000400

0800260c <setP>:

void setP(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
	// A,B,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002610:	2108      	movs	r1, #8
 8002612:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002616:	f7ff fc36 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800261a:	2110      	movs	r1, #16
 800261c:	480a      	ldr	r0, [pc, #40]	; (8002648 <setP+0x3c>)
 800261e:	f7ff fc32 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8002622:	2102      	movs	r1, #2
 8002624:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002628:	f7ff fc2d 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800262c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002630:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002634:	f7ff fc27 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002638:	2101      	movs	r1, #1
 800263a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800263e:	f7ff fc22 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8002642:	bf00      	nop
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	48000400 	.word	0x48000400

0800264c <setq>:

void setq(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
	// A,B,C,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002650:	2108      	movs	r1, #8
 8002652:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002656:	f7ff fc16 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800265a:	2110      	movs	r1, #16
 800265c:	480a      	ldr	r0, [pc, #40]	; (8002688 <setq+0x3c>)
 800265e:	f7ff fc12 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8002662:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002666:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800266a:	f7ff fc0c 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800266e:	2102      	movs	r1, #2
 8002670:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002674:	f7ff fc07 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002678:	2101      	movs	r1, #1
 800267a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800267e:	f7ff fc02 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	48000400 	.word	0x48000400

0800268c <setr>:

void setr(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
	// E,G
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002690:	2110      	movs	r1, #16
 8002692:	4805      	ldr	r0, [pc, #20]	; (80026a8 <setr+0x1c>)
 8002694:	f7ff fbf7 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002698:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800269c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026a0:	f7ff fbf1 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 80026a4:	bf00      	nop
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	48000400 	.word	0x48000400

080026ac <setS>:

void setS(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
	// A,C,D,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80026b0:	2108      	movs	r1, #8
 80026b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026b6:	f7ff fbe6 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80026ba:	2110      	movs	r1, #16
 80026bc:	4809      	ldr	r0, [pc, #36]	; (80026e4 <setS+0x38>)
 80026be:	f7ff fbe2 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80026c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026ca:	f7ff fbdc 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80026ce:	2102      	movs	r1, #2
 80026d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026d4:	f7ff fbd7 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80026d8:	2120      	movs	r1, #32
 80026da:	4802      	ldr	r0, [pc, #8]	; (80026e4 <setS+0x38>)
 80026dc:	f7ff fbd3 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 80026e0:	bf00      	nop
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	48000400 	.word	0x48000400

080026e8 <sett>:

void sett(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
	// D,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80026ec:	2108      	movs	r1, #8
 80026ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026f2:	f7ff fbc8 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80026f6:	2110      	movs	r1, #16
 80026f8:	4807      	ldr	r0, [pc, #28]	; (8002718 <sett+0x30>)
 80026fa:	f7ff fbc4 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80026fe:	2120      	movs	r1, #32
 8002700:	4805      	ldr	r0, [pc, #20]	; (8002718 <sett+0x30>)
 8002702:	f7ff fbc0 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002706:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800270a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800270e:	f7ff fbba 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8002712:	bf00      	nop
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	48000400 	.word	0x48000400

0800271c <setU>:

void setU(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
	// B,C,D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002720:	2108      	movs	r1, #8
 8002722:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002726:	f7ff fbae 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800272a:	2120      	movs	r1, #32
 800272c:	480a      	ldr	r0, [pc, #40]	; (8002758 <setU+0x3c>)
 800272e:	f7ff fbaa 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8002732:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002736:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800273a:	f7ff fba4 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800273e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002742:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002746:	f7ff fb9e 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 800274a:	2101      	movs	r1, #1
 800274c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002750:	f7ff fb99 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8002754:	bf00      	nop
 8002756:	bd80      	pop	{r7, pc}
 8002758:	48000400 	.word	0x48000400

0800275c <setu>:

void setu(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
	// C,D,E
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002760:	2120      	movs	r1, #32
 8002762:	4808      	ldr	r0, [pc, #32]	; (8002784 <setu+0x28>)
 8002764:	f7ff fb8f 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8002768:	f44f 7180 	mov.w	r1, #256	; 0x100
 800276c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002770:	f7ff fb89 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002774:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002778:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800277c:	f7ff fb83 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8002780:	bf00      	nop
 8002782:	bd80      	pop	{r7, pc}
 8002784:	48000400 	.word	0x48000400

08002788 <sety>:

void sety(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
	// B,C,D,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800278c:	2108      	movs	r1, #8
 800278e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002792:	f7ff fb78 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002796:	2110      	movs	r1, #16
 8002798:	4809      	ldr	r0, [pc, #36]	; (80027c0 <sety+0x38>)
 800279a:	f7ff fb74 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800279e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027a6:	f7ff fb6e 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80027aa:	2120      	movs	r1, #32
 80027ac:	4804      	ldr	r0, [pc, #16]	; (80027c0 <sety+0x38>)
 80027ae:	f7ff fb6a 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80027b2:	2101      	movs	r1, #1
 80027b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027b8:	f7ff fb65 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 80027bc:	bf00      	nop
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	48000400 	.word	0x48000400

080027c4 <setK>:

void setK(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
	// A,C,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80027c8:	2108      	movs	r1, #8
 80027ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027ce:	f7ff fb5a 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80027d2:	2110      	movs	r1, #16
 80027d4:	480a      	ldr	r0, [pc, #40]	; (8002800 <setK+0x3c>)
 80027d6:	f7ff fb56 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80027da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027e2:	f7ff fb50 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80027e6:	2102      	movs	r1, #2
 80027e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027ec:	f7ff fb4b 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80027f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80027f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027f8:	f7ff fb45 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 80027fc:	bf00      	nop
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	48000400 	.word	0x48000400

08002804 <setM>:

void setM(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
	// A,B,D,F
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002808:	2108      	movs	r1, #8
 800280a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800280e:	f7ff fb3a 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002812:	2120      	movs	r1, #32
 8002814:	4807      	ldr	r0, [pc, #28]	; (8002834 <setM+0x30>)
 8002816:	f7ff fb36 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800281a:	2102      	movs	r1, #2
 800281c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002820:	f7ff fb31 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002824:	2101      	movs	r1, #1
 8002826:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800282a:	f7ff fb2c 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 800282e:	bf00      	nop
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	48000400 	.word	0x48000400

08002838 <setV>:

void setV(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
	// B,D,F
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800283c:	2108      	movs	r1, #8
 800283e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002842:	f7ff fb20 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002846:	2120      	movs	r1, #32
 8002848:	4804      	ldr	r0, [pc, #16]	; (800285c <setV+0x24>)
 800284a:	f7ff fb1c 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 800284e:	2101      	movs	r1, #1
 8002850:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002854:	f7ff fb17 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8002858:	bf00      	nop
 800285a:	bd80      	pop	{r7, pc}
 800285c:	48000400 	.word	0x48000400

08002860 <setW>:

void setW(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
	// B,C,D,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002864:	2108      	movs	r1, #8
 8002866:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800286a:	f7ff fb0c 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800286e:	2120      	movs	r1, #32
 8002870:	480c      	ldr	r0, [pc, #48]	; (80028a4 <setW+0x44>)
 8002872:	f7ff fb08 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8002876:	f44f 7180 	mov.w	r1, #256	; 0x100
 800287a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800287e:	f7ff fb02 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002882:	2101      	movs	r1, #1
 8002884:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002888:	f7ff fafd 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800288c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002890:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002894:	f7ff faf7 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002898:	2110      	movs	r1, #16
 800289a:	4802      	ldr	r0, [pc, #8]	; (80028a4 <setW+0x44>)
 800289c:	f7ff faf3 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 80028a0:	bf00      	nop
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	48000400 	.word	0x48000400

080028a8 <setX>:

void setX(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
	// A,G,D
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80028ac:	2110      	movs	r1, #16
 80028ae:	4807      	ldr	r0, [pc, #28]	; (80028cc <setX+0x24>)
 80028b0:	f7ff fae9 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80028b4:	2120      	movs	r1, #32
 80028b6:	4805      	ldr	r0, [pc, #20]	; (80028cc <setX+0x24>)
 80028b8:	f7ff fae5 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80028bc:	2102      	movs	r1, #2
 80028be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028c2:	f7ff fae0 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 80028c6:	bf00      	nop
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	48000400 	.word	0x48000400

080028d0 <setZ>:

void setZ(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
	// A,B,D,E,G
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80028d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80028d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028dc:	f7ff fad3 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80028e0:	2120      	movs	r1, #32
 80028e2:	4809      	ldr	r0, [pc, #36]	; (8002908 <setZ+0x38>)
 80028e4:	f7ff facf 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80028e8:	2102      	movs	r1, #2
 80028ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028ee:	f7ff faca 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80028f2:	2101      	movs	r1, #1
 80028f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028f8:	f7ff fac5 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80028fc:	2110      	movs	r1, #16
 80028fe:	4802      	ldr	r0, [pc, #8]	; (8002908 <setZ+0x38>)
 8002900:	f7ff fac1 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8002904:	bf00      	nop
 8002906:	bd80      	pop	{r7, pc}
 8002908:	48000400 	.word	0x48000400

0800290c <setUnderscore>:

void setUnderscore(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
	// D
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002910:	2120      	movs	r1, #32
 8002912:	4802      	ldr	r0, [pc, #8]	; (800291c <setUnderscore+0x10>)
 8002914:	f7ff fab7 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8002918:	bf00      	nop
 800291a:	bd80      	pop	{r7, pc}
 800291c:	48000400 	.word	0x48000400

08002920 <displayNumber>:

/**
 * Pre-process number before it is displayed. Extract digits of the number
 */
void displayNumber(char *text)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8002928:	2300      	movs	r3, #0
 800292a:	73fb      	strb	r3, [r7, #15]

	dDisplayData.digit_num = 4;
 800292c:	4b0f      	ldr	r3, [pc, #60]	; (800296c <displayNumber+0x4c>)
 800292e:	2204      	movs	r2, #4
 8002930:	711a      	strb	r2, [r3, #4]
	dDisplayData.negative = 0;
 8002932:	4b0e      	ldr	r3, [pc, #56]	; (800296c <displayNumber+0x4c>)
 8002934:	2200      	movs	r2, #0
 8002936:	715a      	strb	r2, [r3, #5]
	dDisplayData.resolution = 0;
 8002938:	4b0c      	ldr	r3, [pc, #48]	; (800296c <displayNumber+0x4c>)
 800293a:	2200      	movs	r2, #0
 800293c:	719a      	strb	r2, [r3, #6]

	for (i = 0; i < 4; i++) {
 800293e:	2300      	movs	r3, #0
 8002940:	73fb      	strb	r3, [r7, #15]
 8002942:	e009      	b.n	8002958 <displayNumber+0x38>
		dDisplayData.digit[i] = *text++;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	1c5a      	adds	r2, r3, #1
 8002948:	607a      	str	r2, [r7, #4]
 800294a:	7bfa      	ldrb	r2, [r7, #15]
 800294c:	7819      	ldrb	r1, [r3, #0]
 800294e:	4b07      	ldr	r3, [pc, #28]	; (800296c <displayNumber+0x4c>)
 8002950:	5499      	strb	r1, [r3, r2]
	for (i = 0; i < 4; i++) {
 8002952:	7bfb      	ldrb	r3, [r7, #15]
 8002954:	3301      	adds	r3, #1
 8002956:	73fb      	strb	r3, [r7, #15]
 8002958:	7bfb      	ldrb	r3, [r7, #15]
 800295a:	2b03      	cmp	r3, #3
 800295c:	d9f2      	bls.n	8002944 <displayNumber+0x24>
	}
}
 800295e:	bf00      	nop
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	200001fc 	.word	0x200001fc

08002970 <setDigit>:

/*
 * Turns required digit ON
 */
void setDigit(uint8_t pos)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	4603      	mov	r3, r0
 8002978:	71fb      	strb	r3, [r7, #7]
	switch(pos)
 800297a:	79fb      	ldrb	r3, [r7, #7]
 800297c:	2b03      	cmp	r3, #3
 800297e:	d823      	bhi.n	80029c8 <setDigit+0x58>
 8002980:	a201      	add	r2, pc, #4	; (adr r2, 8002988 <setDigit+0x18>)
 8002982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002986:	bf00      	nop
 8002988:	080029bf 	.word	0x080029bf
 800298c:	080029b3 	.word	0x080029b3
 8002990:	080029a5 	.word	0x080029a5
 8002994:	08002999 	.word	0x08002999
	{
		case 3:
			DIGIT_4_ON;
 8002998:	2104      	movs	r1, #4
 800299a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800299e:	f7ff fa64 	bl	8001e6a <LL_GPIO_SetOutputPin>
			break;
 80029a2:	e011      	b.n	80029c8 <setDigit+0x58>
		case 2:
			DIGIT_3_ON;
 80029a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029ac:	f7ff fa5d 	bl	8001e6a <LL_GPIO_SetOutputPin>
			break;
 80029b0:	e00a      	b.n	80029c8 <setDigit+0x58>
		case 1:
			DIGIT_2_ON;
 80029b2:	2110      	movs	r1, #16
 80029b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029b8:	f7ff fa57 	bl	8001e6a <LL_GPIO_SetOutputPin>
			break;
 80029bc:	e004      	b.n	80029c8 <setDigit+0x58>
		case 0:
			DIGIT_1_ON;
 80029be:	2101      	movs	r1, #1
 80029c0:	4803      	ldr	r0, [pc, #12]	; (80029d0 <setDigit+0x60>)
 80029c2:	f7ff fa52 	bl	8001e6a <LL_GPIO_SetOutputPin>
			break;
 80029c6:	bf00      	nop
	}
}
 80029c8:	bf00      	nop
 80029ca:	3708      	adds	r7, #8
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	48000400 	.word	0x48000400

080029d4 <updateDisplay>:
/**
 * Display data in dDisplayData.
 * Sets every digit to display its value and decimal point.
 */
void updateDisplay(void)
{
 80029d4:	b590      	push	{r4, r7, lr}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < 4; i++)
 80029da:	2300      	movs	r3, #0
 80029dc:	71fb      	strb	r3, [r7, #7]
 80029de:	e1e7      	b.n	8002db0 <updateDisplay+0x3dc>
	{
		switch(dDisplayData.digit[i])
 80029e0:	79fb      	ldrb	r3, [r7, #7]
 80029e2:	4ad3      	ldr	r2, [pc, #844]	; (8002d30 <updateDisplay+0x35c>)
 80029e4:	5cd3      	ldrb	r3, [r2, r3]
 80029e6:	3b30      	subs	r3, #48	; 0x30
 80029e8:	2b49      	cmp	r3, #73	; 0x49
 80029ea:	f200 81bf 	bhi.w	8002d6c <updateDisplay+0x398>
 80029ee:	a201      	add	r2, pc, #4	; (adr r2, 80029f4 <updateDisplay+0x20>)
 80029f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029f4:	08002b1d 	.word	0x08002b1d
 80029f8:	08002b2b 	.word	0x08002b2b
 80029fc:	08002b39 	.word	0x08002b39
 8002a00:	08002b47 	.word	0x08002b47
 8002a04:	08002b55 	.word	0x08002b55
 8002a08:	08002b63 	.word	0x08002b63
 8002a0c:	08002b71 	.word	0x08002b71
 8002a10:	08002b7f 	.word	0x08002b7f
 8002a14:	08002b8d 	.word	0x08002b8d
 8002a18:	08002b9b 	.word	0x08002b9b
 8002a1c:	08002d6d 	.word	0x08002d6d
 8002a20:	08002d6d 	.word	0x08002d6d
 8002a24:	08002d6d 	.word	0x08002d6d
 8002a28:	08002d6d 	.word	0x08002d6d
 8002a2c:	08002d6d 	.word	0x08002d6d
 8002a30:	08002d6d 	.word	0x08002d6d
 8002a34:	08002d6d 	.word	0x08002d6d
 8002a38:	08002ba9 	.word	0x08002ba9
 8002a3c:	08002d6d 	.word	0x08002d6d
 8002a40:	08002bd3 	.word	0x08002bd3
 8002a44:	08002d6d 	.word	0x08002d6d
 8002a48:	08002bfd 	.word	0x08002bfd
 8002a4c:	08002c0b 	.word	0x08002c0b
 8002a50:	08002c19 	.word	0x08002c19
 8002a54:	08002c27 	.word	0x08002c27
 8002a58:	08002c43 	.word	0x08002c43
 8002a5c:	08002c51 	.word	0x08002c51
 8002a60:	08002d07 	.word	0x08002d07
 8002a64:	08002c5f 	.word	0x08002c5f
 8002a68:	08002d15 	.word	0x08002d15
 8002a6c:	08002d6d 	.word	0x08002d6d
 8002a70:	08002c7b 	.word	0x08002c7b
 8002a74:	08002c97 	.word	0x08002c97
 8002a78:	08002d6d 	.word	0x08002d6d
 8002a7c:	08002d6d 	.word	0x08002d6d
 8002a80:	08002cc1 	.word	0x08002cc1
 8002a84:	08002d6d 	.word	0x08002d6d
 8002a88:	08002cdd 	.word	0x08002cdd
 8002a8c:	08002d23 	.word	0x08002d23
 8002a90:	08002d35 	.word	0x08002d35
 8002a94:	08002d43 	.word	0x08002d43
 8002a98:	08002d6d 	.word	0x08002d6d
 8002a9c:	08002d51 	.word	0x08002d51
 8002aa0:	08002d6d 	.word	0x08002d6d
 8002aa4:	08002d6d 	.word	0x08002d6d
 8002aa8:	08002d6d 	.word	0x08002d6d
 8002aac:	08002d6d 	.word	0x08002d6d
 8002ab0:	08002d5f 	.word	0x08002d5f
 8002ab4:	08002d6d 	.word	0x08002d6d
 8002ab8:	08002bb7 	.word	0x08002bb7
 8002abc:	08002bc5 	.word	0x08002bc5
 8002ac0:	08002be1 	.word	0x08002be1
 8002ac4:	08002bef 	.word	0x08002bef
 8002ac8:	08002d6d 	.word	0x08002d6d
 8002acc:	08002d6d 	.word	0x08002d6d
 8002ad0:	08002d6d 	.word	0x08002d6d
 8002ad4:	08002c35 	.word	0x08002c35
 8002ad8:	08002d6d 	.word	0x08002d6d
 8002adc:	08002d6d 	.word	0x08002d6d
 8002ae0:	08002d6d 	.word	0x08002d6d
 8002ae4:	08002d6d 	.word	0x08002d6d
 8002ae8:	08002d6d 	.word	0x08002d6d
 8002aec:	08002c6d 	.word	0x08002c6d
 8002af0:	08002c89 	.word	0x08002c89
 8002af4:	08002d6d 	.word	0x08002d6d
 8002af8:	08002ca5 	.word	0x08002ca5
 8002afc:	08002cb3 	.word	0x08002cb3
 8002b00:	08002d6d 	.word	0x08002d6d
 8002b04:	08002ccf 	.word	0x08002ccf
 8002b08:	08002ceb 	.word	0x08002ceb
 8002b0c:	08002d6d 	.word	0x08002d6d
 8002b10:	08002d6d 	.word	0x08002d6d
 8002b14:	08002d6d 	.word	0x08002d6d
 8002b18:	08002cf9 	.word	0x08002cf9
		{
			case '0':
			  setDigit(i);
 8002b1c:	79fb      	ldrb	r3, [r7, #7]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7ff ff26 	bl	8002970 <setDigit>
			  setZero();
 8002b24:	f7ff fb68 	bl	80021f8 <setZero>
			  break;
 8002b28:	e120      	b.n	8002d6c <updateDisplay+0x398>
			case '1':
			  setDigit(i);
 8002b2a:	79fb      	ldrb	r3, [r7, #7]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff ff1f 	bl	8002970 <setDigit>
			  setOne();
 8002b32:	f7ff fa5b 	bl	8001fec <setOne>
			  break;
 8002b36:	e119      	b.n	8002d6c <updateDisplay+0x398>
			case '2':
			  setDigit(i);
 8002b38:	79fb      	ldrb	r3, [r7, #7]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7ff ff18 	bl	8002970 <setDigit>
			  setTwo();
 8002b40:	f7ff fa64 	bl	800200c <setTwo>
			  break;
 8002b44:	e112      	b.n	8002d6c <updateDisplay+0x398>
			case '3':
			  setDigit(i);
 8002b46:	79fb      	ldrb	r3, [r7, #7]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff ff11 	bl	8002970 <setDigit>
			  setThree();
 8002b4e:	f7ff fa7b 	bl	8002048 <setThree>
			  break;
 8002b52:	e10b      	b.n	8002d6c <updateDisplay+0x398>
			case '4':
			  setDigit(i);
 8002b54:	79fb      	ldrb	r3, [r7, #7]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7ff ff0a 	bl	8002970 <setDigit>
			  setFour();
 8002b5c:	f7ff fa92 	bl	8002084 <setFour>
			  break;
 8002b60:	e104      	b.n	8002d6c <updateDisplay+0x398>
			case '5':
			  setDigit(i);
 8002b62:	79fb      	ldrb	r3, [r7, #7]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7ff ff03 	bl	8002970 <setDigit>
			  setFive();
 8002b6a:	f7ff faa5 	bl	80020b8 <setFive>
			  break;
 8002b6e:	e0fd      	b.n	8002d6c <updateDisplay+0x398>
			case '6':
			  setDigit(i);
 8002b70:	79fb      	ldrb	r3, [r7, #7]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff fefc 	bl	8002970 <setDigit>
			  setSix();
 8002b78:	f7ff fabc 	bl	80020f4 <setSix>
			  break;
 8002b7c:	e0f6      	b.n	8002d6c <updateDisplay+0x398>
			case '7':
			  setDigit(i);
 8002b7e:	79fb      	ldrb	r3, [r7, #7]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff fef5 	bl	8002970 <setDigit>
			  setSeven();
 8002b86:	f7ff fad9 	bl	800213c <setSeven>
			  break;
 8002b8a:	e0ef      	b.n	8002d6c <updateDisplay+0x398>
			case '8':
			  setDigit(i);
 8002b8c:	79fb      	ldrb	r3, [r7, #7]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff feee 	bl	8002970 <setDigit>
			  setEight();
 8002b94:	f7ff fae6 	bl	8002164 <setEight>
			  break;
 8002b98:	e0e8      	b.n	8002d6c <updateDisplay+0x398>
			case '9':
			  setDigit(i);
 8002b9a:	79fb      	ldrb	r3, [r7, #7]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff fee7 	bl	8002970 <setDigit>
			  setNine();
 8002ba2:	f7ff fb09 	bl	80021b8 <setNine>
			  break;
 8002ba6:	e0e1      	b.n	8002d6c <updateDisplay+0x398>
			case 'A':
			  setDigit(i);
 8002ba8:	79fb      	ldrb	r3, [r7, #7]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7ff fee0 	bl	8002970 <setDigit>
			  setA();
 8002bb0:	f7ff fb48 	bl	8002244 <setA>
			  break;
 8002bb4:	e0da      	b.n	8002d6c <updateDisplay+0x398>
			case 'a':
			  setDigit(i);
 8002bb6:	79fb      	ldrb	r3, [r7, #7]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff fed9 	bl	8002970 <setDigit>
			  seta();
 8002bbe:	f7ff fb67 	bl	8002290 <seta>
			  break;
 8002bc2:	e0d3      	b.n	8002d6c <updateDisplay+0x398>
			case 'b':
			  setDigit(i);
 8002bc4:	79fb      	ldrb	r3, [r7, #7]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7ff fed2 	bl	8002970 <setDigit>
			  setb();
 8002bcc:	f7ff fb84 	bl	80022d8 <setb>
			  break;
 8002bd0:	e0cc      	b.n	8002d6c <updateDisplay+0x398>
			case 'C':
			  setDigit(i);
 8002bd2:	79fb      	ldrb	r3, [r7, #7]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff fecb 	bl	8002970 <setDigit>
			  setC();
 8002bda:	f7ff fb9d 	bl	8002318 <setC>
			  break;
 8002bde:	e0c5      	b.n	8002d6c <updateDisplay+0x398>
			case 'c':
			  setDigit(i);
 8002be0:	79fb      	ldrb	r3, [r7, #7]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff fec4 	bl	8002970 <setDigit>
			  setc();
 8002be8:	f7ff fbb0 	bl	800234c <setc>
			  break;
 8002bec:	e0be      	b.n	8002d6c <updateDisplay+0x398>
			case 'd':
			  setDigit(i);
 8002bee:	79fb      	ldrb	r3, [r7, #7]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff febd 	bl	8002970 <setDigit>
			  setd();
 8002bf6:	f7ff fbbd 	bl	8002374 <setd>
			  break;
 8002bfa:	e0b7      	b.n	8002d6c <updateDisplay+0x398>
			case 'E':
			  setDigit(i);
 8002bfc:	79fb      	ldrb	r3, [r7, #7]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff feb6 	bl	8002970 <setDigit>
			  setE();
 8002c04:	f7ff fbd6 	bl	80023b4 <setE>
			  break;
 8002c08:	e0b0      	b.n	8002d6c <updateDisplay+0x398>
			case 'F':
			  setDigit(i);
 8002c0a:	79fb      	ldrb	r3, [r7, #7]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff feaf 	bl	8002970 <setDigit>
			  setF();
 8002c12:	f7ff fbed 	bl	80023f0 <setF>
			  break;
 8002c16:	e0a9      	b.n	8002d6c <updateDisplay+0x398>
			case 'G':
			  setDigit(i);
 8002c18:	79fb      	ldrb	r3, [r7, #7]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff fea8 	bl	8002970 <setDigit>
			  setG();
 8002c20:	f7ff fc00 	bl	8002424 <setG>
			  break;
 8002c24:	e0a2      	b.n	8002d6c <updateDisplay+0x398>
			case 'H':
			  setDigit(i);
 8002c26:	79fb      	ldrb	r3, [r7, #7]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff fea1 	bl	8002970 <setDigit>
			  setH();
 8002c2e:	f7ff fc19 	bl	8002464 <setH>
			  break;
 8002c32:	e09b      	b.n	8002d6c <updateDisplay+0x398>
			case 'h':
			  setDigit(i);
 8002c34:	79fb      	ldrb	r3, [r7, #7]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7ff fe9a 	bl	8002970 <setDigit>
			  seth();
 8002c3c:	f7ff fc32 	bl	80024a4 <seth>
			  break;
 8002c40:	e094      	b.n	8002d6c <updateDisplay+0x398>
			case 'I':
			  setDigit(i);
 8002c42:	79fb      	ldrb	r3, [r7, #7]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff fe93 	bl	8002970 <setDigit>
			  setI();
 8002c4a:	f7ff fc47 	bl	80024dc <setI>
			  break;
 8002c4e:	e08d      	b.n	8002d6c <updateDisplay+0x398>
			case 'J':
			  setDigit(i);
 8002c50:	79fb      	ldrb	r3, [r7, #7]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff fe8c 	bl	8002970 <setDigit>
			  setJ();
 8002c58:	f7ff fc50 	bl	80024fc <setJ>
			  break;
 8002c5c:	e086      	b.n	8002d6c <updateDisplay+0x398>
			case 'L':
			  setDigit(i);
 8002c5e:	79fb      	ldrb	r3, [r7, #7]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff fe85 	bl	8002970 <setDigit>
			  setL();
 8002c66:	f7ff fc65 	bl	8002534 <setL>
			  break;
 8002c6a:	e07f      	b.n	8002d6c <updateDisplay+0x398>
			case 'n':
			  setDigit(i);
 8002c6c:	79fb      	ldrb	r3, [r7, #7]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7ff fe7e 	bl	8002970 <setDigit>
			  setn();
 8002c74:	f7ff fc74 	bl	8002560 <setn>
			  break;
 8002c78:	e078      	b.n	8002d6c <updateDisplay+0x398>
			case 'O':
			  setDigit(i);
 8002c7a:	79fb      	ldrb	r3, [r7, #7]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff fe77 	bl	8002970 <setDigit>
			  setO();
 8002c82:	f7ff fc83 	bl	800258c <setO>
			  break;
 8002c86:	e071      	b.n	8002d6c <updateDisplay+0x398>
			case 'o':
			  setDigit(i);
 8002c88:	79fb      	ldrb	r3, [r7, #7]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7ff fe70 	bl	8002970 <setDigit>
			  seto();
 8002c90:	f7ff fca2 	bl	80025d8 <seto>
			  break;
 8002c94:	e06a      	b.n	8002d6c <updateDisplay+0x398>
			case 'P':
			  setDigit(i);
 8002c96:	79fb      	ldrb	r3, [r7, #7]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7ff fe69 	bl	8002970 <setDigit>
			  setP();
 8002c9e:	f7ff fcb5 	bl	800260c <setP>
			  break;
 8002ca2:	e063      	b.n	8002d6c <updateDisplay+0x398>
			case 'q':
			  setDigit(i);
 8002ca4:	79fb      	ldrb	r3, [r7, #7]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff fe62 	bl	8002970 <setDigit>
			  setq();
 8002cac:	f7ff fcce 	bl	800264c <setq>
			  break;
 8002cb0:	e05c      	b.n	8002d6c <updateDisplay+0x398>
			case 'r':
			  setDigit(i);
 8002cb2:	79fb      	ldrb	r3, [r7, #7]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff fe5b 	bl	8002970 <setDigit>
			  setr();
 8002cba:	f7ff fce7 	bl	800268c <setr>
			  break;
 8002cbe:	e055      	b.n	8002d6c <updateDisplay+0x398>
			case 'S':
			  setDigit(i);
 8002cc0:	79fb      	ldrb	r3, [r7, #7]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7ff fe54 	bl	8002970 <setDigit>
			  setS();
 8002cc8:	f7ff fcf0 	bl	80026ac <setS>
			  break;
 8002ccc:	e04e      	b.n	8002d6c <updateDisplay+0x398>
			case 't':
			  setDigit(i);
 8002cce:	79fb      	ldrb	r3, [r7, #7]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff fe4d 	bl	8002970 <setDigit>
			  sett();
 8002cd6:	f7ff fd07 	bl	80026e8 <sett>
			  break;
 8002cda:	e047      	b.n	8002d6c <updateDisplay+0x398>
			case 'U':
			  setDigit(i);
 8002cdc:	79fb      	ldrb	r3, [r7, #7]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7ff fe46 	bl	8002970 <setDigit>
			  setU();
 8002ce4:	f7ff fd1a 	bl	800271c <setU>
			  break;
 8002ce8:	e040      	b.n	8002d6c <updateDisplay+0x398>
			case 'u':
			  setDigit(i);
 8002cea:	79fb      	ldrb	r3, [r7, #7]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff fe3f 	bl	8002970 <setDigit>
			  setu();
 8002cf2:	f7ff fd33 	bl	800275c <setu>
			  break;
 8002cf6:	e039      	b.n	8002d6c <updateDisplay+0x398>
			case 'y':
			  setDigit(i);
 8002cf8:	79fb      	ldrb	r3, [r7, #7]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7ff fe38 	bl	8002970 <setDigit>
			  sety();
 8002d00:	f7ff fd42 	bl	8002788 <sety>
			  break;
 8002d04:	e032      	b.n	8002d6c <updateDisplay+0x398>
			case 'K':
			  setDigit(i);
 8002d06:	79fb      	ldrb	r3, [r7, #7]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff fe31 	bl	8002970 <setDigit>
			  setK();
 8002d0e:	f7ff fd59 	bl	80027c4 <setK>
			  break;
 8002d12:	e02b      	b.n	8002d6c <updateDisplay+0x398>
			case 'M':
			  setDigit(i);
 8002d14:	79fb      	ldrb	r3, [r7, #7]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7ff fe2a 	bl	8002970 <setDigit>
			  setM();
 8002d1c:	f7ff fd72 	bl	8002804 <setM>
			  break;
 8002d20:	e024      	b.n	8002d6c <updateDisplay+0x398>
			case 'V':
			  setDigit(i);
 8002d22:	79fb      	ldrb	r3, [r7, #7]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff fe23 	bl	8002970 <setDigit>
			  setV();
 8002d2a:	f7ff fd85 	bl	8002838 <setV>
			  break;
 8002d2e:	e01d      	b.n	8002d6c <updateDisplay+0x398>
 8002d30:	200001fc 	.word	0x200001fc
			case 'W':
			  setDigit(i);
 8002d34:	79fb      	ldrb	r3, [r7, #7]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7ff fe1a 	bl	8002970 <setDigit>
			  setW();
 8002d3c:	f7ff fd90 	bl	8002860 <setW>
			  break;
 8002d40:	e014      	b.n	8002d6c <updateDisplay+0x398>
			case 'X':
			  setDigit(i);
 8002d42:	79fb      	ldrb	r3, [r7, #7]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7ff fe13 	bl	8002970 <setDigit>
			  setX();
 8002d4a:	f7ff fdad 	bl	80028a8 <setX>
			  break;
 8002d4e:	e00d      	b.n	8002d6c <updateDisplay+0x398>
			case 'Z':
			  setDigit(i);
 8002d50:	79fb      	ldrb	r3, [r7, #7]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff fe0c 	bl	8002970 <setDigit>
			  setZ();
 8002d58:	f7ff fdba 	bl	80028d0 <setZ>
			  break;
 8002d5c:	e006      	b.n	8002d6c <updateDisplay+0x398>
			case '_':
			  setDigit(i);
 8002d5e:	79fb      	ldrb	r3, [r7, #7]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff fe05 	bl	8002970 <setDigit>
			  setUnderscore();
 8002d66:	f7ff fdd1 	bl	800290c <setUnderscore>
			  break;
 8002d6a:	bf00      	nop
		}

		if(dDisplayData.resolution == i)
 8002d6c:	4b14      	ldr	r3, [pc, #80]	; (8002dc0 <updateDisplay+0x3ec>)
 8002d6e:	799b      	ldrb	r3, [r3, #6]
 8002d70:	79fa      	ldrb	r2, [r7, #7]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d101      	bne.n	8002d7a <updateDisplay+0x3a6>
		{
			setDecimalPoint();
 8002d76:	f7ff f92f 	bl	8001fd8 <setDecimalPoint>
		}

		disp_time_saved = disp_time;
 8002d7a:	4b12      	ldr	r3, [pc, #72]	; (8002dc4 <updateDisplay+0x3f0>)
 8002d7c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002d80:	4a11      	ldr	r2, [pc, #68]	; (8002dc8 <updateDisplay+0x3f4>)
 8002d82:	e9c2 3400 	strd	r3, r4, [r2]
		while((disp_time_saved + 2) > disp_time){};
 8002d86:	bf00      	nop
 8002d88:	4b0f      	ldr	r3, [pc, #60]	; (8002dc8 <updateDisplay+0x3f4>)
 8002d8a:	e9d3 1200 	ldrd	r1, r2, [r3]
 8002d8e:	1c8b      	adds	r3, r1, #2
 8002d90:	f142 0400 	adc.w	r4, r2, #0
 8002d94:	4a0b      	ldr	r2, [pc, #44]	; (8002dc4 <updateDisplay+0x3f0>)
 8002d96:	e9d2 1200 	ldrd	r1, r2, [r2]
 8002d9a:	42a2      	cmp	r2, r4
 8002d9c:	bf08      	it	eq
 8002d9e:	4299      	cmpeq	r1, r3
 8002da0:	d3f2      	bcc.n	8002d88 <updateDisplay+0x3b4>

		resetDigits();
 8002da2:	f7ff f8db 	bl	8001f5c <resetDigits>
		resetSegments();
 8002da6:	f7ff f87d 	bl	8001ea4 <resetSegments>
	for(uint8_t i = 0; i < 4; i++)
 8002daa:	79fb      	ldrb	r3, [r7, #7]
 8002dac:	3301      	adds	r3, #1
 8002dae:	71fb      	strb	r3, [r7, #7]
 8002db0:	79fb      	ldrb	r3, [r7, #7]
 8002db2:	2b03      	cmp	r3, #3
 8002db4:	f67f ae14 	bls.w	80029e0 <updateDisplay+0xc>
	}
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd90      	pop	{r4, r7, pc}
 8002dc0:	200001fc 	.word	0x200001fc
 8002dc4:	20000208 	.word	0x20000208
 8002dc8:	20000210 	.word	0x20000210

08002dcc <TIM3_IRQHandler>:
/**
  * @brief This function handles TIM3 global interrupt.
  */
//Update displayed data and keep display ON
void TIM3_IRQHandler(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
	if(LL_TIM_IsActiveFlag_UPDATE(TIM3))
 8002dd0:	4806      	ldr	r0, [pc, #24]	; (8002dec <TIM3_IRQHandler+0x20>)
 8002dd2:	f7ff f837 	bl	8001e44 <LL_TIM_IsActiveFlag_UPDATE>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <TIM3_IRQHandler+0x14>
	{
		updateDisplay();
 8002ddc:	f7ff fdfa 	bl	80029d4 <updateDisplay>
	}

	LL_TIM_ClearFlag_UPDATE(TIM3);
 8002de0:	4802      	ldr	r0, [pc, #8]	; (8002dec <TIM3_IRQHandler+0x20>)
 8002de2:	f7ff f821 	bl	8001e28 <LL_TIM_ClearFlag_UPDATE>
}
 8002de6:	bf00      	nop
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	40000400 	.word	0x40000400

08002df0 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002df4:	4b04      	ldr	r3, [pc, #16]	; (8002e08 <NVIC_GetPriorityGrouping+0x18>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	0a1b      	lsrs	r3, r3, #8
 8002dfa:	f003 0307 	and.w	r3, r3, #7
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr
 8002e08:	e000ed00 	.word	0xe000ed00

08002e0c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	4603      	mov	r3, r0
 8002e14:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002e16:	79fb      	ldrb	r3, [r7, #7]
 8002e18:	f003 021f 	and.w	r2, r3, #31
 8002e1c:	4907      	ldr	r1, [pc, #28]	; (8002e3c <NVIC_EnableIRQ+0x30>)
 8002e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e22:	095b      	lsrs	r3, r3, #5
 8002e24:	2001      	movs	r0, #1
 8002e26:	fa00 f202 	lsl.w	r2, r0, r2
 8002e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002e2e:	bf00      	nop
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	e000e100 	.word	0xe000e100

08002e40 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	4603      	mov	r3, r0
 8002e48:	6039      	str	r1, [r7, #0]
 8002e4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	da0b      	bge.n	8002e6c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	b2da      	uxtb	r2, r3
 8002e58:	490c      	ldr	r1, [pc, #48]	; (8002e8c <NVIC_SetPriority+0x4c>)
 8002e5a:	79fb      	ldrb	r3, [r7, #7]
 8002e5c:	f003 030f 	and.w	r3, r3, #15
 8002e60:	3b04      	subs	r3, #4
 8002e62:	0112      	lsls	r2, r2, #4
 8002e64:	b2d2      	uxtb	r2, r2
 8002e66:	440b      	add	r3, r1
 8002e68:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e6a:	e009      	b.n	8002e80 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	b2da      	uxtb	r2, r3
 8002e70:	4907      	ldr	r1, [pc, #28]	; (8002e90 <NVIC_SetPriority+0x50>)
 8002e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e76:	0112      	lsls	r2, r2, #4
 8002e78:	b2d2      	uxtb	r2, r2
 8002e7a:	440b      	add	r3, r1
 8002e7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr
 8002e8c:	e000ed00 	.word	0xe000ed00
 8002e90:	e000e100 	.word	0xe000e100

08002e94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b089      	sub	sp, #36	; 0x24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f003 0307 	and.w	r3, r3, #7
 8002ea6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	f1c3 0307 	rsb	r3, r3, #7
 8002eae:	2b04      	cmp	r3, #4
 8002eb0:	bf28      	it	cs
 8002eb2:	2304      	movcs	r3, #4
 8002eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	3304      	adds	r3, #4
 8002eba:	2b06      	cmp	r3, #6
 8002ebc:	d902      	bls.n	8002ec4 <NVIC_EncodePriority+0x30>
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	3b03      	subs	r3, #3
 8002ec2:	e000      	b.n	8002ec6 <NVIC_EncodePriority+0x32>
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed2:	43da      	mvns	r2, r3
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	401a      	ands	r2, r3
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002edc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee6:	43d9      	mvns	r1, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eec:	4313      	orrs	r3, r2
         );
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3724      	adds	r7, #36	; 0x24
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
	...

08002efc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b085      	sub	sp, #20
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8002f04:	4b08      	ldr	r3, [pc, #32]	; (8002f28 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002f06:	695a      	ldr	r2, [r3, #20]
 8002f08:	4907      	ldr	r1, [pc, #28]	; (8002f28 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8002f10:	4b05      	ldr	r3, [pc, #20]	; (8002f28 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002f12:	695a      	ldr	r2, [r3, #20]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4013      	ands	r3, r2
 8002f18:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
}
 8002f1c:	bf00      	nop
 8002f1e:	3714      	adds	r7, #20
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr
 8002f28:	40021000 	.word	0x40021000

08002f2c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8002f36:	4a12      	ldr	r2, [pc, #72]	; (8002f80 <LL_SYSCFG_SetEXTISource+0x54>)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	3302      	adds	r3, #2
 8002f3e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	0c1b      	lsrs	r3, r3, #16
 8002f46:	43db      	mvns	r3, r3
 8002f48:	ea02 0103 	and.w	r1, r2, r3
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	0c1b      	lsrs	r3, r3, #16
 8002f50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	fa93 f3a3 	rbit	r3, r3
 8002f58:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	fab3 f383 	clz	r3, r3
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	409a      	lsls	r2, r3
 8002f64:	4806      	ldr	r0, [pc, #24]	; (8002f80 <LL_SYSCFG_SetEXTISource+0x54>)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	3302      	adds	r3, #2
 8002f6e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8002f72:	bf00      	nop
 8002f74:	3714      	adds	r7, #20
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	40010000 	.word	0x40010000

08002f84 <LL_GPIO_SetPinMode>:
{
 8002f84:	b480      	push	{r7}
 8002f86:	b089      	sub	sp, #36	; 0x24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	fa93 f3a3 	rbit	r3, r3
 8002f9e:	613b      	str	r3, [r7, #16]
  return(result);
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	fab3 f383 	clz	r3, r3
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	2103      	movs	r1, #3
 8002faa:	fa01 f303 	lsl.w	r3, r1, r3
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	401a      	ands	r2, r3
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	fa93 f3a3 	rbit	r3, r3
 8002fbc:	61bb      	str	r3, [r7, #24]
  return(result);
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	fab3 f383 	clz	r3, r3
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	6879      	ldr	r1, [r7, #4]
 8002fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fcc:	431a      	orrs	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	601a      	str	r2, [r3, #0]
}
 8002fd2:	bf00      	nop
 8002fd4:	3724      	adds	r7, #36	; 0x24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr

08002fde <LL_GPIO_SetPinPull>:
{
 8002fde:	b480      	push	{r7}
 8002fe0:	b089      	sub	sp, #36	; 0x24
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	60f8      	str	r0, [r7, #12]
 8002fe6:	60b9      	str	r1, [r7, #8]
 8002fe8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	68da      	ldr	r2, [r3, #12]
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	fa93 f3a3 	rbit	r3, r3
 8002ff8:	613b      	str	r3, [r7, #16]
  return(result);
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	fab3 f383 	clz	r3, r3
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	2103      	movs	r1, #3
 8003004:	fa01 f303 	lsl.w	r3, r1, r3
 8003008:	43db      	mvns	r3, r3
 800300a:	401a      	ands	r2, r3
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	fa93 f3a3 	rbit	r3, r3
 8003016:	61bb      	str	r3, [r7, #24]
  return(result);
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	fab3 f383 	clz	r3, r3
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	6879      	ldr	r1, [r7, #4]
 8003022:	fa01 f303 	lsl.w	r3, r1, r3
 8003026:	431a      	orrs	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	60da      	str	r2, [r3, #12]
}
 800302c:	bf00      	nop
 800302e:	3724      	adds	r7, #36	; 0x24
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <LL_GPIO_ResetOutputPin>:
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	683a      	ldr	r2, [r7, #0]
 8003046:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b08a      	sub	sp, #40	; 0x28
 8003058:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800305a:	f107 031c 	add.w	r3, r7, #28
 800305e:	2200      	movs	r2, #0
 8003060:	601a      	str	r2, [r3, #0]
 8003062:	605a      	str	r2, [r3, #4]
 8003064:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003066:	1d3b      	adds	r3, r7, #4
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]
 800306c:	605a      	str	r2, [r3, #4]
 800306e:	609a      	str	r2, [r3, #8]
 8003070:	60da      	str	r2, [r3, #12]
 8003072:	611a      	str	r2, [r3, #16]
 8003074:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8003076:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800307a:	f7ff ff3f 	bl	8002efc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800307e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003082:	f7ff ff3b 	bl	8002efc <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, DISP_B_Pin|DISP_A_Pin|DISP_3_Pin|DISP_F_Pin
 8003086:	f641 119f 	movw	r1, #6559	; 0x199f
 800308a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800308e:	f7ff ffd3 	bl	8003038 <LL_GPIO_ResetOutputPin>
                          |DISP_1_Pin|DISP_TIME_Pin|DISP_C_Pin|DISP_E_Pin
                          |DISP_2_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, DISP_0_Pin|DISP_DP_Pin|DISP_G_Pin|DISP_D_Pin);
 8003092:	2133      	movs	r1, #51	; 0x33
 8003094:	482b      	ldr	r0, [pc, #172]	; (8003144 <MX_GPIO_Init+0xf0>)
 8003096:	f7ff ffcf 	bl	8003038 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = DISP_B_Pin|DISP_A_Pin|DISP_3_Pin|DISP_F_Pin
 800309a:	f641 139f 	movw	r3, #6559	; 0x199f
 800309e:	607b      	str	r3, [r7, #4]
                          |DISP_1_Pin|DISP_TIME_Pin|DISP_C_Pin|DISP_E_Pin
                          |DISP_2_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80030a0:	2301      	movs	r3, #1
 80030a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80030a4:	2300      	movs	r3, #0
 80030a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80030a8:	2300      	movs	r3, #0
 80030aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80030ac:	2300      	movs	r3, #0
 80030ae:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030b0:	1d3b      	adds	r3, r7, #4
 80030b2:	4619      	mov	r1, r3
 80030b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030b8:	f7fe f8f9 	bl	80012ae <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_0_Pin|DISP_DP_Pin|DISP_G_Pin|DISP_D_Pin;
 80030bc:	2333      	movs	r3, #51	; 0x33
 80030be:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80030c0:	2301      	movs	r3, #1
 80030c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80030c4:	2300      	movs	r3, #0
 80030c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80030c8:	2300      	movs	r3, #0
 80030ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80030cc:	2300      	movs	r3, #0
 80030ce:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030d0:	1d3b      	adds	r3, r7, #4
 80030d2:	4619      	mov	r1, r3
 80030d4:	481b      	ldr	r0, [pc, #108]	; (8003144 <MX_GPIO_Init+0xf0>)
 80030d6:	f7fe f8ea 	bl	80012ae <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE3);
 80030da:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 80030de:	2001      	movs	r0, #1
 80030e0:	f7ff ff24 	bl	8002f2c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(BUTTON_GPIO_Port, BUTTON_Pin, LL_GPIO_PULL_NO);
 80030e4:	2200      	movs	r2, #0
 80030e6:	2108      	movs	r1, #8
 80030e8:	4816      	ldr	r0, [pc, #88]	; (8003144 <MX_GPIO_Init+0xf0>)
 80030ea:	f7ff ff78 	bl	8002fde <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BUTTON_GPIO_Port, BUTTON_Pin, LL_GPIO_MODE_INPUT);
 80030ee:	2200      	movs	r2, #0
 80030f0:	2108      	movs	r1, #8
 80030f2:	4814      	ldr	r0, [pc, #80]	; (8003144 <MX_GPIO_Init+0xf0>)
 80030f4:	f7ff ff46 	bl	8002f84 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 80030f8:	2308      	movs	r3, #8
 80030fa:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80030fc:	2300      	movs	r3, #0
 80030fe:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8003100:	2301      	movs	r3, #1
 8003102:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8003106:	2300      	movs	r3, #0
 8003108:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800310c:	2301      	movs	r3, #1
 800310e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8003112:	f107 031c 	add.w	r3, r7, #28
 8003116:	4618      	mov	r0, r3
 8003118:	f7fd fee6 	bl	8000ee8 <LL_EXTI_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800311c:	f7ff fe68 	bl	8002df0 <NVIC_GetPriorityGrouping>
 8003120:	4603      	mov	r3, r0
 8003122:	2200      	movs	r2, #0
 8003124:	2100      	movs	r1, #0
 8003126:	4618      	mov	r0, r3
 8003128:	f7ff feb4 	bl	8002e94 <NVIC_EncodePriority>
 800312c:	4603      	mov	r3, r0
 800312e:	4619      	mov	r1, r3
 8003130:	2009      	movs	r0, #9
 8003132:	f7ff fe85 	bl	8002e40 <NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI3_IRQn);
 8003136:	2009      	movs	r0, #9
 8003138:	f7ff fe68 	bl	8002e0c <NVIC_EnableIRQ>

}
 800313c:	bf00      	nop
 800313e:	3728      	adds	r7, #40	; 0x28
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	48000400 	.word	0x48000400

08003148 <NVIC_GetPriorityGrouping>:
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800314c:	4b04      	ldr	r3, [pc, #16]	; (8003160 <NVIC_GetPriorityGrouping+0x18>)
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	0a1b      	lsrs	r3, r3, #8
 8003152:	f003 0307 	and.w	r3, r3, #7
}
 8003156:	4618      	mov	r0, r3
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr
 8003160:	e000ed00 	.word	0xe000ed00

08003164 <NVIC_EnableIRQ>:
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	4603      	mov	r3, r0
 800316c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800316e:	79fb      	ldrb	r3, [r7, #7]
 8003170:	f003 021f 	and.w	r2, r3, #31
 8003174:	4907      	ldr	r1, [pc, #28]	; (8003194 <NVIC_EnableIRQ+0x30>)
 8003176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317a:	095b      	lsrs	r3, r3, #5
 800317c:	2001      	movs	r0, #1
 800317e:	fa00 f202 	lsl.w	r2, r0, r2
 8003182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	e000e100 	.word	0xe000e100

08003198 <NVIC_SetPriority>:
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	4603      	mov	r3, r0
 80031a0:	6039      	str	r1, [r7, #0]
 80031a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80031a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	da0b      	bge.n	80031c4 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	b2da      	uxtb	r2, r3
 80031b0:	490c      	ldr	r1, [pc, #48]	; (80031e4 <NVIC_SetPriority+0x4c>)
 80031b2:	79fb      	ldrb	r3, [r7, #7]
 80031b4:	f003 030f 	and.w	r3, r3, #15
 80031b8:	3b04      	subs	r3, #4
 80031ba:	0112      	lsls	r2, r2, #4
 80031bc:	b2d2      	uxtb	r2, r2
 80031be:	440b      	add	r3, r1
 80031c0:	761a      	strb	r2, [r3, #24]
}
 80031c2:	e009      	b.n	80031d8 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	b2da      	uxtb	r2, r3
 80031c8:	4907      	ldr	r1, [pc, #28]	; (80031e8 <NVIC_SetPriority+0x50>)
 80031ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ce:	0112      	lsls	r2, r2, #4
 80031d0:	b2d2      	uxtb	r2, r2
 80031d2:	440b      	add	r3, r1
 80031d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr
 80031e4:	e000ed00 	.word	0xe000ed00
 80031e8:	e000e100 	.word	0xe000e100

080031ec <NVIC_EncodePriority>:
{
 80031ec:	b480      	push	{r7}
 80031ee:	b089      	sub	sp, #36	; 0x24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f003 0307 	and.w	r3, r3, #7
 80031fe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	f1c3 0307 	rsb	r3, r3, #7
 8003206:	2b04      	cmp	r3, #4
 8003208:	bf28      	it	cs
 800320a:	2304      	movcs	r3, #4
 800320c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	3304      	adds	r3, #4
 8003212:	2b06      	cmp	r3, #6
 8003214:	d902      	bls.n	800321c <NVIC_EncodePriority+0x30>
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	3b03      	subs	r3, #3
 800321a:	e000      	b.n	800321e <NVIC_EncodePriority+0x32>
 800321c:	2300      	movs	r3, #0
 800321e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003220:	f04f 32ff 	mov.w	r2, #4294967295
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	fa02 f303 	lsl.w	r3, r2, r3
 800322a:	43da      	mvns	r2, r3
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	401a      	ands	r2, r3
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003234:	f04f 31ff 	mov.w	r1, #4294967295
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	fa01 f303 	lsl.w	r3, r1, r3
 800323e:	43d9      	mvns	r1, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003244:	4313      	orrs	r3, r2
}
 8003246:	4618      	mov	r0, r3
 8003248:	3724      	adds	r7, #36	; 0x24
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr

08003252 <LL_I2C_Enable>:
{
 8003252:	b480      	push	{r7}
 8003254:	b083      	sub	sp, #12
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f043 0201 	orr.w	r2, r3, #1
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	601a      	str	r2, [r3, #0]
}
 8003266:	bf00      	nop
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr

08003272 <LL_I2C_EnableClockStretching>:
{
 8003272:	b480      	push	{r7}
 8003274:	b083      	sub	sp, #12
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	601a      	str	r2, [r3, #0]
}
 8003286:	bf00      	nop
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr

08003292 <LL_I2C_DisableGeneralCall>:
{
 8003292:	b480      	push	{r7}
 8003294:	b083      	sub	sp, #12
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	601a      	str	r2, [r3, #0]
}
 80032a6:	bf00      	nop
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr

080032b2 <LL_I2C_SetOwnAddress2>:
{
 80032b2:	b480      	push	{r7}
 80032b4:	b085      	sub	sp, #20
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	60f8      	str	r0, [r7, #12]
 80032ba:	60b9      	str	r1, [r7, #8]
 80032bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80032c6:	f023 0306 	bic.w	r3, r3, #6
 80032ca:	68b9      	ldr	r1, [r7, #8]
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	431a      	orrs	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	60da      	str	r2, [r3, #12]
}
 80032d6:	bf00      	nop
 80032d8:	3714      	adds	r7, #20
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr

080032e2 <LL_I2C_DisableOwnAddress2>:
{
 80032e2:	b480      	push	{r7}
 80032e4:	b083      	sub	sp, #12
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	60da      	str	r2, [r3, #12]
}
 80032f6:	bf00      	nop
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr

08003302 <LL_I2C_EnableIT_RX>:
{
 8003302:	b480      	push	{r7}
 8003304:	b083      	sub	sp, #12
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f043 0204 	orr.w	r2, r3, #4
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	601a      	str	r2, [r3, #0]
}
 8003316:	bf00      	nop
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr

08003322 <LL_I2C_DisableIT_RX>:
{
 8003322:	b480      	push	{r7}
 8003324:	b083      	sub	sp, #12
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f023 0204 	bic.w	r2, r3, #4
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	601a      	str	r2, [r3, #0]
}
 8003336:	bf00      	nop
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr

08003342 <LL_I2C_IsActiveFlag_TXIS>:
{
 8003342:	b480      	push	{r7}
 8003344:	b083      	sub	sp, #12
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS));
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b02      	cmp	r3, #2
 8003354:	bf0c      	ite	eq
 8003356:	2301      	moveq	r3, #1
 8003358:	2300      	movne	r3, #0
 800335a:	b2db      	uxtb	r3, r3
}
 800335c:	4618      	mov	r0, r3
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <LL_I2C_IsActiveFlag_RXNE>:
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE));
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b04      	cmp	r3, #4
 800337a:	bf0c      	ite	eq
 800337c:	2301      	moveq	r3, #1
 800337e:	2300      	movne	r3, #0
 8003380:	b2db      	uxtb	r3, r3
}
 8003382:	4618      	mov	r0, r3
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr

0800338e <LL_I2C_IsActiveFlag_STOP>:
{
 800338e:	b480      	push	{r7}
 8003390:	b083      	sub	sp, #12
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF));
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	f003 0320 	and.w	r3, r3, #32
 800339e:	2b20      	cmp	r3, #32
 80033a0:	bf0c      	ite	eq
 80033a2:	2301      	moveq	r3, #1
 80033a4:	2300      	movne	r3, #0
 80033a6:	b2db      	uxtb	r3, r3
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <LL_I2C_ClearFlag_STOP>:
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	69db      	ldr	r3, [r3, #28]
 80033c0:	f043 0220 	orr.w	r2, r3, #32
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	61da      	str	r2, [r3, #28]
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <LL_I2C_EnableAutoEndMode>:
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	605a      	str	r2, [r3, #4]
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
 8003400:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	0d5b      	lsrs	r3, r3, #21
 800340a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800340e:	4b0b      	ldr	r3, [pc, #44]	; (800343c <LL_I2C_HandleTransfer+0x48>)
 8003410:	430b      	orrs	r3, r1
 8003412:	43db      	mvns	r3, r3
 8003414:	401a      	ands	r2, r3
 8003416:	68b9      	ldr	r1, [r7, #8]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4319      	orrs	r1, r3
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	041b      	lsls	r3, r3, #16
 8003420:	4319      	orrs	r1, r3
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	4319      	orrs	r1, r3
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	430b      	orrs	r3, r1
 800342a:	431a      	orrs	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	605a      	str	r2, [r3, #4]
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | TransferSize << I2C_CR2_NBYTES_Pos | EndMode | Request);
}
 8003430:	bf00      	nop
 8003432:	3714      	adds	r7, #20
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	03ff7bff 	.word	0x03ff7bff

08003440 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344c:	b2db      	uxtb	r3, r3
}
 800344e:	4618      	mov	r0, r3
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 800345a:	b480      	push	{r7}
 800345c:	b083      	sub	sp, #12
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
 8003462:	460b      	mov	r3, r1
 8003464:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 8003466:	78fa      	ldrb	r2, [r7, #3]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <LL_AHB1_GRP1_EnableClock>:
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8003480:	4b08      	ldr	r3, [pc, #32]	; (80034a4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003482:	695a      	ldr	r2, [r3, #20]
 8003484:	4907      	ldr	r1, [pc, #28]	; (80034a4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4313      	orrs	r3, r2
 800348a:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800348c:	4b05      	ldr	r3, [pc, #20]	; (80034a4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800348e:	695a      	ldr	r2, [r3, #20]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4013      	ands	r3, r2
 8003494:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003496:	68fb      	ldr	r3, [r7, #12]
}
 8003498:	bf00      	nop
 800349a:	3714      	adds	r7, #20
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr
 80034a4:	40021000 	.word	0x40021000

080034a8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80034b0:	4b08      	ldr	r3, [pc, #32]	; (80034d4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80034b2:	69da      	ldr	r2, [r3, #28]
 80034b4:	4907      	ldr	r1, [pc, #28]	; (80034d4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80034bc:	4b05      	ldr	r3, [pc, #20]	; (80034d4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80034be:	69da      	ldr	r2, [r3, #28]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4013      	ands	r3, r2
 80034c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80034c6:	68fb      	ldr	r3, [r7, #12]
}
 80034c8:	bf00      	nop
 80034ca:	3714      	adds	r7, #20
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr
 80034d4:	40021000 	.word	0x40021000

080034d8 <MX_I2C1_Init>:
volatile uint8_t ubReceiveIndex = 0;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b08e      	sub	sp, #56	; 0x38
 80034dc:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80034de:	f107 031c 	add.w	r3, r7, #28
 80034e2:	2200      	movs	r2, #0
 80034e4:	601a      	str	r2, [r3, #0]
 80034e6:	605a      	str	r2, [r3, #4]
 80034e8:	609a      	str	r2, [r3, #8]
 80034ea:	60da      	str	r2, [r3, #12]
 80034ec:	611a      	str	r2, [r3, #16]
 80034ee:	615a      	str	r2, [r3, #20]
 80034f0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034f2:	1d3b      	adds	r3, r7, #4
 80034f4:	2200      	movs	r2, #0
 80034f6:	601a      	str	r2, [r3, #0]
 80034f8:	605a      	str	r2, [r3, #4]
 80034fa:	609a      	str	r2, [r3, #8]
 80034fc:	60da      	str	r2, [r3, #12]
 80034fe:	611a      	str	r2, [r3, #16]
 8003500:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8003502:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003506:	f7ff ffb7 	bl	8003478 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800350a:	23c0      	movs	r3, #192	; 0xc0
 800350c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800350e:	2302      	movs	r3, #2
 8003510:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8003512:	2303      	movs	r3, #3
 8003514:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8003516:	2301      	movs	r3, #1
 8003518:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800351a:	2301      	movs	r3, #1
 800351c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800351e:	2304      	movs	r3, #4
 8003520:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003522:	1d3b      	adds	r3, r7, #4
 8003524:	4619      	mov	r1, r3
 8003526:	4821      	ldr	r0, [pc, #132]	; (80035ac <MX_I2C1_Init+0xd4>)
 8003528:	f7fd fec1 	bl	80012ae <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 800352c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003530:	f7ff ffba 	bl	80034a8 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003534:	f7ff fe08 	bl	8003148 <NVIC_GetPriorityGrouping>
 8003538:	4603      	mov	r3, r0
 800353a:	2200      	movs	r2, #0
 800353c:	2100      	movs	r1, #0
 800353e:	4618      	mov	r0, r3
 8003540:	f7ff fe54 	bl	80031ec <NVIC_EncodePriority>
 8003544:	4603      	mov	r3, r0
 8003546:	4619      	mov	r1, r3
 8003548:	201f      	movs	r0, #31
 800354a:	f7ff fe25 	bl	8003198 <NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 800354e:	201f      	movs	r0, #31
 8003550:	f7ff fe08 	bl	8003164 <NVIC_EnableIRQ>

  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8003554:	4816      	ldr	r0, [pc, #88]	; (80035b0 <MX_I2C1_Init+0xd8>)
 8003556:	f7ff ff3d 	bl	80033d4 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 800355a:	4815      	ldr	r0, [pc, #84]	; (80035b0 <MX_I2C1_Init+0xd8>)
 800355c:	f7ff fec1 	bl	80032e2 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8003560:	4813      	ldr	r0, [pc, #76]	; (80035b0 <MX_I2C1_Init+0xd8>)
 8003562:	f7ff fe96 	bl	8003292 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8003566:	4812      	ldr	r0, [pc, #72]	; (80035b0 <MX_I2C1_Init+0xd8>)
 8003568:	f7ff fe83 	bl	8003272 <LL_I2C_EnableClockStretching>

  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 800356c:	2300      	movs	r3, #0
 800356e:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 8003570:	4b10      	ldr	r3, [pc, #64]	; (80035b4 <MX_I2C1_Init+0xdc>)
 8003572:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8003574:	2300      	movs	r3, #0
 8003576:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8003578:	2300      	movs	r3, #0
 800357a:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 800357c:	2302      	movs	r3, #2
 800357e:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8003580:	2300      	movs	r3, #0
 8003582:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8003584:	2300      	movs	r3, #0
 8003586:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8003588:	f107 031c 	add.w	r3, r7, #28
 800358c:	4619      	mov	r1, r3
 800358e:	4808      	ldr	r0, [pc, #32]	; (80035b0 <MX_I2C1_Init+0xd8>)
 8003590:	f7fd ffaa 	bl	80014e8 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8003594:	2200      	movs	r2, #0
 8003596:	2100      	movs	r1, #0
 8003598:	4805      	ldr	r0, [pc, #20]	; (80035b0 <MX_I2C1_Init+0xd8>)
 800359a:	f7ff fe8a 	bl	80032b2 <LL_I2C_SetOwnAddress2>

  LL_I2C_Enable(I2C1);
 800359e:	4804      	ldr	r0, [pc, #16]	; (80035b0 <MX_I2C1_Init+0xd8>)
 80035a0:	f7ff fe57 	bl	8003252 <LL_I2C_Enable>
}
 80035a4:	bf00      	nop
 80035a6:	3738      	adds	r7, #56	; 0x38
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	48000400 	.word	0x48000400
 80035b0:	40005400 	.word	0x40005400
 80035b4:	2000090e 	.word	0x2000090e

080035b8 <i2c_master_write>:

void i2c_master_write(uint8_t data, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 80035b8:	b590      	push	{r4, r7, lr}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af02      	add	r7, sp, #8
 80035be:	4604      	mov	r4, r0
 80035c0:	4608      	mov	r0, r1
 80035c2:	4611      	mov	r1, r2
 80035c4:	461a      	mov	r2, r3
 80035c6:	4623      	mov	r3, r4
 80035c8:	71fb      	strb	r3, [r7, #7]
 80035ca:	4603      	mov	r3, r0
 80035cc:	71bb      	strb	r3, [r7, #6]
 80035ce:	460b      	mov	r3, r1
 80035d0:	717b      	strb	r3, [r7, #5]
 80035d2:	4613      	mov	r3, r2
 80035d4:	713b      	strb	r3, [r7, #4]
	if(read_flag)
 80035d6:	793b      	ldrb	r3, [r7, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d003      	beq.n	80035e4 <i2c_master_write+0x2c>
	{
		register_addr |= (1 << 7);
 80035dc:	79bb      	ldrb	r3, [r7, #6]
 80035de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80035e2:	71bb      	strb	r3, [r7, #6]
	}

	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 80035e4:	7979      	ldrb	r1, [r7, #5]
 80035e6:	4b14      	ldr	r3, [pc, #80]	; (8003638 <i2c_master_write+0x80>)
 80035e8:	9301      	str	r3, [sp, #4]
 80035ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035ee:	9300      	str	r3, [sp, #0]
 80035f0:	2302      	movs	r3, #2
 80035f2:	2200      	movs	r2, #0
 80035f4:	4811      	ldr	r0, [pc, #68]	; (800363c <i2c_master_write+0x84>)
 80035f6:	f7ff fefd 	bl	80033f4 <LL_I2C_HandleTransfer>

	LL_I2C_TransmitData8(I2C1, register_addr);
 80035fa:	79bb      	ldrb	r3, [r7, #6]
 80035fc:	4619      	mov	r1, r3
 80035fe:	480f      	ldr	r0, [pc, #60]	; (800363c <i2c_master_write+0x84>)
 8003600:	f7ff ff2b 	bl	800345a <LL_I2C_TransmitData8>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8003604:	e00a      	b.n	800361c <i2c_master_write+0x64>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8003606:	480d      	ldr	r0, [pc, #52]	; (800363c <i2c_master_write+0x84>)
 8003608:	f7ff fe9b 	bl	8003342 <LL_I2C_IsActiveFlag_TXIS>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d004      	beq.n	800361c <i2c_master_write+0x64>
		{
			LL_I2C_TransmitData8(I2C1, data);
 8003612:	79fb      	ldrb	r3, [r7, #7]
 8003614:	4619      	mov	r1, r3
 8003616:	4809      	ldr	r0, [pc, #36]	; (800363c <i2c_master_write+0x84>)
 8003618:	f7ff ff1f 	bl	800345a <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 800361c:	4807      	ldr	r0, [pc, #28]	; (800363c <i2c_master_write+0x84>)
 800361e:	f7ff feb6 	bl	800338e <LL_I2C_IsActiveFlag_STOP>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d0ee      	beq.n	8003606 <i2c_master_write+0x4e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8003628:	4804      	ldr	r0, [pc, #16]	; (800363c <i2c_master_write+0x84>)
 800362a:	f7ff fec3 	bl	80033b4 <LL_I2C_ClearFlag_STOP>
}
 800362e:	bf00      	nop
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	bd90      	pop	{r4, r7, pc}
 8003636:	bf00      	nop
 8003638:	80002000 	.word	0x80002000
 800363c:	40005400 	.word	0x40005400

08003640 <i2c_master_read>:


uint8_t* i2c_master_read(uint8_t* buffer, uint8_t length, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af02      	add	r7, sp, #8
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	4608      	mov	r0, r1
 800364a:	4611      	mov	r1, r2
 800364c:	461a      	mov	r2, r3
 800364e:	4603      	mov	r3, r0
 8003650:	70fb      	strb	r3, [r7, #3]
 8003652:	460b      	mov	r3, r1
 8003654:	70bb      	strb	r3, [r7, #2]
 8003656:	4613      	mov	r3, r2
 8003658:	707b      	strb	r3, [r7, #1]
	aReceiveBuffer_read = buffer;
 800365a:	4a31      	ldr	r2, [pc, #196]	; (8003720 <i2c_master_read+0xe0>)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6013      	str	r3, [r2, #0]

	if(read_flag)
 8003660:	7c3b      	ldrb	r3, [r7, #16]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d003      	beq.n	800366e <i2c_master_read+0x2e>
	{
		register_addr |= (1 << 7);
 8003666:	78bb      	ldrb	r3, [r7, #2]
 8003668:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800366c:	70bb      	strb	r3, [r7, #2]
	}

	end_of_read_flag = 0;
 800366e:	4b2d      	ldr	r3, [pc, #180]	; (8003724 <i2c_master_read+0xe4>)
 8003670:	2200      	movs	r2, #0
 8003672:	701a      	strb	r2, [r3, #0]

	LL_I2C_EnableIT_RX(I2C1);
 8003674:	482c      	ldr	r0, [pc, #176]	; (8003728 <i2c_master_read+0xe8>)
 8003676:	f7ff fe44 	bl	8003302 <LL_I2C_EnableIT_RX>

	//poziadam slejva o citanie z jeho registra
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 800367a:	7879      	ldrb	r1, [r7, #1]
 800367c:	4b2b      	ldr	r3, [pc, #172]	; (800372c <i2c_master_read+0xec>)
 800367e:	9301      	str	r3, [sp, #4]
 8003680:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	2301      	movs	r3, #1
 8003688:	2200      	movs	r2, #0
 800368a:	4827      	ldr	r0, [pc, #156]	; (8003728 <i2c_master_read+0xe8>)
 800368c:	f7ff feb2 	bl	80033f4 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8003690:	e00a      	b.n	80036a8 <i2c_master_read+0x68>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8003692:	4825      	ldr	r0, [pc, #148]	; (8003728 <i2c_master_read+0xe8>)
 8003694:	f7ff fe55 	bl	8003342 <LL_I2C_IsActiveFlag_TXIS>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d004      	beq.n	80036a8 <i2c_master_read+0x68>
		{
			LL_I2C_TransmitData8(I2C1, register_addr);
 800369e:	78bb      	ldrb	r3, [r7, #2]
 80036a0:	4619      	mov	r1, r3
 80036a2:	4821      	ldr	r0, [pc, #132]	; (8003728 <i2c_master_read+0xe8>)
 80036a4:	f7ff fed9 	bl	800345a <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80036a8:	481f      	ldr	r0, [pc, #124]	; (8003728 <i2c_master_read+0xe8>)
 80036aa:	f7ff fe70 	bl	800338e <LL_I2C_IsActiveFlag_STOP>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d0ee      	beq.n	8003692 <i2c_master_read+0x52>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 80036b4:	481c      	ldr	r0, [pc, #112]	; (8003728 <i2c_master_read+0xe8>)
 80036b6:	f7ff fe7d 	bl	80033b4 <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){}
 80036ba:	bf00      	nop
 80036bc:	481a      	ldr	r0, [pc, #104]	; (8003728 <i2c_master_read+0xe8>)
 80036be:	f7ff fe66 	bl	800338e <LL_I2C_IsActiveFlag_STOP>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1f9      	bne.n	80036bc <i2c_master_read+0x7c>

	//citam register od slejva
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 80036c8:	7879      	ldrb	r1, [r7, #1]
 80036ca:	78fa      	ldrb	r2, [r7, #3]
 80036cc:	4b18      	ldr	r3, [pc, #96]	; (8003730 <i2c_master_read+0xf0>)
 80036ce:	9301      	str	r3, [sp, #4]
 80036d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036d4:	9300      	str	r3, [sp, #0]
 80036d6:	4613      	mov	r3, r2
 80036d8:	2200      	movs	r2, #0
 80036da:	4813      	ldr	r0, [pc, #76]	; (8003728 <i2c_master_read+0xe8>)
 80036dc:	f7ff fe8a 	bl	80033f4 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 80036e0:	bf00      	nop
 80036e2:	4811      	ldr	r0, [pc, #68]	; (8003728 <i2c_master_read+0xe8>)
 80036e4:	f7ff fe53 	bl	800338e <LL_I2C_IsActiveFlag_STOP>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d0f9      	beq.n	80036e2 <i2c_master_read+0xa2>

	//End of transfer
	LL_I2C_ClearFlag_STOP(I2C1);
 80036ee:	480e      	ldr	r0, [pc, #56]	; (8003728 <i2c_master_read+0xe8>)
 80036f0:	f7ff fe60 	bl	80033b4 <LL_I2C_ClearFlag_STOP>
	LL_I2C_DisableIT_RX(I2C1);
 80036f4:	480c      	ldr	r0, [pc, #48]	; (8003728 <i2c_master_read+0xe8>)
 80036f6:	f7ff fe14 	bl	8003322 <LL_I2C_DisableIT_RX>
	I2C1->ICR |= (1 << 4);
 80036fa:	4b0b      	ldr	r3, [pc, #44]	; (8003728 <i2c_master_read+0xe8>)
 80036fc:	69db      	ldr	r3, [r3, #28]
 80036fe:	4a0a      	ldr	r2, [pc, #40]	; (8003728 <i2c_master_read+0xe8>)
 8003700:	f043 0310 	orr.w	r3, r3, #16
 8003704:	61d3      	str	r3, [r2, #28]
	ubReceiveIndex = 0;
 8003706:	4b0b      	ldr	r3, [pc, #44]	; (8003734 <i2c_master_read+0xf4>)
 8003708:	2200      	movs	r2, #0
 800370a:	701a      	strb	r2, [r3, #0]
	end_of_read_flag = 1;
 800370c:	4b05      	ldr	r3, [pc, #20]	; (8003724 <i2c_master_read+0xe4>)
 800370e:	2201      	movs	r2, #1
 8003710:	701a      	strb	r2, [r3, #0]

	return aReceiveBuffer_read;
 8003712:	4b03      	ldr	r3, [pc, #12]	; (8003720 <i2c_master_read+0xe0>)
 8003714:	681b      	ldr	r3, [r3, #0]
}
 8003716:	4618      	mov	r0, r3
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	20000228 	.word	0x20000228
 8003724:	20000218 	.word	0x20000218
 8003728:	40005400 	.word	0x40005400
 800372c:	80002000 	.word	0x80002000
 8003730:	80002400 	.word	0x80002400
 8003734:	20000219 	.word	0x20000219

08003738 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8003738:	b598      	push	{r3, r4, r7, lr}
 800373a:	af00      	add	r7, sp, #0
	/* Check RXNE flag value in ISR register */
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 800373c:	4812      	ldr	r0, [pc, #72]	; (8003788 <I2C1_EV_IRQHandler+0x50>)
 800373e:	f7ff fe13 	bl	8003368 <LL_I2C_IsActiveFlag_RXNE>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d01c      	beq.n	8003782 <I2C1_EV_IRQHandler+0x4a>
	{
		/* Call function Master Reception Callback */
		aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 8003748:	4b10      	ldr	r3, [pc, #64]	; (800378c <I2C1_EV_IRQHandler+0x54>)
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	4b10      	ldr	r3, [pc, #64]	; (8003790 <I2C1_EV_IRQHandler+0x58>)
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	b2db      	uxtb	r3, r3
 8003752:	1c59      	adds	r1, r3, #1
 8003754:	b2c8      	uxtb	r0, r1
 8003756:	490e      	ldr	r1, [pc, #56]	; (8003790 <I2C1_EV_IRQHandler+0x58>)
 8003758:	7008      	strb	r0, [r1, #0]
 800375a:	18d4      	adds	r4, r2, r3
 800375c:	480a      	ldr	r0, [pc, #40]	; (8003788 <I2C1_EV_IRQHandler+0x50>)
 800375e:	f7ff fe6f 	bl	8003440 <LL_I2C_ReceiveData8>
 8003762:	4603      	mov	r3, r0
 8003764:	7023      	strb	r3, [r4, #0]
		(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 8003766:	4b0a      	ldr	r3, [pc, #40]	; (8003790 <I2C1_EV_IRQHandler+0x58>)
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	b2db      	uxtb	r3, r3
 800376c:	2b13      	cmp	r3, #19
 800376e:	d903      	bls.n	8003778 <I2C1_EV_IRQHandler+0x40>
 8003770:	4b07      	ldr	r3, [pc, #28]	; (8003790 <I2C1_EV_IRQHandler+0x58>)
 8003772:	2200      	movs	r2, #0
 8003774:	701a      	strb	r2, [r3, #0]
 8003776:	e001      	b.n	800377c <I2C1_EV_IRQHandler+0x44>
 8003778:	4b05      	ldr	r3, [pc, #20]	; (8003790 <I2C1_EV_IRQHandler+0x58>)
 800377a:	781b      	ldrb	r3, [r3, #0]
		end_of_read_flag = 0;
 800377c:	4b05      	ldr	r3, [pc, #20]	; (8003794 <I2C1_EV_IRQHandler+0x5c>)
 800377e:	2200      	movs	r2, #0
 8003780:	701a      	strb	r2, [r3, #0]
	}
}
 8003782:	bf00      	nop
 8003784:	bd98      	pop	{r3, r4, r7, pc}
 8003786:	bf00      	nop
 8003788:	40005400 	.word	0x40005400
 800378c:	20000228 	.word	0x20000228
 8003790:	20000219 	.word	0x20000219
 8003794:	20000218 	.word	0x20000218

08003798 <NVIC_SetPriorityGrouping>:
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f003 0307 	and.w	r3, r3, #7
 80037a6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037a8:	4b0c      	ldr	r3, [pc, #48]	; (80037dc <NVIC_SetPriorityGrouping+0x44>)
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037ae:	68ba      	ldr	r2, [r7, #8]
 80037b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037b4:	4013      	ands	r3, r2
 80037b6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037ca:	4a04      	ldr	r2, [pc, #16]	; (80037dc <NVIC_SetPriorityGrouping+0x44>)
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	60d3      	str	r3, [r2, #12]
}
 80037d0:	bf00      	nop
 80037d2:	3714      	adds	r7, #20
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	e000ed00 	.word	0xe000ed00

080037e0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80037e0:	b480      	push	{r7}
 80037e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80037e4:	4b05      	ldr	r3, [pc, #20]	; (80037fc <LL_RCC_HSI_Enable+0x1c>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a04      	ldr	r2, [pc, #16]	; (80037fc <LL_RCC_HSI_Enable+0x1c>)
 80037ea:	f043 0301 	orr.w	r3, r3, #1
 80037ee:	6013      	str	r3, [r2, #0]
}
 80037f0:	bf00      	nop
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	40021000 	.word	0x40021000

08003800 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8003804:	4b06      	ldr	r3, [pc, #24]	; (8003820 <LL_RCC_HSI_IsReady+0x20>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b02      	cmp	r3, #2
 800380e:	bf0c      	ite	eq
 8003810:	2301      	moveq	r3, #1
 8003812:	2300      	movne	r3, #0
 8003814:	b2db      	uxtb	r3, r3
}
 8003816:	4618      	mov	r0, r3
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr
 8003820:	40021000 	.word	0x40021000

08003824 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 800382c:	4b07      	ldr	r3, [pc, #28]	; (800384c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	4904      	ldr	r1, [pc, #16]	; (800384c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800383a:	4313      	orrs	r3, r2
 800383c:	600b      	str	r3, [r1, #0]
}
 800383e:	bf00      	nop
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	40021000 	.word	0x40021000

08003850 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003858:	4b06      	ldr	r3, [pc, #24]	; (8003874 <LL_RCC_SetSysClkSource+0x24>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f023 0203 	bic.w	r2, r3, #3
 8003860:	4904      	ldr	r1, [pc, #16]	; (8003874 <LL_RCC_SetSysClkSource+0x24>)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4313      	orrs	r3, r2
 8003866:	604b      	str	r3, [r1, #4]
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr
 8003874:	40021000 	.word	0x40021000

08003878 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003878:	b480      	push	{r7}
 800387a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800387c:	4b04      	ldr	r3, [pc, #16]	; (8003890 <LL_RCC_GetSysClkSource+0x18>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f003 030c 	and.w	r3, r3, #12
}
 8003884:	4618      	mov	r0, r3
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	40021000 	.word	0x40021000

08003894 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800389c:	4b06      	ldr	r3, [pc, #24]	; (80038b8 <LL_RCC_SetAHBPrescaler+0x24>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038a4:	4904      	ldr	r1, [pc, #16]	; (80038b8 <LL_RCC_SetAHBPrescaler+0x24>)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	604b      	str	r3, [r1, #4]
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr
 80038b8:	40021000 	.word	0x40021000

080038bc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80038c4:	4b06      	ldr	r3, [pc, #24]	; (80038e0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038cc:	4904      	ldr	r1, [pc, #16]	; (80038e0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	604b      	str	r3, [r1, #4]
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr
 80038e0:	40021000 	.word	0x40021000

080038e4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80038ec:	4b06      	ldr	r3, [pc, #24]	; (8003908 <LL_RCC_SetAPB2Prescaler+0x24>)
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038f4:	4904      	ldr	r1, [pc, #16]	; (8003908 <LL_RCC_SetAPB2Prescaler+0x24>)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	604b      	str	r3, [r1, #4]
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr
 8003908:	40021000 	.word	0x40021000

0800390c <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 8003914:	4b08      	ldr	r3, [pc, #32]	; (8003938 <LL_RCC_SetI2CClockSource+0x2c>)
 8003916:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	0e1b      	lsrs	r3, r3, #24
 800391c:	43db      	mvns	r3, r3
 800391e:	401a      	ands	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003926:	4904      	ldr	r1, [pc, #16]	; (8003938 <LL_RCC_SetI2CClockSource+0x2c>)
 8003928:	4313      	orrs	r3, r2
 800392a:	630b      	str	r3, [r1, #48]	; 0x30
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	40021000 	.word	0x40021000

0800393c <LL_APB1_GRP1_EnableClock>:
{
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8003944:	4b08      	ldr	r3, [pc, #32]	; (8003968 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003946:	69da      	ldr	r2, [r3, #28]
 8003948:	4907      	ldr	r1, [pc, #28]	; (8003968 <LL_APB1_GRP1_EnableClock+0x2c>)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4313      	orrs	r3, r2
 800394e:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003950:	4b05      	ldr	r3, [pc, #20]	; (8003968 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003952:	69da      	ldr	r2, [r3, #28]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4013      	ands	r3, r2
 8003958:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800395a:	68fb      	ldr	r3, [r7, #12]
}
 800395c:	bf00      	nop
 800395e:	3714      	adds	r7, #20
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	40021000 	.word	0x40021000

0800396c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800396c:	b480      	push	{r7}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8003974:	4b08      	ldr	r3, [pc, #32]	; (8003998 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003976:	699a      	ldr	r2, [r3, #24]
 8003978:	4907      	ldr	r1, [pc, #28]	; (8003998 <LL_APB2_GRP1_EnableClock+0x2c>)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4313      	orrs	r3, r2
 800397e:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003980:	4b05      	ldr	r3, [pc, #20]	; (8003998 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003982:	699a      	ldr	r2, [r3, #24]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4013      	ands	r3, r2
 8003988:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800398a:	68fb      	ldr	r3, [r7, #12]
}
 800398c:	bf00      	nop
 800398e:	3714      	adds	r7, #20
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr
 8003998:	40021000 	.word	0x40021000

0800399c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80039a4:	4b06      	ldr	r3, [pc, #24]	; (80039c0 <LL_FLASH_SetLatency+0x24>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f023 0207 	bic.w	r2, r3, #7
 80039ac:	4904      	ldr	r1, [pc, #16]	; (80039c0 <LL_FLASH_SetLatency+0x24>)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	600b      	str	r3, [r1, #0]
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr
 80039c0:	40022000 	.word	0x40022000

080039c4 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80039c4:	b480      	push	{r7}
 80039c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80039c8:	4b04      	ldr	r3, [pc, #16]	; (80039dc <LL_FLASH_GetLatency+0x18>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0307 	and.w	r3, r3, #7
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	40022000 	.word	0x40022000

080039e0 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b04      	cmp	r3, #4
 80039ec:	d106      	bne.n	80039fc <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 80039ee:	4b09      	ldr	r3, [pc, #36]	; (8003a14 <LL_SYSTICK_SetClkSource+0x34>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a08      	ldr	r2, [pc, #32]	; (8003a14 <LL_SYSTICK_SetClkSource+0x34>)
 80039f4:	f043 0304 	orr.w	r3, r3, #4
 80039f8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 80039fa:	e005      	b.n	8003a08 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 80039fc:	4b05      	ldr	r3, [pc, #20]	; (8003a14 <LL_SYSTICK_SetClkSource+0x34>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a04      	ldr	r2, [pc, #16]	; (8003a14 <LL_SYSTICK_SetClkSource+0x34>)
 8003a02:	f023 0304 	bic.w	r3, r3, #4
 8003a06:	6013      	str	r3, [r2, #0]
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr
 8003a14:	e000e010 	.word	0xe000e010

08003a18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003a18:	b590      	push	{r4, r7, lr}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af02      	add	r7, sp, #8
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8003a1e:	2001      	movs	r0, #1
 8003a20:	f7ff ffa4 	bl	800396c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8003a24:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003a28:	f7ff ff88 	bl	800393c <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a2c:	2003      	movs	r0, #3
 8003a2e:	f7ff feb3 	bl	8003798 <NVIC_SetPriorityGrouping>

  /* System interrupt init*/


  /* Configure the system clock */
  SystemClock_Config();
 8003a32:	f000 f935 	bl	8003ca0 <SystemClock_Config>


  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003a36:	f7ff fb0d 	bl	8003054 <MX_GPIO_Init>
  MX_I2C1_Init();
 8003a3a:	f7ff fd4d 	bl	80034d8 <MX_I2C1_Init>

  setSegments();
 8003a3e:	f7fe fa5f 	bl	8001f00 <setSegments>
  setDigits();
 8003a42:	f7fe faa9 	bl	8001f98 <setDigits>

  LL_mDelay(2000);
 8003a46:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003a4a:	f7fe f9b9 	bl	8001dc0 <LL_mDelay>

  resetDigits();
 8003a4e:	f7fe fa85 	bl	8001f5c <resetDigits>
  resetSegments();
 8003a52:	f7fe fa27 	bl	8001ea4 <resetSegments>

  lsm6ds0_init();
 8003a56:	f000 fd51 	bl	80044fc <lsm6ds0_init>
  lps25hb_init();
 8003a5a:	f000 fe17 	bl	800468c <lps25hb_init>
  hts221_init();
 8003a5e:	f000 ffcf 	bl	8004a00 <hts221_init>
  lis3mdl_init();
 8003a62:	f000 feef 	bl	8004844 <lis3mdl_init>

  MX_TIM3_Init();
 8003a66:	f000 fc8d 	bl	8004384 <MX_TIM3_Init>
  {
	  //os			   x      y        z
//	  lsm6ds0_get_acc(acc, (acc+1), (acc+2));

	  /* Display chosen state */
	  if (switch_state == 1) {
 8003a6a:	4b7a      	ldr	r3, [pc, #488]	; (8003c54 <main+0x23c>)
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d125      	bne.n	8003abe <main+0xa6>
		  lis3mdl_get_mag(mag, (mag+1), (mag+2));
 8003a72:	4b79      	ldr	r3, [pc, #484]	; (8003c58 <main+0x240>)
 8003a74:	4a79      	ldr	r2, [pc, #484]	; (8003c5c <main+0x244>)
 8003a76:	4619      	mov	r1, r3
 8003a78:	4879      	ldr	r0, [pc, #484]	; (8003c60 <main+0x248>)
 8003a7a:	f000 fe81 	bl	8004780 <lis3mdl_get_mag>
		  azimuth = get_azimuth(*mag, *(mag+1));
 8003a7e:	4b78      	ldr	r3, [pc, #480]	; (8003c60 <main+0x248>)
 8003a80:	edd3 7a00 	vldr	s15, [r3]
 8003a84:	4b76      	ldr	r3, [pc, #472]	; (8003c60 <main+0x248>)
 8003a86:	ed93 7a01 	vldr	s14, [r3, #4]
 8003a8a:	eef0 0a47 	vmov.f32	s1, s14
 8003a8e:	eeb0 0a67 	vmov.f32	s0, s15
 8003a92:	f000 f941 	bl	8003d18 <get_azimuth>
 8003a96:	eef0 7a40 	vmov.f32	s15, s0
 8003a9a:	4b72      	ldr	r3, [pc, #456]	; (8003c64 <main+0x24c>)
 8003a9c:	edc3 7a00 	vstr	s15, [r3]
		  snprintf(string, sizeof(string), "MAG_%2.1f", azimuth);
 8003aa0:	4b70      	ldr	r3, [pc, #448]	; (8003c64 <main+0x24c>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7fc fd4f 	bl	8000548 <__aeabi_f2d>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	460c      	mov	r4, r1
 8003aae:	e9cd 3400 	strd	r3, r4, [sp]
 8003ab2:	4a6d      	ldr	r2, [pc, #436]	; (8003c68 <main+0x250>)
 8003ab4:	2110      	movs	r1, #16
 8003ab6:	486d      	ldr	r0, [pc, #436]	; (8003c6c <main+0x254>)
 8003ab8:	f001 fe3a 	bl	8005730 <sniprintf>
 8003abc:	e07d      	b.n	8003bba <main+0x1a2>
	  }

	  else if (switch_state == 2) {
 8003abe:	4b65      	ldr	r3, [pc, #404]	; (8003c54 <main+0x23c>)
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d118      	bne.n	8003af8 <main+0xe0>
		  temp = hts221_get_temp();
 8003ac6:	f000 ff4d 	bl	8004964 <hts221_get_temp>
 8003aca:	4603      	mov	r3, r0
 8003acc:	ee07 3a90 	vmov	s15, r3
 8003ad0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ad4:	4b66      	ldr	r3, [pc, #408]	; (8003c70 <main+0x258>)
 8003ad6:	edc3 7a00 	vstr	s15, [r3]
		  snprintf(string, sizeof(string), "TEMP_%2.1f", temp);;
 8003ada:	4b65      	ldr	r3, [pc, #404]	; (8003c70 <main+0x258>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7fc fd32 	bl	8000548 <__aeabi_f2d>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	460c      	mov	r4, r1
 8003ae8:	e9cd 3400 	strd	r3, r4, [sp]
 8003aec:	4a61      	ldr	r2, [pc, #388]	; (8003c74 <main+0x25c>)
 8003aee:	2110      	movs	r1, #16
 8003af0:	485e      	ldr	r0, [pc, #376]	; (8003c6c <main+0x254>)
 8003af2:	f001 fe1d 	bl	8005730 <sniprintf>
 8003af6:	e060      	b.n	8003bba <main+0x1a2>
	  }

	  else if (switch_state == 3) {
 8003af8:	4b56      	ldr	r3, [pc, #344]	; (8003c54 <main+0x23c>)
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	2b03      	cmp	r3, #3
 8003afe:	d119      	bne.n	8003b34 <main+0x11c>
		  hts221_get_hum(hum);
 8003b00:	4b5d      	ldr	r3, [pc, #372]	; (8003c78 <main+0x260>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7fc fd1f 	bl	8000548 <__aeabi_f2d>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	460c      	mov	r4, r1
 8003b0e:	ec44 3b10 	vmov	d0, r3, r4
 8003b12:	f000 ff41 	bl	8004998 <hts221_get_hum>
		  snprintf(string, sizeof(string), "HUM_%2f", hum);
 8003b16:	4b58      	ldr	r3, [pc, #352]	; (8003c78 <main+0x260>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7fc fd14 	bl	8000548 <__aeabi_f2d>
 8003b20:	4603      	mov	r3, r0
 8003b22:	460c      	mov	r4, r1
 8003b24:	e9cd 3400 	strd	r3, r4, [sp]
 8003b28:	4a54      	ldr	r2, [pc, #336]	; (8003c7c <main+0x264>)
 8003b2a:	2110      	movs	r1, #16
 8003b2c:	484f      	ldr	r0, [pc, #316]	; (8003c6c <main+0x254>)
 8003b2e:	f001 fdff 	bl	8005730 <sniprintf>
 8003b32:	e042      	b.n	8003bba <main+0x1a2>
	  }

	  else if (switch_state == 4) {
 8003b34:	4b47      	ldr	r3, [pc, #284]	; (8003c54 <main+0x23c>)
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	2b04      	cmp	r3, #4
 8003b3a:	d10c      	bne.n	8003b56 <main+0x13e>
		  lps25hb_get_press(press);
 8003b3c:	4b50      	ldr	r3, [pc, #320]	; (8003c80 <main+0x268>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f000 fd6f 	bl	8004624 <lps25hb_get_press>
		  snprintf(string, sizeof(string), "BAR_%4.2f", press);
 8003b46:	4b4e      	ldr	r3, [pc, #312]	; (8003c80 <main+0x268>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a4e      	ldr	r2, [pc, #312]	; (8003c84 <main+0x26c>)
 8003b4c:	2110      	movs	r1, #16
 8003b4e:	4847      	ldr	r0, [pc, #284]	; (8003c6c <main+0x254>)
 8003b50:	f001 fdee 	bl	8005730 <sniprintf>
 8003b54:	e031      	b.n	8003bba <main+0x1a2>
	  }

	  else if (switch_state == 5) {
 8003b56:	4b3f      	ldr	r3, [pc, #252]	; (8003c54 <main+0x23c>)
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	2b05      	cmp	r3, #5
 8003b5c:	d127      	bne.n	8003bae <main+0x196>
		  lps25hb_get_press(press);
 8003b5e:	4b48      	ldr	r3, [pc, #288]	; (8003c80 <main+0x268>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f000 fd5e 	bl	8004624 <lps25hb_get_press>
		  int16_t temperature = lps25hb_get_temp();
 8003b68:	f000 fd42 	bl	80045f0 <lps25hb_get_temp>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	80bb      	strh	r3, [r7, #4]
		  alt = get_altitude(*press, temperature);
 8003b70:	4b43      	ldr	r3, [pc, #268]	; (8003c80 <main+0x268>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	edd3 7a00 	vldr	s15, [r3]
 8003b78:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	eeb0 0a67 	vmov.f32	s0, s15
 8003b82:	f000 f909 	bl	8003d98 <get_altitude>
 8003b86:	eef0 7a40 	vmov.f32	s15, s0
 8003b8a:	4b3f      	ldr	r3, [pc, #252]	; (8003c88 <main+0x270>)
 8003b8c:	edc3 7a00 	vstr	s15, [r3]
		  snprintf(string, sizeof(string), "ALT_%4.1f", alt);
 8003b90:	4b3d      	ldr	r3, [pc, #244]	; (8003c88 <main+0x270>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f7fc fcd7 	bl	8000548 <__aeabi_f2d>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	460c      	mov	r4, r1
 8003b9e:	e9cd 3400 	strd	r3, r4, [sp]
 8003ba2:	4a3a      	ldr	r2, [pc, #232]	; (8003c8c <main+0x274>)
 8003ba4:	2110      	movs	r1, #16
 8003ba6:	4831      	ldr	r0, [pc, #196]	; (8003c6c <main+0x254>)
 8003ba8:	f001 fdc2 	bl	8005730 <sniprintf>
 8003bac:	e005      	b.n	8003bba <main+0x1a2>
	  }

	  else {
		snprintf(string, sizeof(string), "Error");
 8003bae:	4b2f      	ldr	r3, [pc, #188]	; (8003c6c <main+0x254>)
 8003bb0:	4a37      	ldr	r2, [pc, #220]	; (8003c90 <main+0x278>)
 8003bb2:	6810      	ldr	r0, [r2, #0]
 8003bb4:	6018      	str	r0, [r3, #0]
 8003bb6:	8892      	ldrh	r2, [r2, #4]
 8003bb8:	809a      	strh	r2, [r3, #4]
	  }

	  /* Get direction of displaying values */
	  if(backwards) {
 8003bba:	4b36      	ldr	r3, [pc, #216]	; (8003c94 <main+0x27c>)
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d020      	beq.n	8003c04 <main+0x1ec>
		  for (uint8_t i = 0; i < 4; i++) {
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	71fb      	strb	r3, [r7, #7]
 8003bc6:	e00c      	b.n	8003be2 <main+0x1ca>
			  string_disp[i] = string[pos-2+i];
 8003bc8:	4b33      	ldr	r3, [pc, #204]	; (8003c98 <main+0x280>)
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	1e9a      	subs	r2, r3, #2
 8003bce:	79fb      	ldrb	r3, [r7, #7]
 8003bd0:	441a      	add	r2, r3
 8003bd2:	79fb      	ldrb	r3, [r7, #7]
 8003bd4:	4925      	ldr	r1, [pc, #148]	; (8003c6c <main+0x254>)
 8003bd6:	5c89      	ldrb	r1, [r1, r2]
 8003bd8:	4a30      	ldr	r2, [pc, #192]	; (8003c9c <main+0x284>)
 8003bda:	54d1      	strb	r1, [r2, r3]
		  for (uint8_t i = 0; i < 4; i++) {
 8003bdc:	79fb      	ldrb	r3, [r7, #7]
 8003bde:	3301      	adds	r3, #1
 8003be0:	71fb      	strb	r3, [r7, #7]
 8003be2:	79fb      	ldrb	r3, [r7, #7]
 8003be4:	2b03      	cmp	r3, #3
 8003be6:	d9ef      	bls.n	8003bc8 <main+0x1b0>
		  }

		  --pos;
 8003be8:	4b2b      	ldr	r3, [pc, #172]	; (8003c98 <main+0x280>)
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	3b01      	subs	r3, #1
 8003bee:	b2da      	uxtb	r2, r3
 8003bf0:	4b29      	ldr	r3, [pc, #164]	; (8003c98 <main+0x280>)
 8003bf2:	701a      	strb	r2, [r3, #0]

		  if (pos <= 1) {
 8003bf4:	4b28      	ldr	r3, [pc, #160]	; (8003c98 <main+0x280>)
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d823      	bhi.n	8003c44 <main+0x22c>
			  backwards = 0;
 8003bfc:	4b25      	ldr	r3, [pc, #148]	; (8003c94 <main+0x27c>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	701a      	strb	r2, [r3, #0]
 8003c02:	e01f      	b.n	8003c44 <main+0x22c>
		  }
	  }

	  else {
		  for (uint8_t i = 0; i < 4; i++) {
 8003c04:	2300      	movs	r3, #0
 8003c06:	71bb      	strb	r3, [r7, #6]
 8003c08:	e00c      	b.n	8003c24 <main+0x20c>
			  string_disp[i] = string[pos+i];
 8003c0a:	4b23      	ldr	r3, [pc, #140]	; (8003c98 <main+0x280>)
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	461a      	mov	r2, r3
 8003c10:	79bb      	ldrb	r3, [r7, #6]
 8003c12:	441a      	add	r2, r3
 8003c14:	79bb      	ldrb	r3, [r7, #6]
 8003c16:	4915      	ldr	r1, [pc, #84]	; (8003c6c <main+0x254>)
 8003c18:	5c89      	ldrb	r1, [r1, r2]
 8003c1a:	4a20      	ldr	r2, [pc, #128]	; (8003c9c <main+0x284>)
 8003c1c:	54d1      	strb	r1, [r2, r3]
		  for (uint8_t i = 0; i < 4; i++) {
 8003c1e:	79bb      	ldrb	r3, [r7, #6]
 8003c20:	3301      	adds	r3, #1
 8003c22:	71bb      	strb	r3, [r7, #6]
 8003c24:	79bb      	ldrb	r3, [r7, #6]
 8003c26:	2b03      	cmp	r3, #3
 8003c28:	d9ef      	bls.n	8003c0a <main+0x1f2>
		  }

		  ++pos;
 8003c2a:	4b1b      	ldr	r3, [pc, #108]	; (8003c98 <main+0x280>)
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	3301      	adds	r3, #1
 8003c30:	b2da      	uxtb	r2, r3
 8003c32:	4b19      	ldr	r3, [pc, #100]	; (8003c98 <main+0x280>)
 8003c34:	701a      	strb	r2, [r3, #0]

		  if (pos >= (sizeof(string)/sizeof(string[1])-4)) {
 8003c36:	4b18      	ldr	r3, [pc, #96]	; (8003c98 <main+0x280>)
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	2b0b      	cmp	r3, #11
 8003c3c:	d902      	bls.n	8003c44 <main+0x22c>
			  backwards = 1;
 8003c3e:	4b15      	ldr	r3, [pc, #84]	; (8003c94 <main+0x27c>)
 8003c40:	2201      	movs	r2, #1
 8003c42:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  displayNumber(string_disp);
 8003c44:	4815      	ldr	r0, [pc, #84]	; (8003c9c <main+0x284>)
 8003c46:	f7fe fe6b 	bl	8002920 <displayNumber>
	  LL_mDelay(50);
 8003c4a:	2032      	movs	r0, #50	; 0x32
 8003c4c:	f7fe f8b8 	bl	8001dc0 <LL_mDelay>
	  if (switch_state == 1) {
 8003c50:	e70b      	b.n	8003a6a <main+0x52>
 8003c52:	bf00      	nop
 8003c54:	20000000 	.word	0x20000000
 8003c58:	20000264 	.word	0x20000264
 8003c5c:	20000268 	.word	0x20000268
 8003c60:	20000260 	.word	0x20000260
 8003c64:	2000023c 	.word	0x2000023c
 8003c68:	08009b48 	.word	0x08009b48
 8003c6c:	20000240 	.word	0x20000240
 8003c70:	20000250 	.word	0x20000250
 8003c74:	08009b54 	.word	0x08009b54
 8003c78:	2000022c 	.word	0x2000022c
 8003c7c:	08009b60 	.word	0x08009b60
 8003c80:	20000258 	.word	0x20000258
 8003c84:	08009b68 	.word	0x08009b68
 8003c88:	20000254 	.word	0x20000254
 8003c8c:	08009b74 	.word	0x08009b74
 8003c90:	08009b80 	.word	0x08009b80
 8003c94:	2000021b 	.word	0x2000021b
 8003c98:	2000021a 	.word	0x2000021a
 8003c9c:	2000025c 	.word	0x2000025c

08003ca0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8003ca4:	2000      	movs	r0, #0
 8003ca6:	f7ff fe79 	bl	800399c <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8003caa:	f7ff fe8b 	bl	80039c4 <LL_FLASH_GetLatency>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d001      	beq.n	8003cb8 <SystemClock_Config+0x18>
  {
  Error_Handler();
 8003cb4:	f000 f8d4 	bl	8003e60 <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 8003cb8:	f7ff fd92 	bl	80037e0 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8003cbc:	bf00      	nop
 8003cbe:	f7ff fd9f 	bl	8003800 <LL_RCC_HSI_IsReady>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d1fa      	bne.n	8003cbe <SystemClock_Config+0x1e>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8003cc8:	2010      	movs	r0, #16
 8003cca:	f7ff fdab 	bl	8003824 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8003cce:	2000      	movs	r0, #0
 8003cd0:	f7ff fde0 	bl	8003894 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8003cd4:	2000      	movs	r0, #0
 8003cd6:	f7ff fdf1 	bl	80038bc <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 8003cda:	2000      	movs	r0, #0
 8003cdc:	f7ff fe02 	bl	80038e4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8003ce0:	2000      	movs	r0, #0
 8003ce2:	f7ff fdb5 	bl	8003850 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8003ce6:	bf00      	nop
 8003ce8:	f7ff fdc6 	bl	8003878 <LL_RCC_GetSysClkSource>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1fa      	bne.n	8003ce8 <SystemClock_Config+0x48>
  {

  }
  LL_Init1msTick(8000000);
 8003cf2:	4807      	ldr	r0, [pc, #28]	; (8003d10 <SystemClock_Config+0x70>)
 8003cf4:	f7fe f856 	bl	8001da4 <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8003cf8:	2004      	movs	r0, #4
 8003cfa:	f7ff fe71 	bl	80039e0 <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(8000000);
 8003cfe:	4804      	ldr	r0, [pc, #16]	; (8003d10 <SystemClock_Config+0x70>)
 8003d00:	f7fe f882 	bl	8001e08 <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8003d04:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003d08:	f7ff fe00 	bl	800390c <LL_RCC_SetI2CClockSource>
}
 8003d0c:	bf00      	nop
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	007a1200 	.word	0x007a1200
 8003d14:	00000000 	.word	0x00000000

08003d18 <get_azimuth>:

float get_azimuth(float x, float y)
{
 8003d18:	b5b0      	push	{r4, r5, r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	ed87 0a01 	vstr	s0, [r7, #4]
 8003d22:	edc7 0a00 	vstr	s1, [r7]
	return atan2(x, y) * 180.0/M_PI;
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f7fc fc0e 	bl	8000548 <__aeabi_f2d>
 8003d2c:	4604      	mov	r4, r0
 8003d2e:	460d      	mov	r5, r1
 8003d30:	6838      	ldr	r0, [r7, #0]
 8003d32:	f7fc fc09 	bl	8000548 <__aeabi_f2d>
 8003d36:	4602      	mov	r2, r0
 8003d38:	460b      	mov	r3, r1
 8003d3a:	ec43 2b11 	vmov	d1, r2, r3
 8003d3e:	ec45 4b10 	vmov	d0, r4, r5
 8003d42:	f004 fc1b 	bl	800857c <atan2>
 8003d46:	ec51 0b10 	vmov	r0, r1, d0
 8003d4a:	f04f 0200 	mov.w	r2, #0
 8003d4e:	4b10      	ldr	r3, [pc, #64]	; (8003d90 <get_azimuth+0x78>)
 8003d50:	f7fc fc52 	bl	80005f8 <__aeabi_dmul>
 8003d54:	4603      	mov	r3, r0
 8003d56:	460c      	mov	r4, r1
 8003d58:	4618      	mov	r0, r3
 8003d5a:	4621      	mov	r1, r4
 8003d5c:	a30a      	add	r3, pc, #40	; (adr r3, 8003d88 <get_azimuth+0x70>)
 8003d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d62:	f7fc fd73 	bl	800084c <__aeabi_ddiv>
 8003d66:	4603      	mov	r3, r0
 8003d68:	460c      	mov	r4, r1
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	4621      	mov	r1, r4
 8003d6e:	f7fc ff3b 	bl	8000be8 <__aeabi_d2f>
 8003d72:	4603      	mov	r3, r0
 8003d74:	ee07 3a90 	vmov	s15, r3
}
 8003d78:	eeb0 0a67 	vmov.f32	s0, s15
 8003d7c:	3708      	adds	r7, #8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bdb0      	pop	{r4, r5, r7, pc}
 8003d82:	bf00      	nop
 8003d84:	f3af 8000 	nop.w
 8003d88:	54442d18 	.word	0x54442d18
 8003d8c:	400921fb 	.word	0x400921fb
 8003d90:	40668000 	.word	0x40668000
 8003d94:	00000000 	.word	0x00000000

08003d98 <get_altitude>:

float get_altitude(float p, int16_t temp)
{
 8003d98:	b5b0      	push	{r4, r5, r7, lr}
 8003d9a:	b08a      	sub	sp, #40	; 0x28
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	ed87 0a01 	vstr	s0, [r7, #4]
 8003da2:	4603      	mov	r3, r0
 8003da4:	807b      	strh	r3, [r7, #2]
	float p0 = 1013.25;
 8003da6:	4b2c      	ldr	r3, [pc, #176]	; (8003e58 <get_altitude+0xc0>)
 8003da8:	627b      	str	r3, [r7, #36]	; 0x24
	double press = p0/p;
 8003daa:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003dae:	edd7 7a01 	vldr	s15, [r7, #4]
 8003db2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003db6:	ee16 0a90 	vmov	r0, s13
 8003dba:	f7fc fbc5 	bl	8000548 <__aeabi_f2d>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	460c      	mov	r4, r1
 8003dc2:	e9c7 3406 	strd	r3, r4, [r7, #24]
	double exponent = 1/5.257;
 8003dc6:	a420      	add	r4, pc, #128	; (adr r4, 8003e48 <get_altitude+0xb0>)
 8003dc8:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003dcc:	e9c7 3404 	strd	r3, r4, [r7, #16]
	float numerator = (pow(press, exponent) - 1) * temp;
 8003dd0:	ed97 1b04 	vldr	d1, [r7, #16]
 8003dd4:	ed97 0b06 	vldr	d0, [r7, #24]
 8003dd8:	f004 fbd2 	bl	8008580 <pow>
 8003ddc:	ec51 0b10 	vmov	r0, r1, d0
 8003de0:	f04f 0200 	mov.w	r2, #0
 8003de4:	4b1d      	ldr	r3, [pc, #116]	; (8003e5c <get_altitude+0xc4>)
 8003de6:	f7fc fa4f 	bl	8000288 <__aeabi_dsub>
 8003dea:	4603      	mov	r3, r0
 8003dec:	460c      	mov	r4, r1
 8003dee:	4625      	mov	r5, r4
 8003df0:	461c      	mov	r4, r3
 8003df2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7fc fb94 	bl	8000524 <__aeabi_i2d>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	460b      	mov	r3, r1
 8003e00:	4620      	mov	r0, r4
 8003e02:	4629      	mov	r1, r5
 8003e04:	f7fc fbf8 	bl	80005f8 <__aeabi_dmul>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	460c      	mov	r4, r1
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	4621      	mov	r1, r4
 8003e10:	f7fc feea 	bl	8000be8 <__aeabi_d2f>
 8003e14:	4603      	mov	r3, r0
 8003e16:	60fb      	str	r3, [r7, #12]
	return numerator/0.0065;
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	f7fc fb95 	bl	8000548 <__aeabi_f2d>
 8003e1e:	a30c      	add	r3, pc, #48	; (adr r3, 8003e50 <get_altitude+0xb8>)
 8003e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e24:	f7fc fd12 	bl	800084c <__aeabi_ddiv>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	460c      	mov	r4, r1
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	4621      	mov	r1, r4
 8003e30:	f7fc feda 	bl	8000be8 <__aeabi_d2f>
 8003e34:	4603      	mov	r3, r0
 8003e36:	ee07 3a90 	vmov	s15, r3
}
 8003e3a:	eeb0 0a67 	vmov.f32	s0, s15
 8003e3e:	3728      	adds	r7, #40	; 0x28
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bdb0      	pop	{r4, r5, r7, pc}
 8003e44:	f3af 8000 	nop.w
 8003e48:	7dee2d4a 	.word	0x7dee2d4a
 8003e4c:	3fc85936 	.word	0x3fc85936
 8003e50:	76c8b439 	.word	0x76c8b439
 8003e54:	3f7a9fbe 	.word	0x3f7a9fbe
 8003e58:	447d5000 	.word	0x447d5000
 8003e5c:	3ff00000 	.word	0x3ff00000

08003e60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e60:	b480      	push	{r7}
 8003e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003e64:	bf00      	nop
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
	...

08003e70 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8003e78:	4b07      	ldr	r3, [pc, #28]	; (8003e98 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8003e7a:	695a      	ldr	r2, [r3, #20]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4013      	ands	r3, r2
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	bf0c      	ite	eq
 8003e86:	2301      	moveq	r3, #1
 8003e88:	2300      	movne	r3, #0
 8003e8a:	b2db      	uxtb	r3, r3
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr
 8003e98:	40010400 	.word	0x40010400

08003e9c <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8003ea4:	4a04      	ldr	r2, [pc, #16]	; (8003eb8 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6153      	str	r3, [r2, #20]
}
 8003eaa:	bf00      	nop
 8003eac:	370c      	adds	r7, #12
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	40010400 	.word	0x40010400

08003ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003ec0:	bf00      	nop
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr

08003eca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003eca:	b480      	push	{r7}
 8003ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ece:	e7fe      	b.n	8003ece <HardFault_Handler+0x4>

08003ed0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ed4:	e7fe      	b.n	8003ed4 <MemManage_Handler+0x4>

08003ed6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ed6:	b480      	push	{r7}
 8003ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003eda:	e7fe      	b.n	8003eda <BusFault_Handler+0x4>

08003edc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003edc:	b480      	push	{r7}
 8003ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ee0:	e7fe      	b.n	8003ee0 <UsageFault_Handler+0x4>

08003ee2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ee6:	bf00      	nop
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ef4:	bf00      	nop
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr

08003efe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003efe:	b480      	push	{r7}
 8003f00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f02:	bf00      	nop
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f10:	bf00      	nop
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
	...

08003f1c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af02      	add	r7, sp, #8
	if(checkButtonState(GPIO_PORT_BUTTON,
 8003f22:	2314      	movs	r3, #20
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	231e      	movs	r3, #30
 8003f28:	2201      	movs	r2, #1
 8003f2a:	2103      	movs	r1, #3
 8003f2c:	480f      	ldr	r0, [pc, #60]	; (8003f6c <EXTI3_IRQHandler+0x50>)
 8003f2e:	f000 f821 	bl	8003f74 <checkButtonState>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00d      	beq.n	8003f54 <EXTI3_IRQHandler+0x38>
													GPIO_PIN_BUTTON,
													BUTTON_EXTI_TRIGGER,
													BUTTON_EXTI_SAMPLES_WINDOW,
													BUTTON_EXTI_SAMPLES_REQUIRED))
	{
		if (switch_state >= 5) switch_state = 1;
 8003f38:	4b0d      	ldr	r3, [pc, #52]	; (8003f70 <EXTI3_IRQHandler+0x54>)
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	2b04      	cmp	r3, #4
 8003f3e:	d903      	bls.n	8003f48 <EXTI3_IRQHandler+0x2c>
 8003f40:	4b0b      	ldr	r3, [pc, #44]	; (8003f70 <EXTI3_IRQHandler+0x54>)
 8003f42:	2201      	movs	r2, #1
 8003f44:	701a      	strb	r2, [r3, #0]
 8003f46:	e005      	b.n	8003f54 <EXTI3_IRQHandler+0x38>
		else switch_state++;
 8003f48:	4b09      	ldr	r3, [pc, #36]	; (8003f70 <EXTI3_IRQHandler+0x54>)
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	b2da      	uxtb	r2, r3
 8003f50:	4b07      	ldr	r3, [pc, #28]	; (8003f70 <EXTI3_IRQHandler+0x54>)
 8003f52:	701a      	strb	r2, [r3, #0]
	}


	  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_3) != RESET)
 8003f54:	2008      	movs	r0, #8
 8003f56:	f7ff ff8b 	bl	8003e70 <LL_EXTI_IsActiveFlag_0_31>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d002      	beq.n	8003f66 <EXTI3_IRQHandler+0x4a>
	  {
	    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_3);
 8003f60:	2008      	movs	r0, #8
 8003f62:	f7ff ff9b 	bl	8003e9c <LL_EXTI_ClearFlag_0_31>

	  }
}
 8003f66:	bf00      	nop
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	48000400 	.word	0x48000400
 8003f70:	20000000 	.word	0x20000000

08003f74 <checkButtonState>:

uint8_t checkButtonState(GPIO_TypeDef* PORT, uint8_t PIN, uint8_t edge, uint8_t samples_window, uint8_t samples_required)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	4608      	mov	r0, r1
 8003f7e:	4611      	mov	r1, r2
 8003f80:	461a      	mov	r2, r3
 8003f82:	4603      	mov	r3, r0
 8003f84:	70fb      	strb	r3, [r7, #3]
 8003f86:	460b      	mov	r3, r1
 8003f88:	70bb      	strb	r3, [r7, #2]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	707b      	strb	r3, [r7, #1]
	uint8_t button_state = 0, it = 0;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	73fb      	strb	r3, [r7, #15]
 8003f92:	2300      	movs	r3, #0
 8003f94:	73bb      	strb	r3, [r7, #14]

	while(it < samples_window)
 8003f96:	e01b      	b.n	8003fd0 <checkButtonState+0x5c>
	{
		if((!(PORT->IDR & (1 << PIN)) == edge) /*LL_GPIO_IsInputPinSet(PORT, PIN)*/)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	78fa      	ldrb	r2, [r7, #3]
 8003f9e:	2101      	movs	r1, #1
 8003fa0:	fa01 f202 	lsl.w	r2, r1, r2
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	bf0c      	ite	eq
 8003faa:	2301      	moveq	r3, #1
 8003fac:	2300      	movne	r3, #0
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	78bb      	ldrb	r3, [r7, #2]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d103      	bne.n	8003fc0 <checkButtonState+0x4c>
		{
			button_state += 1;
 8003fb8:	7bfb      	ldrb	r3, [r7, #15]
 8003fba:	3301      	adds	r3, #1
 8003fbc:	73fb      	strb	r3, [r7, #15]
 8003fbe:	e001      	b.n	8003fc4 <checkButtonState+0x50>
		}
		else
		{
			button_state = 0;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	73fb      	strb	r3, [r7, #15]
		}

		it++;
 8003fc4:	7bbb      	ldrb	r3, [r7, #14]
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	73bb      	strb	r3, [r7, #14]
		LL_mDelay(1);
 8003fca:	2001      	movs	r0, #1
 8003fcc:	f7fd fef8 	bl	8001dc0 <LL_mDelay>
	while(it < samples_window)
 8003fd0:	7bba      	ldrb	r2, [r7, #14]
 8003fd2:	787b      	ldrb	r3, [r7, #1]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d3df      	bcc.n	8003f98 <checkButtonState+0x24>
	}

	if(button_state >= samples_required)
 8003fd8:	7bfa      	ldrb	r2, [r7, #15]
 8003fda:	7e3b      	ldrb	r3, [r7, #24]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d301      	bcc.n	8003fe4 <checkButtonState+0x70>
	{
		return 1;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e000      	b.n	8003fe6 <checkButtonState+0x72>
	}

	else
	{
		return 0;
 8003fe4:	2300      	movs	r3, #0
	}
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3710      	adds	r7, #16
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
	...

08003ff0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003ff8:	4b11      	ldr	r3, [pc, #68]	; (8004040 <_sbrk+0x50>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d102      	bne.n	8004006 <_sbrk+0x16>
		heap_end = &end;
 8004000:	4b0f      	ldr	r3, [pc, #60]	; (8004040 <_sbrk+0x50>)
 8004002:	4a10      	ldr	r2, [pc, #64]	; (8004044 <_sbrk+0x54>)
 8004004:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004006:	4b0e      	ldr	r3, [pc, #56]	; (8004040 <_sbrk+0x50>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800400c:	4b0c      	ldr	r3, [pc, #48]	; (8004040 <_sbrk+0x50>)
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4413      	add	r3, r2
 8004014:	466a      	mov	r2, sp
 8004016:	4293      	cmp	r3, r2
 8004018:	d907      	bls.n	800402a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800401a:	f000 fd13 	bl	8004a44 <__errno>
 800401e:	4602      	mov	r2, r0
 8004020:	230c      	movs	r3, #12
 8004022:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004024:	f04f 33ff 	mov.w	r3, #4294967295
 8004028:	e006      	b.n	8004038 <_sbrk+0x48>
	}

	heap_end += incr;
 800402a:	4b05      	ldr	r3, [pc, #20]	; (8004040 <_sbrk+0x50>)
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4413      	add	r3, r2
 8004032:	4a03      	ldr	r2, [pc, #12]	; (8004040 <_sbrk+0x50>)
 8004034:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004036:	68fb      	ldr	r3, [r7, #12]
}
 8004038:	4618      	mov	r0, r3
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	2000021c 	.word	0x2000021c
 8004044:	20000270 	.word	0x20000270

08004048 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004048:	b480      	push	{r7}
 800404a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800404c:	4b1f      	ldr	r3, [pc, #124]	; (80040cc <SystemInit+0x84>)
 800404e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004052:	4a1e      	ldr	r2, [pc, #120]	; (80040cc <SystemInit+0x84>)
 8004054:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004058:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800405c:	4b1c      	ldr	r3, [pc, #112]	; (80040d0 <SystemInit+0x88>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a1b      	ldr	r2, [pc, #108]	; (80040d0 <SystemInit+0x88>)
 8004062:	f043 0301 	orr.w	r3, r3, #1
 8004066:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8004068:	4b19      	ldr	r3, [pc, #100]	; (80040d0 <SystemInit+0x88>)
 800406a:	685a      	ldr	r2, [r3, #4]
 800406c:	4918      	ldr	r1, [pc, #96]	; (80040d0 <SystemInit+0x88>)
 800406e:	4b19      	ldr	r3, [pc, #100]	; (80040d4 <SystemInit+0x8c>)
 8004070:	4013      	ands	r3, r2
 8004072:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004074:	4b16      	ldr	r3, [pc, #88]	; (80040d0 <SystemInit+0x88>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a15      	ldr	r2, [pc, #84]	; (80040d0 <SystemInit+0x88>)
 800407a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800407e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004082:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004084:	4b12      	ldr	r3, [pc, #72]	; (80040d0 <SystemInit+0x88>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a11      	ldr	r2, [pc, #68]	; (80040d0 <SystemInit+0x88>)
 800408a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800408e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8004090:	4b0f      	ldr	r3, [pc, #60]	; (80040d0 <SystemInit+0x88>)
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	4a0e      	ldr	r2, [pc, #56]	; (80040d0 <SystemInit+0x88>)
 8004096:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800409a:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 800409c:	4b0c      	ldr	r3, [pc, #48]	; (80040d0 <SystemInit+0x88>)
 800409e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a0:	4a0b      	ldr	r2, [pc, #44]	; (80040d0 <SystemInit+0x88>)
 80040a2:	f023 030f 	bic.w	r3, r3, #15
 80040a6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80040a8:	4b09      	ldr	r3, [pc, #36]	; (80040d0 <SystemInit+0x88>)
 80040aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040ac:	4908      	ldr	r1, [pc, #32]	; (80040d0 <SystemInit+0x88>)
 80040ae:	4b0a      	ldr	r3, [pc, #40]	; (80040d8 <SystemInit+0x90>)
 80040b0:	4013      	ands	r3, r2
 80040b2:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80040b4:	4b06      	ldr	r3, [pc, #24]	; (80040d0 <SystemInit+0x88>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80040ba:	4b04      	ldr	r3, [pc, #16]	; (80040cc <SystemInit+0x84>)
 80040bc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80040c0:	609a      	str	r2, [r3, #8]
#endif
}
 80040c2:	bf00      	nop
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr
 80040cc:	e000ed00 	.word	0xe000ed00
 80040d0:	40021000 	.word	0x40021000
 80040d4:	f87fc00c 	.word	0xf87fc00c
 80040d8:	ff00fccc 	.word	0xff00fccc

080040dc <NVIC_GetPriorityGrouping>:
{
 80040dc:	b480      	push	{r7}
 80040de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040e0:	4b04      	ldr	r3, [pc, #16]	; (80040f4 <NVIC_GetPriorityGrouping+0x18>)
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	0a1b      	lsrs	r3, r3, #8
 80040e6:	f003 0307 	and.w	r3, r3, #7
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr
 80040f4:	e000ed00 	.word	0xe000ed00

080040f8 <NVIC_EnableIRQ>:
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	4603      	mov	r3, r0
 8004100:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8004102:	79fb      	ldrb	r3, [r7, #7]
 8004104:	f003 021f 	and.w	r2, r3, #31
 8004108:	4907      	ldr	r1, [pc, #28]	; (8004128 <NVIC_EnableIRQ+0x30>)
 800410a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800410e:	095b      	lsrs	r3, r3, #5
 8004110:	2001      	movs	r0, #1
 8004112:	fa00 f202 	lsl.w	r2, r0, r2
 8004116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800411a:	bf00      	nop
 800411c:	370c      	adds	r7, #12
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	e000e100 	.word	0xe000e100

0800412c <NVIC_SetPriority>:
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	4603      	mov	r3, r0
 8004134:	6039      	str	r1, [r7, #0]
 8004136:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8004138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800413c:	2b00      	cmp	r3, #0
 800413e:	da0b      	bge.n	8004158 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	b2da      	uxtb	r2, r3
 8004144:	490c      	ldr	r1, [pc, #48]	; (8004178 <NVIC_SetPriority+0x4c>)
 8004146:	79fb      	ldrb	r3, [r7, #7]
 8004148:	f003 030f 	and.w	r3, r3, #15
 800414c:	3b04      	subs	r3, #4
 800414e:	0112      	lsls	r2, r2, #4
 8004150:	b2d2      	uxtb	r2, r2
 8004152:	440b      	add	r3, r1
 8004154:	761a      	strb	r2, [r3, #24]
}
 8004156:	e009      	b.n	800416c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	b2da      	uxtb	r2, r3
 800415c:	4907      	ldr	r1, [pc, #28]	; (800417c <NVIC_SetPriority+0x50>)
 800415e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004162:	0112      	lsls	r2, r2, #4
 8004164:	b2d2      	uxtb	r2, r2
 8004166:	440b      	add	r3, r1
 8004168:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr
 8004178:	e000ed00 	.word	0xe000ed00
 800417c:	e000e100 	.word	0xe000e100

08004180 <NVIC_EncodePriority>:
{
 8004180:	b480      	push	{r7}
 8004182:	b089      	sub	sp, #36	; 0x24
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f003 0307 	and.w	r3, r3, #7
 8004192:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	f1c3 0307 	rsb	r3, r3, #7
 800419a:	2b04      	cmp	r3, #4
 800419c:	bf28      	it	cs
 800419e:	2304      	movcs	r3, #4
 80041a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	3304      	adds	r3, #4
 80041a6:	2b06      	cmp	r3, #6
 80041a8:	d902      	bls.n	80041b0 <NVIC_EncodePriority+0x30>
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	3b03      	subs	r3, #3
 80041ae:	e000      	b.n	80041b2 <NVIC_EncodePriority+0x32>
 80041b0:	2300      	movs	r3, #0
 80041b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041b4:	f04f 32ff 	mov.w	r2, #4294967295
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	fa02 f303 	lsl.w	r3, r2, r3
 80041be:	43da      	mvns	r2, r3
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	401a      	ands	r2, r3
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041c8:	f04f 31ff 	mov.w	r1, #4294967295
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	fa01 f303 	lsl.w	r3, r1, r3
 80041d2:	43d9      	mvns	r1, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041d8:	4313      	orrs	r3, r2
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3724      	adds	r7, #36	; 0x24
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
	...

080041e8 <LL_APB1_GRP1_EnableClock>:
{
 80041e8:	b480      	push	{r7}
 80041ea:	b085      	sub	sp, #20
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80041f0:	4b08      	ldr	r3, [pc, #32]	; (8004214 <LL_APB1_GRP1_EnableClock+0x2c>)
 80041f2:	69da      	ldr	r2, [r3, #28]
 80041f4:	4907      	ldr	r1, [pc, #28]	; (8004214 <LL_APB1_GRP1_EnableClock+0x2c>)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80041fc:	4b05      	ldr	r3, [pc, #20]	; (8004214 <LL_APB1_GRP1_EnableClock+0x2c>)
 80041fe:	69da      	ldr	r2, [r3, #28]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4013      	ands	r3, r2
 8004204:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004206:	68fb      	ldr	r3, [r7, #12]
}
 8004208:	bf00      	nop
 800420a:	3714      	adds	r7, #20
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr
 8004214:	40021000 	.word	0x40021000

08004218 <LL_TIM_EnableCounter>:
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f043 0201 	orr.w	r2, r3, #1
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	601a      	str	r2, [r3, #0]
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <LL_TIM_EnableARRPreload>:
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	601a      	str	r2, [r3, #0]
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <LL_TIM_OC_DisableFast>:
{
 8004258:	b4b0      	push	{r4, r5, r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d028      	beq.n	80042ba <LL_TIM_OC_DisableFast+0x62>
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	2b04      	cmp	r3, #4
 800426c:	d023      	beq.n	80042b6 <LL_TIM_OC_DisableFast+0x5e>
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	2b10      	cmp	r3, #16
 8004272:	d01e      	beq.n	80042b2 <LL_TIM_OC_DisableFast+0x5a>
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	2b40      	cmp	r3, #64	; 0x40
 8004278:	d019      	beq.n	80042ae <LL_TIM_OC_DisableFast+0x56>
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004280:	d013      	beq.n	80042aa <LL_TIM_OC_DisableFast+0x52>
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004288:	d00d      	beq.n	80042a6 <LL_TIM_OC_DisableFast+0x4e>
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004290:	d007      	beq.n	80042a2 <LL_TIM_OC_DisableFast+0x4a>
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004298:	d101      	bne.n	800429e <LL_TIM_OC_DisableFast+0x46>
 800429a:	2307      	movs	r3, #7
 800429c:	e00e      	b.n	80042bc <LL_TIM_OC_DisableFast+0x64>
 800429e:	2308      	movs	r3, #8
 80042a0:	e00c      	b.n	80042bc <LL_TIM_OC_DisableFast+0x64>
 80042a2:	2306      	movs	r3, #6
 80042a4:	e00a      	b.n	80042bc <LL_TIM_OC_DisableFast+0x64>
 80042a6:	2305      	movs	r3, #5
 80042a8:	e008      	b.n	80042bc <LL_TIM_OC_DisableFast+0x64>
 80042aa:	2304      	movs	r3, #4
 80042ac:	e006      	b.n	80042bc <LL_TIM_OC_DisableFast+0x64>
 80042ae:	2303      	movs	r3, #3
 80042b0:	e004      	b.n	80042bc <LL_TIM_OC_DisableFast+0x64>
 80042b2:	2302      	movs	r3, #2
 80042b4:	e002      	b.n	80042bc <LL_TIM_OC_DisableFast+0x64>
 80042b6:	2301      	movs	r3, #1
 80042b8:	e000      	b.n	80042bc <LL_TIM_OC_DisableFast+0x64>
 80042ba:	2300      	movs	r3, #0
 80042bc:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	3318      	adds	r3, #24
 80042c2:	461a      	mov	r2, r3
 80042c4:	4629      	mov	r1, r5
 80042c6:	4b09      	ldr	r3, [pc, #36]	; (80042ec <LL_TIM_OC_DisableFast+0x94>)
 80042c8:	5c5b      	ldrb	r3, [r3, r1]
 80042ca:	4413      	add	r3, r2
 80042cc:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80042ce:	6822      	ldr	r2, [r4, #0]
 80042d0:	4629      	mov	r1, r5
 80042d2:	4b07      	ldr	r3, [pc, #28]	; (80042f0 <LL_TIM_OC_DisableFast+0x98>)
 80042d4:	5c5b      	ldrb	r3, [r3, r1]
 80042d6:	4619      	mov	r1, r3
 80042d8:	2304      	movs	r3, #4
 80042da:	408b      	lsls	r3, r1
 80042dc:	43db      	mvns	r3, r3
 80042de:	4013      	ands	r3, r2
 80042e0:	6023      	str	r3, [r4, #0]
}
 80042e2:	bf00      	nop
 80042e4:	370c      	adds	r7, #12
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bcb0      	pop	{r4, r5, r7}
 80042ea:	4770      	bx	lr
 80042ec:	08009b88 	.word	0x08009b88
 80042f0:	08009b94 	.word	0x08009b94

080042f4 <LL_TIM_SetClockSource>:
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004306:	f023 0307 	bic.w	r3, r3, #7
 800430a:	683a      	ldr	r2, [r7, #0]
 800430c:	431a      	orrs	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	609a      	str	r2, [r3, #8]
}
 8004312:	bf00      	nop
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <LL_TIM_SetTriggerOutput>:
{
 800431e:	b480      	push	{r7}
 8004320:	b083      	sub	sp, #12
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
 8004326:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	431a      	orrs	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	605a      	str	r2, [r3, #4]
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <LL_TIM_DisableMasterSlaveMode>:
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	609a      	str	r2, [r3, #8]
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <LL_TIM_EnableIT_UPDATE>:
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	f043 0201 	orr.w	r2, r3, #1
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	60da      	str	r2, [r3, #12]
}
 8004378:	bf00      	nop
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b08e      	sub	sp, #56	; 0x38
 8004388:	af00      	add	r7, sp, #0
	LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800438a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800438e:	2200      	movs	r2, #0
 8004390:	601a      	str	r2, [r3, #0]
 8004392:	605a      	str	r2, [r3, #4]
 8004394:	609a      	str	r2, [r3, #8]
 8004396:	60da      	str	r2, [r3, #12]
 8004398:	611a      	str	r2, [r3, #16]
	LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800439a:	1d3b      	adds	r3, r7, #4
 800439c:	2220      	movs	r2, #32
 800439e:	2100      	movs	r1, #0
 80043a0:	4618      	mov	r0, r3
 80043a2:	f000 fb79 	bl	8004a98 <memset>

	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80043a6:	2002      	movs	r0, #2
 80043a8:	f7ff ff1e 	bl	80041e8 <LL_APB1_GRP1_EnableClock>

	/* TIM3 interrupt Init */
	NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80043ac:	f7ff fe96 	bl	80040dc <NVIC_GetPriorityGrouping>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2200      	movs	r2, #0
 80043b4:	2100      	movs	r1, #0
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7ff fee2 	bl	8004180 <NVIC_EncodePriority>
 80043bc:	4603      	mov	r3, r0
 80043be:	4619      	mov	r1, r3
 80043c0:	201d      	movs	r0, #29
 80043c2:	f7ff feb3 	bl	800412c <NVIC_SetPriority>
	NVIC_EnableIRQ(TIM3_IRQn);
 80043c6:	201d      	movs	r0, #29
 80043c8:	f7ff fe96 	bl	80040f8 <NVIC_EnableIRQ>

	//TIM3 clock = 8MHz
	TIM_InitStruct.Prescaler = 7999; 								//1kHz
 80043cc:	f641 733f 	movw	r3, #7999	; 0x1f3f
 80043d0:	84bb      	strh	r3, [r7, #36]	; 0x24
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80043d2:	2300      	movs	r3, #0
 80043d4:	62bb      	str	r3, [r7, #40]	; 0x28
	TIM_InitStruct.Autoreload = 19;								//20ms
 80043d6:	2313      	movs	r3, #19
 80043d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80043da:	2300      	movs	r3, #0
 80043dc:	633b      	str	r3, [r7, #48]	; 0x30
	LL_TIM_Init(TIM3, &TIM_InitStruct);
 80043de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043e2:	4619      	mov	r1, r3
 80043e4:	4817      	ldr	r0, [pc, #92]	; (8004444 <MX_TIM3_Init+0xc0>)
 80043e6:	f7fd f949 	bl	800167c <LL_TIM_Init>

	//LL_TIM_DisableARRPreload(TIM3);
	LL_TIM_EnableARRPreload(TIM3);
 80043ea:	4816      	ldr	r0, [pc, #88]	; (8004444 <MX_TIM3_Init+0xc0>)
 80043ec:	f7ff ff24 	bl	8004238 <LL_TIM_EnableARRPreload>
	LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 80043f0:	2100      	movs	r1, #0
 80043f2:	4814      	ldr	r0, [pc, #80]	; (8004444 <MX_TIM3_Init+0xc0>)
 80043f4:	f7ff ff7e 	bl	80042f4 <LL_TIM_SetClockSource>
	TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_ACTIVE;
 80043f8:	2310      	movs	r3, #16
 80043fa:	607b      	str	r3, [r7, #4]
	TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80043fc:	2300      	movs	r3, #0
 80043fe:	60bb      	str	r3, [r7, #8]
	TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8004400:	2300      	movs	r3, #0
 8004402:	60fb      	str	r3, [r7, #12]
	TIM_OC_InitStruct.CompareValue = 0;
 8004404:	2300      	movs	r3, #0
 8004406:	613b      	str	r3, [r7, #16]
	TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8004408:	2300      	movs	r3, #0
 800440a:	617b      	str	r3, [r7, #20]
	LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800440c:	1d3b      	adds	r3, r7, #4
 800440e:	461a      	mov	r2, r3
 8004410:	2101      	movs	r1, #1
 8004412:	480c      	ldr	r0, [pc, #48]	; (8004444 <MX_TIM3_Init+0xc0>)
 8004414:	f7fd f9a6 	bl	8001764 <LL_TIM_OC_Init>
//	LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH1);
	LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8004418:	2101      	movs	r1, #1
 800441a:	480a      	ldr	r0, [pc, #40]	; (8004444 <MX_TIM3_Init+0xc0>)
 800441c:	f7ff ff1c 	bl	8004258 <LL_TIM_OC_DisableFast>

	LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8004420:	2100      	movs	r1, #0
 8004422:	4808      	ldr	r0, [pc, #32]	; (8004444 <MX_TIM3_Init+0xc0>)
 8004424:	f7ff ff7b 	bl	800431e <LL_TIM_SetTriggerOutput>
	LL_TIM_DisableMasterSlaveMode(TIM3);
 8004428:	4806      	ldr	r0, [pc, #24]	; (8004444 <MX_TIM3_Init+0xc0>)
 800442a:	f7ff ff8b 	bl	8004344 <LL_TIM_DisableMasterSlaveMode>

	LL_TIM_EnableIT_UPDATE(TIM3);
 800442e:	4805      	ldr	r0, [pc, #20]	; (8004444 <MX_TIM3_Init+0xc0>)
 8004430:	f7ff ff98 	bl	8004364 <LL_TIM_EnableIT_UPDATE>
	LL_TIM_EnableCounter(TIM3);
 8004434:	4803      	ldr	r0, [pc, #12]	; (8004444 <MX_TIM3_Init+0xc0>)
 8004436:	f7ff feef 	bl	8004218 <LL_TIM_EnableCounter>
}
 800443a:	bf00      	nop
 800443c:	3738      	adds	r7, #56	; 0x38
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	40000400 	.word	0x40000400

08004448 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004448:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004480 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800444c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800444e:	e003      	b.n	8004458 <LoopCopyDataInit>

08004450 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004450:	4b0c      	ldr	r3, [pc, #48]	; (8004484 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004452:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004454:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004456:	3104      	adds	r1, #4

08004458 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004458:	480b      	ldr	r0, [pc, #44]	; (8004488 <LoopForever+0xa>)
	ldr	r3, =_edata
 800445a:	4b0c      	ldr	r3, [pc, #48]	; (800448c <LoopForever+0xe>)
	adds	r2, r0, r1
 800445c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800445e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004460:	d3f6      	bcc.n	8004450 <CopyDataInit>
	ldr	r2, =_sbss
 8004462:	4a0b      	ldr	r2, [pc, #44]	; (8004490 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004464:	e002      	b.n	800446c <LoopFillZerobss>

08004466 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004466:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004468:	f842 3b04 	str.w	r3, [r2], #4

0800446c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800446c:	4b09      	ldr	r3, [pc, #36]	; (8004494 <LoopForever+0x16>)
	cmp	r2, r3
 800446e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004470:	d3f9      	bcc.n	8004466 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004472:	f7ff fde9 	bl	8004048 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004476:	f000 faeb 	bl	8004a50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800447a:	f7ff facd 	bl	8003a18 <main>

0800447e <LoopForever>:

LoopForever:
    b LoopForever
 800447e:	e7fe      	b.n	800447e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004480:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8004484:	08009ee0 	.word	0x08009ee0
	ldr	r0, =_sdata
 8004488:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800448c:	200001e0 	.word	0x200001e0
	ldr	r2, =_sbss
 8004490:	200001e0 	.word	0x200001e0
	ldr	r3, = _ebss
 8004494:	20000270 	.word	0x20000270

08004498 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004498:	e7fe      	b.n	8004498 <ADC1_2_IRQHandler>
	...

0800449c <lsm6ds0_read_byte>:
#include "lsm6ds0.h"

uint8_t addres = LSM6DS0_DEVICE_ADDRESS_0;

uint8_t lsm6ds0_read_byte(uint8_t reg_addr)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b086      	sub	sp, #24
 80044a0:	af02      	add	r7, sp, #8
 80044a2:	4603      	mov	r3, r0
 80044a4:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 80044a6:	2300      	movs	r3, #0
 80044a8:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, addres, 0));
 80044aa:	4b08      	ldr	r3, [pc, #32]	; (80044cc <lsm6ds0_read_byte+0x30>)
 80044ac:	7819      	ldrb	r1, [r3, #0]
 80044ae:	79fa      	ldrb	r2, [r7, #7]
 80044b0:	f107 000f 	add.w	r0, r7, #15
 80044b4:	2300      	movs	r3, #0
 80044b6:	9300      	str	r3, [sp, #0]
 80044b8:	460b      	mov	r3, r1
 80044ba:	2101      	movs	r1, #1
 80044bc:	f7ff f8c0 	bl	8003640 <i2c_master_read>
 80044c0:	4603      	mov	r3, r0
 80044c2:	781b      	ldrb	r3, [r3, #0]
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3710      	adds	r7, #16
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	20000008 	.word	0x20000008

080044d0 <lsm6ds0_write_byte>:


void lsm6ds0_write_byte(uint8_t reg_addr, uint8_t value)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	4603      	mov	r3, r0
 80044d8:	460a      	mov	r2, r1
 80044da:	71fb      	strb	r3, [r7, #7]
 80044dc:	4613      	mov	r3, r2
 80044de:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, addres, 0);
 80044e0:	4b05      	ldr	r3, [pc, #20]	; (80044f8 <lsm6ds0_write_byte+0x28>)
 80044e2:	781a      	ldrb	r2, [r3, #0]
 80044e4:	79f9      	ldrb	r1, [r7, #7]
 80044e6:	79b8      	ldrb	r0, [r7, #6]
 80044e8:	2300      	movs	r3, #0
 80044ea:	f7ff f865 	bl	80035b8 <i2c_master_write>
}
 80044ee:	bf00      	nop
 80044f0:	3708      	adds	r7, #8
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	20000008 	.word	0x20000008

080044fc <lsm6ds0_init>:
	*z = (zz >> 4) / 1000.0f;
}


uint8_t lsm6ds0_init(void)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 8004502:	2301      	movs	r3, #1
 8004504:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 8004506:	2064      	movs	r0, #100	; 0x64
 8004508:	f7fd fc5a 	bl	8001dc0 <LL_mDelay>

	uint8_t val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);
 800450c:	200f      	movs	r0, #15
 800450e:	f7ff ffc5 	bl	800449c <lsm6ds0_read_byte>
 8004512:	4603      	mov	r3, r0
 8004514:	71bb      	strb	r3, [r7, #6]

	if(val == LSM6DS0_WHO_AM_I_VALUE)
 8004516:	79bb      	ldrb	r3, [r7, #6]
 8004518:	2b68      	cmp	r3, #104	; 0x68
 800451a:	d102      	bne.n	8004522 <lsm6ds0_init+0x26>
	{
		status = 1;
 800451c:	2301      	movs	r3, #1
 800451e:	71fb      	strb	r3, [r7, #7]
 8004520:	e00f      	b.n	8004542 <lsm6ds0_init+0x46>
	}
	else			//if the device is not found on one address, try another one
	{
		addres = LSM6DS0_DEVICE_ADDRESS_1;
 8004522:	4b0e      	ldr	r3, [pc, #56]	; (800455c <lsm6ds0_init+0x60>)
 8004524:	22d6      	movs	r2, #214	; 0xd6
 8004526:	701a      	strb	r2, [r3, #0]
		val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);
 8004528:	200f      	movs	r0, #15
 800452a:	f7ff ffb7 	bl	800449c <lsm6ds0_read_byte>
 800452e:	4603      	mov	r3, r0
 8004530:	71bb      	strb	r3, [r7, #6]
		if(val == LSM6DS0_WHO_AM_I_VALUE)
 8004532:	79bb      	ldrb	r3, [r7, #6]
 8004534:	2b68      	cmp	r3, #104	; 0x68
 8004536:	d102      	bne.n	800453e <lsm6ds0_init+0x42>
		{
			status = 1;
 8004538:	2301      	movs	r3, #1
 800453a:	71fb      	strb	r3, [r7, #7]
 800453c:	e001      	b.n	8004542 <lsm6ds0_init+0x46>
		}
		else
		{
			status = 0;
 800453e:	2300      	movs	r3, #0
 8004540:	71fb      	strb	r3, [r7, #7]
		}
	}

	//acc device init

	uint8_t ctrl1 = 8 << 4; // +-2g res
 8004542:	2380      	movs	r3, #128	; 0x80
 8004544:	717b      	strb	r3, [r7, #5]
	lsm6ds0_write_byte(LSM6DS0_ADDRESS_CTRL1, ctrl1);
 8004546:	797b      	ldrb	r3, [r7, #5]
 8004548:	4619      	mov	r1, r3
 800454a:	2010      	movs	r0, #16
 800454c:	f7ff ffc0 	bl	80044d0 <lsm6ds0_write_byte>

	return status;
 8004550:	79fb      	ldrb	r3, [r7, #7]
}
 8004552:	4618      	mov	r0, r3
 8004554:	3708      	adds	r7, #8
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	20000008 	.word	0x20000008

08004560 <lps25hb_read_byte>:
#include "lps25hb.h"

uint8_t address_lps = LPS25HB_DEVICE_ADDRESS_0;

uint8_t lps25hb_read_byte(uint8_t reg_addr)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af02      	add	r7, sp, #8
 8004566:	4603      	mov	r3, r0
 8004568:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 800456a:	2300      	movs	r3, #0
 800456c:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, address_lps, 0));
 800456e:	4b08      	ldr	r3, [pc, #32]	; (8004590 <lps25hb_read_byte+0x30>)
 8004570:	7819      	ldrb	r1, [r3, #0]
 8004572:	79fa      	ldrb	r2, [r7, #7]
 8004574:	f107 000f 	add.w	r0, r7, #15
 8004578:	2300      	movs	r3, #0
 800457a:	9300      	str	r3, [sp, #0]
 800457c:	460b      	mov	r3, r1
 800457e:	2101      	movs	r1, #1
 8004580:	f7ff f85e 	bl	8003640 <i2c_master_read>
 8004584:	4603      	mov	r3, r0
 8004586:	781b      	ldrb	r3, [r3, #0]
}
 8004588:	4618      	mov	r0, r3
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	20000009 	.word	0x20000009

08004594 <lps25hb_write_byte>:


void lps25hb_write_byte(uint8_t reg_addr, uint8_t value)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	4603      	mov	r3, r0
 800459c:	460a      	mov	r2, r1
 800459e:	71fb      	strb	r3, [r7, #7]
 80045a0:	4613      	mov	r3, r2
 80045a2:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, address_lps, 0);
 80045a4:	4b05      	ldr	r3, [pc, #20]	; (80045bc <lps25hb_write_byte+0x28>)
 80045a6:	781a      	ldrb	r2, [r3, #0]
 80045a8:	79f9      	ldrb	r1, [r7, #7]
 80045aa:	79b8      	ldrb	r0, [r7, #6]
 80045ac:	2300      	movs	r3, #0
 80045ae:	f7ff f803 	bl	80035b8 <i2c_master_write>
}
 80045b2:	bf00      	nop
 80045b4:	3708      	adds	r7, #8
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	20000009 	.word	0x20000009

080045c0 <lps25hb_readArray>:

void lps25hb_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af02      	add	r7, sp, #8
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	460b      	mov	r3, r1
 80045ca:	70fb      	strb	r3, [r7, #3]
 80045cc:	4613      	mov	r3, r2
 80045ce:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, address_lps, 1);
 80045d0:	4b06      	ldr	r3, [pc, #24]	; (80045ec <lps25hb_readArray+0x2c>)
 80045d2:	7818      	ldrb	r0, [r3, #0]
 80045d4:	78fa      	ldrb	r2, [r7, #3]
 80045d6:	78b9      	ldrb	r1, [r7, #2]
 80045d8:	2301      	movs	r3, #1
 80045da:	9300      	str	r3, [sp, #0]
 80045dc:	4603      	mov	r3, r0
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f7ff f82e 	bl	8003640 <i2c_master_read>
}
 80045e4:	bf00      	nop
 80045e6:	3708      	adds	r7, #8
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	20000009 	.word	0x20000009

080045f0 <lps25hb_get_temp>:

int8_t lps25hb_get_temp()
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
	uint8_t temp[2];
	lps25hb_readArray(temp, LPS25HB_ADDRESS_TEMP, 2);
 80045f6:	1d3b      	adds	r3, r7, #4
 80045f8:	2202      	movs	r2, #2
 80045fa:	212b      	movs	r1, #43	; 0x2b
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7ff ffdf 	bl	80045c0 <lps25hb_readArray>

	return (((int16_t)((temp[1] << 8) | temp[0])) >> 3)  + 25;
 8004602:	797b      	ldrb	r3, [r7, #5]
 8004604:	021b      	lsls	r3, r3, #8
 8004606:	b21a      	sxth	r2, r3
 8004608:	793b      	ldrb	r3, [r7, #4]
 800460a:	b21b      	sxth	r3, r3
 800460c:	4313      	orrs	r3, r2
 800460e:	b21b      	sxth	r3, r3
 8004610:	10db      	asrs	r3, r3, #3
 8004612:	b21b      	sxth	r3, r3
 8004614:	b2db      	uxtb	r3, r3
 8004616:	3319      	adds	r3, #25
 8004618:	b2db      	uxtb	r3, r3
 800461a:	b25b      	sxtb	r3, r3
}
 800461c:	4618      	mov	r0, r3
 800461e:	3708      	adds	r7, #8
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <lps25hb_get_press>:


void lps25hb_get_press(float* press)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b086      	sub	sp, #24
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
	uint8_t data[6];
	int16_t pressure;
	uint8_t temp;

	//get current scale and use it for final calculation
    temp = lps25hb_read_byte(LPS25HB_ADDRESS_CTRL1);
 800462c:	2020      	movs	r0, #32
 800462e:	f7ff ff97 	bl	8004560 <lps25hb_read_byte>
 8004632:	4603      	mov	r3, r0
 8004634:	75fb      	strb	r3, [r7, #23]

	temp = temp >> 2;
 8004636:	7dfb      	ldrb	r3, [r7, #23]
 8004638:	089b      	lsrs	r3, r3, #2
 800463a:	75fb      	strb	r3, [r7, #23]
    temp &= 0x03;			//full scale bits exctracted
 800463c:	7dfb      	ldrb	r3, [r7, #23]
 800463e:	f003 0303 	and.w	r3, r3, #3
 8004642:	75fb      	strb	r3, [r7, #23]

    lps25hb_readArray(data, LPS25HB_ADDRESS_PRESS, 6);
 8004644:	f107 030c 	add.w	r3, r7, #12
 8004648:	2206      	movs	r2, #6
 800464a:	2128      	movs	r1, #40	; 0x28
 800464c:	4618      	mov	r0, r3
 800464e:	f7ff ffb7 	bl	80045c0 <lps25hb_readArray>

    pressure = ((uint16_t)data[1]) << 8 | data[0];
 8004652:	7b7b      	ldrb	r3, [r7, #13]
 8004654:	021b      	lsls	r3, r3, #8
 8004656:	b21a      	sxth	r2, r3
 8004658:	7b3b      	ldrb	r3, [r7, #12]
 800465a:	b21b      	sxth	r3, r3
 800465c:	4313      	orrs	r3, r2
 800465e:	82bb      	strh	r3, [r7, #20]

	*press = (pressure >> 4) / 1000.0f;
 8004660:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004664:	111b      	asrs	r3, r3, #4
 8004666:	b21b      	sxth	r3, r3
 8004668:	ee07 3a90 	vmov	s15, r3
 800466c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004670:	eddf 6a05 	vldr	s13, [pc, #20]	; 8004688 <lps25hb_get_press+0x64>
 8004674:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	edc3 7a00 	vstr	s15, [r3]
}
 800467e:	bf00      	nop
 8004680:	3718      	adds	r7, #24
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	447a0000 	.word	0x447a0000

0800468c <lps25hb_init>:


uint8_t lps25hb_init(void)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 8004692:	2301      	movs	r3, #1
 8004694:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 8004696:	2064      	movs	r0, #100	; 0x64
 8004698:	f7fd fb92 	bl	8001dc0 <LL_mDelay>

	uint8_t val = lps25hb_read_byte(LPS25HB_WHO_AM_I_ADDRES);
 800469c:	200f      	movs	r0, #15
 800469e:	f7ff ff5f 	bl	8004560 <lps25hb_read_byte>
 80046a2:	4603      	mov	r3, r0
 80046a4:	71bb      	strb	r3, [r7, #6]

	if(val == LPS25HB_WHO_AM_I_VALUE)
 80046a6:	79bb      	ldrb	r3, [r7, #6]
 80046a8:	2bbd      	cmp	r3, #189	; 0xbd
 80046aa:	d102      	bne.n	80046b2 <lps25hb_init+0x26>
	{
		status = 1;
 80046ac:	2301      	movs	r3, #1
 80046ae:	71fb      	strb	r3, [r7, #7]
 80046b0:	e00f      	b.n	80046d2 <lps25hb_init+0x46>
	}
	else			//if the device is not found on one address, try another one
	{
		address_lps = LPS25HB_DEVICE_ADDRESS_1;
 80046b2:	4b0e      	ldr	r3, [pc, #56]	; (80046ec <lps25hb_init+0x60>)
 80046b4:	22ba      	movs	r2, #186	; 0xba
 80046b6:	701a      	strb	r2, [r3, #0]
		val = lps25hb_read_byte(LPS25HB_WHO_AM_I_ADDRES);
 80046b8:	200f      	movs	r0, #15
 80046ba:	f7ff ff51 	bl	8004560 <lps25hb_read_byte>
 80046be:	4603      	mov	r3, r0
 80046c0:	71bb      	strb	r3, [r7, #6]
		if(val == LPS25HB_WHO_AM_I_VALUE)
 80046c2:	79bb      	ldrb	r3, [r7, #6]
 80046c4:	2bbd      	cmp	r3, #189	; 0xbd
 80046c6:	d102      	bne.n	80046ce <lps25hb_init+0x42>
		{
			status = 1;
 80046c8:	2301      	movs	r3, #1
 80046ca:	71fb      	strb	r3, [r7, #7]
 80046cc:	e001      	b.n	80046d2 <lps25hb_init+0x46>
		}
		else
		{
			status = 0;
 80046ce:	2300      	movs	r3, #0
 80046d0:	71fb      	strb	r3, [r7, #7]
		}
	}

	//acc device init

	uint8_t ctrl1 = 8 << 4; // +-2g res
 80046d2:	2380      	movs	r3, #128	; 0x80
 80046d4:	717b      	strb	r3, [r7, #5]
	lps25hb_write_byte(LPS25HB_ADDRESS_CTRL1, ctrl1);
 80046d6:	797b      	ldrb	r3, [r7, #5]
 80046d8:	4619      	mov	r1, r3
 80046da:	2020      	movs	r0, #32
 80046dc:	f7ff ff5a 	bl	8004594 <lps25hb_write_byte>

	return status;
 80046e0:	79fb      	ldrb	r3, [r7, #7]
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3708      	adds	r7, #8
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	20000009 	.word	0x20000009

080046f0 <lis3mdl_read_byte>:
static uint8_t sLIS3MDLI2Caddress = LIS3MDL_DEVICE_ADDRESS;

uint64_t lastMovementTick = 0;

uint8_t lis3mdl_read_byte(uint8_t reg_addr)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af02      	add	r7, sp, #8
 80046f6:	4603      	mov	r3, r0
 80046f8:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 80046fa:	2300      	movs	r3, #0
 80046fc:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, sLIS3MDLI2Caddress, 0));
 80046fe:	4b08      	ldr	r3, [pc, #32]	; (8004720 <lis3mdl_read_byte+0x30>)
 8004700:	7819      	ldrb	r1, [r3, #0]
 8004702:	79fa      	ldrb	r2, [r7, #7]
 8004704:	f107 000f 	add.w	r0, r7, #15
 8004708:	2300      	movs	r3, #0
 800470a:	9300      	str	r3, [sp, #0]
 800470c:	460b      	mov	r3, r1
 800470e:	2101      	movs	r1, #1
 8004710:	f7fe ff96 	bl	8003640 <i2c_master_read>
 8004714:	4603      	mov	r3, r0
 8004716:	781b      	ldrb	r3, [r3, #0]
}
 8004718:	4618      	mov	r0, r3
 800471a:	3710      	adds	r7, #16
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	2000000a 	.word	0x2000000a

08004724 <lis3mdl_write_byte>:

void lis3mdl_write_byte(uint8_t reg_addr, uint8_t value)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	4603      	mov	r3, r0
 800472c:	460a      	mov	r2, r1
 800472e:	71fb      	strb	r3, [r7, #7]
 8004730:	4613      	mov	r3, r2
 8004732:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, sLIS3MDLI2Caddress, 0);
 8004734:	4b05      	ldr	r3, [pc, #20]	; (800474c <lis3mdl_write_byte+0x28>)
 8004736:	781a      	ldrb	r2, [r3, #0]
 8004738:	79f9      	ldrb	r1, [r7, #7]
 800473a:	79b8      	ldrb	r0, [r7, #6]
 800473c:	2300      	movs	r3, #0
 800473e:	f7fe ff3b 	bl	80035b8 <i2c_master_write>
}
 8004742:	bf00      	nop
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	2000000a 	.word	0x2000000a

08004750 <lis3mdl_readArray>:

void lis3mdl_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af02      	add	r7, sp, #8
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	460b      	mov	r3, r1
 800475a:	70fb      	strb	r3, [r7, #3]
 800475c:	4613      	mov	r3, r2
 800475e:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, sLIS3MDLI2Caddress, 1);
 8004760:	4b06      	ldr	r3, [pc, #24]	; (800477c <lis3mdl_readArray+0x2c>)
 8004762:	7818      	ldrb	r0, [r3, #0]
 8004764:	78fa      	ldrb	r2, [r7, #3]
 8004766:	78b9      	ldrb	r1, [r7, #2]
 8004768:	2301      	movs	r3, #1
 800476a:	9300      	str	r3, [sp, #0]
 800476c:	4603      	mov	r3, r0
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f7fe ff66 	bl	8003640 <i2c_master_read>
}
 8004774:	bf00      	nop
 8004776:	3708      	adds	r7, #8
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	2000000a 	.word	0x2000000a

08004780 <lis3mdl_get_mag>:

	return (((int16_t)((temp[1] << 8) | temp[0])) >> 3)  + 25;
}

void lis3mdl_get_mag(float* x, float* y, float* z)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b08a      	sub	sp, #40	; 0x28
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]
	int16_t xx, yy, zz;

	uint8_t temp;

	//get current scale and use it for final calculation
    temp = lis3mdl_read_byte(LIS3MDL_ADDRESS_CTRL3);
 800478c:	2022      	movs	r0, #34	; 0x22
 800478e:	f7ff ffaf 	bl	80046f0 <lis3mdl_read_byte>
 8004792:	4603      	mov	r3, r0
 8004794:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	temp = temp >> 5;
 8004798:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800479c:	095b      	lsrs	r3, r3, #5
 800479e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    temp &= 0x03;			//full scale bits exctracted
 80047a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047a6:	f003 0303 	and.w	r3, r3, #3
 80047aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	lis3mdl_readArray(data, LIS3MDL_ADDRESS_XL, 6);
 80047ae:	f107 0314 	add.w	r3, r7, #20
 80047b2:	2206      	movs	r2, #6
 80047b4:	2128      	movs	r1, #40	; 0x28
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7ff ffca 	bl	8004750 <lis3mdl_readArray>

	xx = ((uint16_t)data[1]) << 8 | data[0];
 80047bc:	7d7b      	ldrb	r3, [r7, #21]
 80047be:	021b      	lsls	r3, r3, #8
 80047c0:	b21a      	sxth	r2, r3
 80047c2:	7d3b      	ldrb	r3, [r7, #20]
 80047c4:	b21b      	sxth	r3, r3
 80047c6:	4313      	orrs	r3, r2
 80047c8:	84bb      	strh	r3, [r7, #36]	; 0x24
	yy = ((uint16_t)data[3]) << 8 | data[2];
 80047ca:	7dfb      	ldrb	r3, [r7, #23]
 80047cc:	021b      	lsls	r3, r3, #8
 80047ce:	b21a      	sxth	r2, r3
 80047d0:	7dbb      	ldrb	r3, [r7, #22]
 80047d2:	b21b      	sxth	r3, r3
 80047d4:	4313      	orrs	r3, r2
 80047d6:	847b      	strh	r3, [r7, #34]	; 0x22
	zz = ((uint16_t)data[5]) << 8 | data[4];
 80047d8:	7e7b      	ldrb	r3, [r7, #25]
 80047da:	021b      	lsls	r3, r3, #8
 80047dc:	b21a      	sxth	r2, r3
 80047de:	7e3b      	ldrb	r3, [r7, #24]
 80047e0:	b21b      	sxth	r3, r3
 80047e2:	4313      	orrs	r3, r2
 80047e4:	843b      	strh	r3, [r7, #32]

    const float range_scale = 6842.0f; //range +-4gaus
 80047e6:	4b16      	ldr	r3, [pc, #88]	; (8004840 <lis3mdl_get_mag+0xc0>)
 80047e8:	61fb      	str	r3, [r7, #28]

	*x = (float)(xx/range_scale);
 80047ea:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80047ee:	ee07 3a90 	vmov	s15, r3
 80047f2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80047f6:	ed97 7a07 	vldr	s14, [r7, #28]
 80047fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	edc3 7a00 	vstr	s15, [r3]
	*y = (float)(yy/range_scale);
 8004804:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8004808:	ee07 3a90 	vmov	s15, r3
 800480c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004810:	ed97 7a07 	vldr	s14, [r7, #28]
 8004814:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	edc3 7a00 	vstr	s15, [r3]
	*z = (float)(zz/range_scale);
 800481e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8004822:	ee07 3a90 	vmov	s15, r3
 8004826:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800482a:	ed97 7a07 	vldr	s14, [r7, #28]
 800482e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	edc3 7a00 	vstr	s15, [r3]
}
 8004838:	bf00      	nop
 800483a:	3728      	adds	r7, #40	; 0x28
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	45d5d000 	.word	0x45d5d000

08004844 <lis3mdl_init>:


uint8_t lis3mdl_init(void)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 800484a:	2301      	movs	r3, #1
 800484c:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 800484e:	2064      	movs	r0, #100	; 0x64
 8004850:	f7fd fab6 	bl	8001dc0 <LL_mDelay>

	uint8_t val = lis3mdl_read_byte(LIS3MDL_WHO_AM_I_ADDRES);
 8004854:	200f      	movs	r0, #15
 8004856:	f7ff ff4b 	bl	80046f0 <lis3mdl_read_byte>
 800485a:	4603      	mov	r3, r0
 800485c:	71bb      	strb	r3, [r7, #6]

	if(val == LIS3MDL_WHO_AM_I_VALUE)
 800485e:	79bb      	ldrb	r3, [r7, #6]
 8004860:	2b3d      	cmp	r3, #61	; 0x3d
 8004862:	d102      	bne.n	800486a <lis3mdl_init+0x26>
	{
		status = 1;
 8004864:	2301      	movs	r3, #1
 8004866:	71fb      	strb	r3, [r7, #7]
 8004868:	e011      	b.n	800488e <lis3mdl_init+0x4a>
	}
	else			//if the device is not found on one address, try another one
	{
		sLIS3MDLI2Caddress = LIS3MDL_DEVICE_ADDRESS_ALTERNATIVE;
 800486a:	4b19      	ldr	r3, [pc, #100]	; (80048d0 <lis3mdl_init+0x8c>)
 800486c:	223c      	movs	r2, #60	; 0x3c
 800486e:	701a      	strb	r2, [r3, #0]
		val = lis3mdl_read_byte(LIS3MDL_WHO_AM_I_ADDRES);
 8004870:	200f      	movs	r0, #15
 8004872:	f7ff ff3d 	bl	80046f0 <lis3mdl_read_byte>
 8004876:	4603      	mov	r3, r0
 8004878:	71bb      	strb	r3, [r7, #6]
		if(val == LIS3MDL_WHO_AM_I_VALUE)
 800487a:	79bb      	ldrb	r3, [r7, #6]
 800487c:	2b3d      	cmp	r3, #61	; 0x3d
 800487e:	d102      	bne.n	8004886 <lis3mdl_init+0x42>
		{
			status = 1;
 8004880:	2301      	movs	r3, #1
 8004882:	71fb      	strb	r3, [r7, #7]
 8004884:	e003      	b.n	800488e <lis3mdl_init+0x4a>
		}
		else
		{
			status = 0;
 8004886:	2300      	movs	r3, #0
 8004888:	71fb      	strb	r3, [r7, #7]
			return status;
 800488a:	79fb      	ldrb	r3, [r7, #7]
 800488c:	e01c      	b.n	80048c8 <lis3mdl_init+0x84>
		}
	}

	//acc device init

	uint8_t ctrl1 = LIS3MDL_CTRL1_OM_UHP | LIS3MDL_CTRL1_DO_80HZ | (1 << 7);
 800488e:	23fc      	movs	r3, #252	; 0xfc
 8004890:	717b      	strb	r3, [r7, #5]
	lis3mdl_write_byte(LIS3MDL_ADDRESS_CTRL1, ctrl1);
 8004892:	797b      	ldrb	r3, [r7, #5]
 8004894:	4619      	mov	r1, r3
 8004896:	2020      	movs	r0, #32
 8004898:	f7ff ff44 	bl	8004724 <lis3mdl_write_byte>

	uint8_t ctrl2 = LIS3MDL_CTRL2_FS_4GAUS;
 800489c:	2300      	movs	r3, #0
 800489e:	713b      	strb	r3, [r7, #4]
	lis3mdl_write_byte(LIS3MDL_ADDRESS_CTRL2, ctrl2);
 80048a0:	793b      	ldrb	r3, [r7, #4]
 80048a2:	4619      	mov	r1, r3
 80048a4:	2021      	movs	r0, #33	; 0x21
 80048a6:	f7ff ff3d 	bl	8004724 <lis3mdl_write_byte>

	uint8_t ctrl3 = LIS3MDL_CTRL3_MD_CONTINUES;
 80048aa:	2300      	movs	r3, #0
 80048ac:	70fb      	strb	r3, [r7, #3]
	lis3mdl_write_byte(LIS3MDL_ADDRESS_CTRL3, ctrl3);
 80048ae:	78fb      	ldrb	r3, [r7, #3]
 80048b0:	4619      	mov	r1, r3
 80048b2:	2022      	movs	r0, #34	; 0x22
 80048b4:	f7ff ff36 	bl	8004724 <lis3mdl_write_byte>

	uint8_t ctrl4 = LIS3MDL_CTRL4_OMZ_UHP;
 80048b8:	230c      	movs	r3, #12
 80048ba:	70bb      	strb	r3, [r7, #2]
	lis3mdl_write_byte(LIS3MDL_ADDRESS_CTRL4, ctrl4);
 80048bc:	78bb      	ldrb	r3, [r7, #2]
 80048be:	4619      	mov	r1, r3
 80048c0:	2023      	movs	r0, #35	; 0x23
 80048c2:	f7ff ff2f 	bl	8004724 <lis3mdl_write_byte>

	return status;
 80048c6:	79fb      	ldrb	r3, [r7, #7]
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3708      	adds	r7, #8
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	2000000a 	.word	0x2000000a

080048d4 <hts221_read_byte>:
#include "hts221.h"

uint8_t address_hts = HTS221_DEVICE_ADDRESS_0;

uint8_t hts221_read_byte(uint8_t reg_addr)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b086      	sub	sp, #24
 80048d8:	af02      	add	r7, sp, #8
 80048da:	4603      	mov	r3, r0
 80048dc:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 80048de:	2300      	movs	r3, #0
 80048e0:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, address_hts, 0));
 80048e2:	4b08      	ldr	r3, [pc, #32]	; (8004904 <hts221_read_byte+0x30>)
 80048e4:	7819      	ldrb	r1, [r3, #0]
 80048e6:	79fa      	ldrb	r2, [r7, #7]
 80048e8:	f107 000f 	add.w	r0, r7, #15
 80048ec:	2300      	movs	r3, #0
 80048ee:	9300      	str	r3, [sp, #0]
 80048f0:	460b      	mov	r3, r1
 80048f2:	2101      	movs	r1, #1
 80048f4:	f7fe fea4 	bl	8003640 <i2c_master_read>
 80048f8:	4603      	mov	r3, r0
 80048fa:	781b      	ldrb	r3, [r3, #0]
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3710      	adds	r7, #16
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	2000000b 	.word	0x2000000b

08004908 <hts221_write_byte>:

void hts221_write_byte(uint8_t reg_addr, uint8_t value)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	4603      	mov	r3, r0
 8004910:	460a      	mov	r2, r1
 8004912:	71fb      	strb	r3, [r7, #7]
 8004914:	4613      	mov	r3, r2
 8004916:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, address_hts, 0);
 8004918:	4b05      	ldr	r3, [pc, #20]	; (8004930 <hts221_write_byte+0x28>)
 800491a:	781a      	ldrb	r2, [r3, #0]
 800491c:	79f9      	ldrb	r1, [r7, #7]
 800491e:	79b8      	ldrb	r0, [r7, #6]
 8004920:	2300      	movs	r3, #0
 8004922:	f7fe fe49 	bl	80035b8 <i2c_master_write>
}
 8004926:	bf00      	nop
 8004928:	3708      	adds	r7, #8
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	2000000b 	.word	0x2000000b

08004934 <hts221_readArray>:

void hts221_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af02      	add	r7, sp, #8
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	460b      	mov	r3, r1
 800493e:	70fb      	strb	r3, [r7, #3]
 8004940:	4613      	mov	r3, r2
 8004942:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, address_hts, 1);
 8004944:	4b06      	ldr	r3, [pc, #24]	; (8004960 <hts221_readArray+0x2c>)
 8004946:	7818      	ldrb	r0, [r3, #0]
 8004948:	78fa      	ldrb	r2, [r7, #3]
 800494a:	78b9      	ldrb	r1, [r7, #2]
 800494c:	2301      	movs	r3, #1
 800494e:	9300      	str	r3, [sp, #0]
 8004950:	4603      	mov	r3, r0
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f7fe fe74 	bl	8003640 <i2c_master_read>
}
 8004958:	bf00      	nop
 800495a:	3708      	adds	r7, #8
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	2000000b 	.word	0x2000000b

08004964 <hts221_get_temp>:

int8_t hts221_get_temp()
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
	uint8_t temp[2];
	hts221_readArray(temp, HTS221_ADDRESS_TEMP, 2);
 800496a:	1d3b      	adds	r3, r7, #4
 800496c:	2202      	movs	r2, #2
 800496e:	212a      	movs	r1, #42	; 0x2a
 8004970:	4618      	mov	r0, r3
 8004972:	f7ff ffdf 	bl	8004934 <hts221_readArray>

	return (((int16_t)((temp[1] << 8) | temp[0])) >> 3)  + 25;
 8004976:	797b      	ldrb	r3, [r7, #5]
 8004978:	021b      	lsls	r3, r3, #8
 800497a:	b21a      	sxth	r2, r3
 800497c:	793b      	ldrb	r3, [r7, #4]
 800497e:	b21b      	sxth	r3, r3
 8004980:	4313      	orrs	r3, r2
 8004982:	b21b      	sxth	r3, r3
 8004984:	10db      	asrs	r3, r3, #3
 8004986:	b21b      	sxth	r3, r3
 8004988:	b2db      	uxtb	r3, r3
 800498a:	3319      	adds	r3, #25
 800498c:	b2db      	uxtb	r3, r3
 800498e:	b25b      	sxtb	r3, r3
}
 8004990:	4618      	mov	r0, r3
 8004992:	3708      	adds	r7, #8
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <hts221_get_hum>:


void hts221_get_hum(float* hum)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b086      	sub	sp, #24
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
	uint8_t data[6];
	int16_t humidity;
	uint8_t temp;

	//get current scale and use it for final calculation
    temp = hts221_read_byte(HTS221_ADDRESS_CTRL1);
 80049a0:	2020      	movs	r0, #32
 80049a2:	f7ff ff97 	bl	80048d4 <hts221_read_byte>
 80049a6:	4603      	mov	r3, r0
 80049a8:	75fb      	strb	r3, [r7, #23]

	temp = temp >> 2;
 80049aa:	7dfb      	ldrb	r3, [r7, #23]
 80049ac:	089b      	lsrs	r3, r3, #2
 80049ae:	75fb      	strb	r3, [r7, #23]
    temp &= 0x03;			//full scale bits exctracted
 80049b0:	7dfb      	ldrb	r3, [r7, #23]
 80049b2:	f003 0303 	and.w	r3, r3, #3
 80049b6:	75fb      	strb	r3, [r7, #23]

    hts221_readArray(data, HTS221_ADDRESS_HUM, 6);
 80049b8:	f107 030c 	add.w	r3, r7, #12
 80049bc:	2206      	movs	r2, #6
 80049be:	2128      	movs	r1, #40	; 0x28
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7ff ffb7 	bl	8004934 <hts221_readArray>

    humidity = ((uint16_t)data[1]) << 8 | data[0];
 80049c6:	7b7b      	ldrb	r3, [r7, #13]
 80049c8:	021b      	lsls	r3, r3, #8
 80049ca:	b21a      	sxth	r2, r3
 80049cc:	7b3b      	ldrb	r3, [r7, #12]
 80049ce:	b21b      	sxth	r3, r3
 80049d0:	4313      	orrs	r3, r2
 80049d2:	82bb      	strh	r3, [r7, #20]

	*hum = (humidity >> 4) / 1000.0f;
 80049d4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80049d8:	111b      	asrs	r3, r3, #4
 80049da:	b21b      	sxth	r3, r3
 80049dc:	ee07 3a90 	vmov	s15, r3
 80049e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049e4:	eddf 6a05 	vldr	s13, [pc, #20]	; 80049fc <hts221_get_hum+0x64>
 80049e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	edc3 7a00 	vstr	s15, [r3]
}
 80049f2:	bf00      	nop
 80049f4:	3718      	adds	r7, #24
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	447a0000 	.word	0x447a0000

08004a00 <hts221_init>:


uint8_t hts221_init(void)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 8004a06:	2301      	movs	r3, #1
 8004a08:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 8004a0a:	2064      	movs	r0, #100	; 0x64
 8004a0c:	f7fd f9d8 	bl	8001dc0 <LL_mDelay>

	uint8_t val = hts221_read_byte(HTS221_DEVICE_ADDRESS_0);
 8004a10:	20be      	movs	r0, #190	; 0xbe
 8004a12:	f7ff ff5f 	bl	80048d4 <hts221_read_byte>
 8004a16:	4603      	mov	r3, r0
 8004a18:	71bb      	strb	r3, [r7, #6]

	if(val == HTS221_WHO_AM_I_VALUE)
 8004a1a:	79bb      	ldrb	r3, [r7, #6]
 8004a1c:	2bbc      	cmp	r3, #188	; 0xbc
 8004a1e:	d102      	bne.n	8004a26 <hts221_init+0x26>
	{
		status = 1;
 8004a20:	2301      	movs	r3, #1
 8004a22:	71fb      	strb	r3, [r7, #7]
 8004a24:	e001      	b.n	8004a2a <hts221_init+0x2a>
	}
	else			//if the device is not found on one address, try another one
	{
		status = 0;
 8004a26:	2300      	movs	r3, #0
 8004a28:	71fb      	strb	r3, [r7, #7]
		//return status;
	}

	//acc device init

	uint8_t ctrl1 = 8 << 4; // +-2g res
 8004a2a:	2380      	movs	r3, #128	; 0x80
 8004a2c:	717b      	strb	r3, [r7, #5]
	hts221_write_byte(HTS221_ADDRESS_CTRL1, ctrl1);
 8004a2e:	797b      	ldrb	r3, [r7, #5]
 8004a30:	4619      	mov	r1, r3
 8004a32:	2020      	movs	r0, #32
 8004a34:	f7ff ff68 	bl	8004908 <hts221_write_byte>

	return status;
 8004a38:	79fb      	ldrb	r3, [r7, #7]
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3708      	adds	r7, #8
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
	...

08004a44 <__errno>:
 8004a44:	4b01      	ldr	r3, [pc, #4]	; (8004a4c <__errno+0x8>)
 8004a46:	6818      	ldr	r0, [r3, #0]
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	2000000c 	.word	0x2000000c

08004a50 <__libc_init_array>:
 8004a50:	b570      	push	{r4, r5, r6, lr}
 8004a52:	4e0d      	ldr	r6, [pc, #52]	; (8004a88 <__libc_init_array+0x38>)
 8004a54:	4c0d      	ldr	r4, [pc, #52]	; (8004a8c <__libc_init_array+0x3c>)
 8004a56:	1ba4      	subs	r4, r4, r6
 8004a58:	10a4      	asrs	r4, r4, #2
 8004a5a:	2500      	movs	r5, #0
 8004a5c:	42a5      	cmp	r5, r4
 8004a5e:	d109      	bne.n	8004a74 <__libc_init_array+0x24>
 8004a60:	4e0b      	ldr	r6, [pc, #44]	; (8004a90 <__libc_init_array+0x40>)
 8004a62:	4c0c      	ldr	r4, [pc, #48]	; (8004a94 <__libc_init_array+0x44>)
 8004a64:	f005 f862 	bl	8009b2c <_init>
 8004a68:	1ba4      	subs	r4, r4, r6
 8004a6a:	10a4      	asrs	r4, r4, #2
 8004a6c:	2500      	movs	r5, #0
 8004a6e:	42a5      	cmp	r5, r4
 8004a70:	d105      	bne.n	8004a7e <__libc_init_array+0x2e>
 8004a72:	bd70      	pop	{r4, r5, r6, pc}
 8004a74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a78:	4798      	blx	r3
 8004a7a:	3501      	adds	r5, #1
 8004a7c:	e7ee      	b.n	8004a5c <__libc_init_array+0xc>
 8004a7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a82:	4798      	blx	r3
 8004a84:	3501      	adds	r5, #1
 8004a86:	e7f2      	b.n	8004a6e <__libc_init_array+0x1e>
 8004a88:	08009ed8 	.word	0x08009ed8
 8004a8c:	08009ed8 	.word	0x08009ed8
 8004a90:	08009ed8 	.word	0x08009ed8
 8004a94:	08009edc 	.word	0x08009edc

08004a98 <memset>:
 8004a98:	4402      	add	r2, r0
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d100      	bne.n	8004aa2 <memset+0xa>
 8004aa0:	4770      	bx	lr
 8004aa2:	f803 1b01 	strb.w	r1, [r3], #1
 8004aa6:	e7f9      	b.n	8004a9c <memset+0x4>

08004aa8 <__cvt>:
 8004aa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004aac:	ec55 4b10 	vmov	r4, r5, d0
 8004ab0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004ab2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004ab6:	2d00      	cmp	r5, #0
 8004ab8:	460e      	mov	r6, r1
 8004aba:	4691      	mov	r9, r2
 8004abc:	4619      	mov	r1, r3
 8004abe:	bfb8      	it	lt
 8004ac0:	4622      	movlt	r2, r4
 8004ac2:	462b      	mov	r3, r5
 8004ac4:	f027 0720 	bic.w	r7, r7, #32
 8004ac8:	bfbb      	ittet	lt
 8004aca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004ace:	461d      	movlt	r5, r3
 8004ad0:	2300      	movge	r3, #0
 8004ad2:	232d      	movlt	r3, #45	; 0x2d
 8004ad4:	bfb8      	it	lt
 8004ad6:	4614      	movlt	r4, r2
 8004ad8:	2f46      	cmp	r7, #70	; 0x46
 8004ada:	700b      	strb	r3, [r1, #0]
 8004adc:	d004      	beq.n	8004ae8 <__cvt+0x40>
 8004ade:	2f45      	cmp	r7, #69	; 0x45
 8004ae0:	d100      	bne.n	8004ae4 <__cvt+0x3c>
 8004ae2:	3601      	adds	r6, #1
 8004ae4:	2102      	movs	r1, #2
 8004ae6:	e000      	b.n	8004aea <__cvt+0x42>
 8004ae8:	2103      	movs	r1, #3
 8004aea:	ab03      	add	r3, sp, #12
 8004aec:	9301      	str	r3, [sp, #4]
 8004aee:	ab02      	add	r3, sp, #8
 8004af0:	9300      	str	r3, [sp, #0]
 8004af2:	4632      	mov	r2, r6
 8004af4:	4653      	mov	r3, sl
 8004af6:	ec45 4b10 	vmov	d0, r4, r5
 8004afa:	f001 fda9 	bl	8006650 <_dtoa_r>
 8004afe:	2f47      	cmp	r7, #71	; 0x47
 8004b00:	4680      	mov	r8, r0
 8004b02:	d102      	bne.n	8004b0a <__cvt+0x62>
 8004b04:	f019 0f01 	tst.w	r9, #1
 8004b08:	d026      	beq.n	8004b58 <__cvt+0xb0>
 8004b0a:	2f46      	cmp	r7, #70	; 0x46
 8004b0c:	eb08 0906 	add.w	r9, r8, r6
 8004b10:	d111      	bne.n	8004b36 <__cvt+0x8e>
 8004b12:	f898 3000 	ldrb.w	r3, [r8]
 8004b16:	2b30      	cmp	r3, #48	; 0x30
 8004b18:	d10a      	bne.n	8004b30 <__cvt+0x88>
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	4620      	mov	r0, r4
 8004b20:	4629      	mov	r1, r5
 8004b22:	f7fb ffd1 	bl	8000ac8 <__aeabi_dcmpeq>
 8004b26:	b918      	cbnz	r0, 8004b30 <__cvt+0x88>
 8004b28:	f1c6 0601 	rsb	r6, r6, #1
 8004b2c:	f8ca 6000 	str.w	r6, [sl]
 8004b30:	f8da 3000 	ldr.w	r3, [sl]
 8004b34:	4499      	add	r9, r3
 8004b36:	2200      	movs	r2, #0
 8004b38:	2300      	movs	r3, #0
 8004b3a:	4620      	mov	r0, r4
 8004b3c:	4629      	mov	r1, r5
 8004b3e:	f7fb ffc3 	bl	8000ac8 <__aeabi_dcmpeq>
 8004b42:	b938      	cbnz	r0, 8004b54 <__cvt+0xac>
 8004b44:	2230      	movs	r2, #48	; 0x30
 8004b46:	9b03      	ldr	r3, [sp, #12]
 8004b48:	454b      	cmp	r3, r9
 8004b4a:	d205      	bcs.n	8004b58 <__cvt+0xb0>
 8004b4c:	1c59      	adds	r1, r3, #1
 8004b4e:	9103      	str	r1, [sp, #12]
 8004b50:	701a      	strb	r2, [r3, #0]
 8004b52:	e7f8      	b.n	8004b46 <__cvt+0x9e>
 8004b54:	f8cd 900c 	str.w	r9, [sp, #12]
 8004b58:	9b03      	ldr	r3, [sp, #12]
 8004b5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b5c:	eba3 0308 	sub.w	r3, r3, r8
 8004b60:	4640      	mov	r0, r8
 8004b62:	6013      	str	r3, [r2, #0]
 8004b64:	b004      	add	sp, #16
 8004b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004b6a <__exponent>:
 8004b6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b6c:	2900      	cmp	r1, #0
 8004b6e:	4604      	mov	r4, r0
 8004b70:	bfba      	itte	lt
 8004b72:	4249      	neglt	r1, r1
 8004b74:	232d      	movlt	r3, #45	; 0x2d
 8004b76:	232b      	movge	r3, #43	; 0x2b
 8004b78:	2909      	cmp	r1, #9
 8004b7a:	f804 2b02 	strb.w	r2, [r4], #2
 8004b7e:	7043      	strb	r3, [r0, #1]
 8004b80:	dd20      	ble.n	8004bc4 <__exponent+0x5a>
 8004b82:	f10d 0307 	add.w	r3, sp, #7
 8004b86:	461f      	mov	r7, r3
 8004b88:	260a      	movs	r6, #10
 8004b8a:	fb91 f5f6 	sdiv	r5, r1, r6
 8004b8e:	fb06 1115 	mls	r1, r6, r5, r1
 8004b92:	3130      	adds	r1, #48	; 0x30
 8004b94:	2d09      	cmp	r5, #9
 8004b96:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004b9a:	f103 32ff 	add.w	r2, r3, #4294967295
 8004b9e:	4629      	mov	r1, r5
 8004ba0:	dc09      	bgt.n	8004bb6 <__exponent+0x4c>
 8004ba2:	3130      	adds	r1, #48	; 0x30
 8004ba4:	3b02      	subs	r3, #2
 8004ba6:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004baa:	42bb      	cmp	r3, r7
 8004bac:	4622      	mov	r2, r4
 8004bae:	d304      	bcc.n	8004bba <__exponent+0x50>
 8004bb0:	1a10      	subs	r0, r2, r0
 8004bb2:	b003      	add	sp, #12
 8004bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	e7e7      	b.n	8004b8a <__exponent+0x20>
 8004bba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004bbe:	f804 2b01 	strb.w	r2, [r4], #1
 8004bc2:	e7f2      	b.n	8004baa <__exponent+0x40>
 8004bc4:	2330      	movs	r3, #48	; 0x30
 8004bc6:	4419      	add	r1, r3
 8004bc8:	7083      	strb	r3, [r0, #2]
 8004bca:	1d02      	adds	r2, r0, #4
 8004bcc:	70c1      	strb	r1, [r0, #3]
 8004bce:	e7ef      	b.n	8004bb0 <__exponent+0x46>

08004bd0 <_printf_float>:
 8004bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bd4:	b08d      	sub	sp, #52	; 0x34
 8004bd6:	460c      	mov	r4, r1
 8004bd8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004bdc:	4616      	mov	r6, r2
 8004bde:	461f      	mov	r7, r3
 8004be0:	4605      	mov	r5, r0
 8004be2:	f002 fe19 	bl	8007818 <_localeconv_r>
 8004be6:	6803      	ldr	r3, [r0, #0]
 8004be8:	9304      	str	r3, [sp, #16]
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7fb faf0 	bl	80001d0 <strlen>
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	930a      	str	r3, [sp, #40]	; 0x28
 8004bf4:	f8d8 3000 	ldr.w	r3, [r8]
 8004bf8:	9005      	str	r0, [sp, #20]
 8004bfa:	3307      	adds	r3, #7
 8004bfc:	f023 0307 	bic.w	r3, r3, #7
 8004c00:	f103 0208 	add.w	r2, r3, #8
 8004c04:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004c08:	f8d4 b000 	ldr.w	fp, [r4]
 8004c0c:	f8c8 2000 	str.w	r2, [r8]
 8004c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c14:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004c18:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004c1c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004c20:	9307      	str	r3, [sp, #28]
 8004c22:	f8cd 8018 	str.w	r8, [sp, #24]
 8004c26:	f04f 32ff 	mov.w	r2, #4294967295
 8004c2a:	4ba7      	ldr	r3, [pc, #668]	; (8004ec8 <_printf_float+0x2f8>)
 8004c2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c30:	f7fb ff7c 	bl	8000b2c <__aeabi_dcmpun>
 8004c34:	bb70      	cbnz	r0, 8004c94 <_printf_float+0xc4>
 8004c36:	f04f 32ff 	mov.w	r2, #4294967295
 8004c3a:	4ba3      	ldr	r3, [pc, #652]	; (8004ec8 <_printf_float+0x2f8>)
 8004c3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c40:	f7fb ff56 	bl	8000af0 <__aeabi_dcmple>
 8004c44:	bb30      	cbnz	r0, 8004c94 <_printf_float+0xc4>
 8004c46:	2200      	movs	r2, #0
 8004c48:	2300      	movs	r3, #0
 8004c4a:	4640      	mov	r0, r8
 8004c4c:	4649      	mov	r1, r9
 8004c4e:	f7fb ff45 	bl	8000adc <__aeabi_dcmplt>
 8004c52:	b110      	cbz	r0, 8004c5a <_printf_float+0x8a>
 8004c54:	232d      	movs	r3, #45	; 0x2d
 8004c56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c5a:	4a9c      	ldr	r2, [pc, #624]	; (8004ecc <_printf_float+0x2fc>)
 8004c5c:	4b9c      	ldr	r3, [pc, #624]	; (8004ed0 <_printf_float+0x300>)
 8004c5e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004c62:	bf8c      	ite	hi
 8004c64:	4690      	movhi	r8, r2
 8004c66:	4698      	movls	r8, r3
 8004c68:	2303      	movs	r3, #3
 8004c6a:	f02b 0204 	bic.w	r2, fp, #4
 8004c6e:	6123      	str	r3, [r4, #16]
 8004c70:	6022      	str	r2, [r4, #0]
 8004c72:	f04f 0900 	mov.w	r9, #0
 8004c76:	9700      	str	r7, [sp, #0]
 8004c78:	4633      	mov	r3, r6
 8004c7a:	aa0b      	add	r2, sp, #44	; 0x2c
 8004c7c:	4621      	mov	r1, r4
 8004c7e:	4628      	mov	r0, r5
 8004c80:	f000 f9e6 	bl	8005050 <_printf_common>
 8004c84:	3001      	adds	r0, #1
 8004c86:	f040 808d 	bne.w	8004da4 <_printf_float+0x1d4>
 8004c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c8e:	b00d      	add	sp, #52	; 0x34
 8004c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c94:	4642      	mov	r2, r8
 8004c96:	464b      	mov	r3, r9
 8004c98:	4640      	mov	r0, r8
 8004c9a:	4649      	mov	r1, r9
 8004c9c:	f7fb ff46 	bl	8000b2c <__aeabi_dcmpun>
 8004ca0:	b110      	cbz	r0, 8004ca8 <_printf_float+0xd8>
 8004ca2:	4a8c      	ldr	r2, [pc, #560]	; (8004ed4 <_printf_float+0x304>)
 8004ca4:	4b8c      	ldr	r3, [pc, #560]	; (8004ed8 <_printf_float+0x308>)
 8004ca6:	e7da      	b.n	8004c5e <_printf_float+0x8e>
 8004ca8:	6861      	ldr	r1, [r4, #4]
 8004caa:	1c4b      	adds	r3, r1, #1
 8004cac:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8004cb0:	a80a      	add	r0, sp, #40	; 0x28
 8004cb2:	d13e      	bne.n	8004d32 <_printf_float+0x162>
 8004cb4:	2306      	movs	r3, #6
 8004cb6:	6063      	str	r3, [r4, #4]
 8004cb8:	2300      	movs	r3, #0
 8004cba:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004cbe:	ab09      	add	r3, sp, #36	; 0x24
 8004cc0:	9300      	str	r3, [sp, #0]
 8004cc2:	ec49 8b10 	vmov	d0, r8, r9
 8004cc6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004cca:	6022      	str	r2, [r4, #0]
 8004ccc:	f8cd a004 	str.w	sl, [sp, #4]
 8004cd0:	6861      	ldr	r1, [r4, #4]
 8004cd2:	4628      	mov	r0, r5
 8004cd4:	f7ff fee8 	bl	8004aa8 <__cvt>
 8004cd8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004cdc:	2b47      	cmp	r3, #71	; 0x47
 8004cde:	4680      	mov	r8, r0
 8004ce0:	d109      	bne.n	8004cf6 <_printf_float+0x126>
 8004ce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ce4:	1cd8      	adds	r0, r3, #3
 8004ce6:	db02      	blt.n	8004cee <_printf_float+0x11e>
 8004ce8:	6862      	ldr	r2, [r4, #4]
 8004cea:	4293      	cmp	r3, r2
 8004cec:	dd47      	ble.n	8004d7e <_printf_float+0x1ae>
 8004cee:	f1aa 0a02 	sub.w	sl, sl, #2
 8004cf2:	fa5f fa8a 	uxtb.w	sl, sl
 8004cf6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004cfa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004cfc:	d824      	bhi.n	8004d48 <_printf_float+0x178>
 8004cfe:	3901      	subs	r1, #1
 8004d00:	4652      	mov	r2, sl
 8004d02:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004d06:	9109      	str	r1, [sp, #36]	; 0x24
 8004d08:	f7ff ff2f 	bl	8004b6a <__exponent>
 8004d0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d0e:	1813      	adds	r3, r2, r0
 8004d10:	2a01      	cmp	r2, #1
 8004d12:	4681      	mov	r9, r0
 8004d14:	6123      	str	r3, [r4, #16]
 8004d16:	dc02      	bgt.n	8004d1e <_printf_float+0x14e>
 8004d18:	6822      	ldr	r2, [r4, #0]
 8004d1a:	07d1      	lsls	r1, r2, #31
 8004d1c:	d501      	bpl.n	8004d22 <_printf_float+0x152>
 8004d1e:	3301      	adds	r3, #1
 8004d20:	6123      	str	r3, [r4, #16]
 8004d22:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d0a5      	beq.n	8004c76 <_printf_float+0xa6>
 8004d2a:	232d      	movs	r3, #45	; 0x2d
 8004d2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d30:	e7a1      	b.n	8004c76 <_printf_float+0xa6>
 8004d32:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8004d36:	f000 8177 	beq.w	8005028 <_printf_float+0x458>
 8004d3a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004d3e:	d1bb      	bne.n	8004cb8 <_printf_float+0xe8>
 8004d40:	2900      	cmp	r1, #0
 8004d42:	d1b9      	bne.n	8004cb8 <_printf_float+0xe8>
 8004d44:	2301      	movs	r3, #1
 8004d46:	e7b6      	b.n	8004cb6 <_printf_float+0xe6>
 8004d48:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004d4c:	d119      	bne.n	8004d82 <_printf_float+0x1b2>
 8004d4e:	2900      	cmp	r1, #0
 8004d50:	6863      	ldr	r3, [r4, #4]
 8004d52:	dd0c      	ble.n	8004d6e <_printf_float+0x19e>
 8004d54:	6121      	str	r1, [r4, #16]
 8004d56:	b913      	cbnz	r3, 8004d5e <_printf_float+0x18e>
 8004d58:	6822      	ldr	r2, [r4, #0]
 8004d5a:	07d2      	lsls	r2, r2, #31
 8004d5c:	d502      	bpl.n	8004d64 <_printf_float+0x194>
 8004d5e:	3301      	adds	r3, #1
 8004d60:	440b      	add	r3, r1
 8004d62:	6123      	str	r3, [r4, #16]
 8004d64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d66:	65a3      	str	r3, [r4, #88]	; 0x58
 8004d68:	f04f 0900 	mov.w	r9, #0
 8004d6c:	e7d9      	b.n	8004d22 <_printf_float+0x152>
 8004d6e:	b913      	cbnz	r3, 8004d76 <_printf_float+0x1a6>
 8004d70:	6822      	ldr	r2, [r4, #0]
 8004d72:	07d0      	lsls	r0, r2, #31
 8004d74:	d501      	bpl.n	8004d7a <_printf_float+0x1aa>
 8004d76:	3302      	adds	r3, #2
 8004d78:	e7f3      	b.n	8004d62 <_printf_float+0x192>
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e7f1      	b.n	8004d62 <_printf_float+0x192>
 8004d7e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8004d82:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004d86:	4293      	cmp	r3, r2
 8004d88:	db05      	blt.n	8004d96 <_printf_float+0x1c6>
 8004d8a:	6822      	ldr	r2, [r4, #0]
 8004d8c:	6123      	str	r3, [r4, #16]
 8004d8e:	07d1      	lsls	r1, r2, #31
 8004d90:	d5e8      	bpl.n	8004d64 <_printf_float+0x194>
 8004d92:	3301      	adds	r3, #1
 8004d94:	e7e5      	b.n	8004d62 <_printf_float+0x192>
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	bfd4      	ite	le
 8004d9a:	f1c3 0302 	rsble	r3, r3, #2
 8004d9e:	2301      	movgt	r3, #1
 8004da0:	4413      	add	r3, r2
 8004da2:	e7de      	b.n	8004d62 <_printf_float+0x192>
 8004da4:	6823      	ldr	r3, [r4, #0]
 8004da6:	055a      	lsls	r2, r3, #21
 8004da8:	d407      	bmi.n	8004dba <_printf_float+0x1ea>
 8004daa:	6923      	ldr	r3, [r4, #16]
 8004dac:	4642      	mov	r2, r8
 8004dae:	4631      	mov	r1, r6
 8004db0:	4628      	mov	r0, r5
 8004db2:	47b8      	blx	r7
 8004db4:	3001      	adds	r0, #1
 8004db6:	d12b      	bne.n	8004e10 <_printf_float+0x240>
 8004db8:	e767      	b.n	8004c8a <_printf_float+0xba>
 8004dba:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004dbe:	f240 80dc 	bls.w	8004f7a <_printf_float+0x3aa>
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004dca:	f7fb fe7d 	bl	8000ac8 <__aeabi_dcmpeq>
 8004dce:	2800      	cmp	r0, #0
 8004dd0:	d033      	beq.n	8004e3a <_printf_float+0x26a>
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	4a41      	ldr	r2, [pc, #260]	; (8004edc <_printf_float+0x30c>)
 8004dd6:	4631      	mov	r1, r6
 8004dd8:	4628      	mov	r0, r5
 8004dda:	47b8      	blx	r7
 8004ddc:	3001      	adds	r0, #1
 8004dde:	f43f af54 	beq.w	8004c8a <_printf_float+0xba>
 8004de2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004de6:	429a      	cmp	r2, r3
 8004de8:	db02      	blt.n	8004df0 <_printf_float+0x220>
 8004dea:	6823      	ldr	r3, [r4, #0]
 8004dec:	07d8      	lsls	r0, r3, #31
 8004dee:	d50f      	bpl.n	8004e10 <_printf_float+0x240>
 8004df0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004df4:	4631      	mov	r1, r6
 8004df6:	4628      	mov	r0, r5
 8004df8:	47b8      	blx	r7
 8004dfa:	3001      	adds	r0, #1
 8004dfc:	f43f af45 	beq.w	8004c8a <_printf_float+0xba>
 8004e00:	f04f 0800 	mov.w	r8, #0
 8004e04:	f104 091a 	add.w	r9, r4, #26
 8004e08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	4543      	cmp	r3, r8
 8004e0e:	dc09      	bgt.n	8004e24 <_printf_float+0x254>
 8004e10:	6823      	ldr	r3, [r4, #0]
 8004e12:	079b      	lsls	r3, r3, #30
 8004e14:	f100 8103 	bmi.w	800501e <_printf_float+0x44e>
 8004e18:	68e0      	ldr	r0, [r4, #12]
 8004e1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e1c:	4298      	cmp	r0, r3
 8004e1e:	bfb8      	it	lt
 8004e20:	4618      	movlt	r0, r3
 8004e22:	e734      	b.n	8004c8e <_printf_float+0xbe>
 8004e24:	2301      	movs	r3, #1
 8004e26:	464a      	mov	r2, r9
 8004e28:	4631      	mov	r1, r6
 8004e2a:	4628      	mov	r0, r5
 8004e2c:	47b8      	blx	r7
 8004e2e:	3001      	adds	r0, #1
 8004e30:	f43f af2b 	beq.w	8004c8a <_printf_float+0xba>
 8004e34:	f108 0801 	add.w	r8, r8, #1
 8004e38:	e7e6      	b.n	8004e08 <_printf_float+0x238>
 8004e3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	dc2b      	bgt.n	8004e98 <_printf_float+0x2c8>
 8004e40:	2301      	movs	r3, #1
 8004e42:	4a26      	ldr	r2, [pc, #152]	; (8004edc <_printf_float+0x30c>)
 8004e44:	4631      	mov	r1, r6
 8004e46:	4628      	mov	r0, r5
 8004e48:	47b8      	blx	r7
 8004e4a:	3001      	adds	r0, #1
 8004e4c:	f43f af1d 	beq.w	8004c8a <_printf_float+0xba>
 8004e50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e52:	b923      	cbnz	r3, 8004e5e <_printf_float+0x28e>
 8004e54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e56:	b913      	cbnz	r3, 8004e5e <_printf_float+0x28e>
 8004e58:	6823      	ldr	r3, [r4, #0]
 8004e5a:	07d9      	lsls	r1, r3, #31
 8004e5c:	d5d8      	bpl.n	8004e10 <_printf_float+0x240>
 8004e5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e62:	4631      	mov	r1, r6
 8004e64:	4628      	mov	r0, r5
 8004e66:	47b8      	blx	r7
 8004e68:	3001      	adds	r0, #1
 8004e6a:	f43f af0e 	beq.w	8004c8a <_printf_float+0xba>
 8004e6e:	f04f 0900 	mov.w	r9, #0
 8004e72:	f104 0a1a 	add.w	sl, r4, #26
 8004e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e78:	425b      	negs	r3, r3
 8004e7a:	454b      	cmp	r3, r9
 8004e7c:	dc01      	bgt.n	8004e82 <_printf_float+0x2b2>
 8004e7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e80:	e794      	b.n	8004dac <_printf_float+0x1dc>
 8004e82:	2301      	movs	r3, #1
 8004e84:	4652      	mov	r2, sl
 8004e86:	4631      	mov	r1, r6
 8004e88:	4628      	mov	r0, r5
 8004e8a:	47b8      	blx	r7
 8004e8c:	3001      	adds	r0, #1
 8004e8e:	f43f aefc 	beq.w	8004c8a <_printf_float+0xba>
 8004e92:	f109 0901 	add.w	r9, r9, #1
 8004e96:	e7ee      	b.n	8004e76 <_printf_float+0x2a6>
 8004e98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	bfa8      	it	ge
 8004ea0:	461a      	movge	r2, r3
 8004ea2:	2a00      	cmp	r2, #0
 8004ea4:	4691      	mov	r9, r2
 8004ea6:	dd07      	ble.n	8004eb8 <_printf_float+0x2e8>
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	4631      	mov	r1, r6
 8004eac:	4642      	mov	r2, r8
 8004eae:	4628      	mov	r0, r5
 8004eb0:	47b8      	blx	r7
 8004eb2:	3001      	adds	r0, #1
 8004eb4:	f43f aee9 	beq.w	8004c8a <_printf_float+0xba>
 8004eb8:	f104 031a 	add.w	r3, r4, #26
 8004ebc:	f04f 0b00 	mov.w	fp, #0
 8004ec0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ec4:	9306      	str	r3, [sp, #24]
 8004ec6:	e015      	b.n	8004ef4 <_printf_float+0x324>
 8004ec8:	7fefffff 	.word	0x7fefffff
 8004ecc:	08009ba1 	.word	0x08009ba1
 8004ed0:	08009b9d 	.word	0x08009b9d
 8004ed4:	08009ba9 	.word	0x08009ba9
 8004ed8:	08009ba5 	.word	0x08009ba5
 8004edc:	08009bad 	.word	0x08009bad
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	9a06      	ldr	r2, [sp, #24]
 8004ee4:	4631      	mov	r1, r6
 8004ee6:	4628      	mov	r0, r5
 8004ee8:	47b8      	blx	r7
 8004eea:	3001      	adds	r0, #1
 8004eec:	f43f aecd 	beq.w	8004c8a <_printf_float+0xba>
 8004ef0:	f10b 0b01 	add.w	fp, fp, #1
 8004ef4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004ef8:	ebaa 0309 	sub.w	r3, sl, r9
 8004efc:	455b      	cmp	r3, fp
 8004efe:	dcef      	bgt.n	8004ee0 <_printf_float+0x310>
 8004f00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f04:	429a      	cmp	r2, r3
 8004f06:	44d0      	add	r8, sl
 8004f08:	db15      	blt.n	8004f36 <_printf_float+0x366>
 8004f0a:	6823      	ldr	r3, [r4, #0]
 8004f0c:	07da      	lsls	r2, r3, #31
 8004f0e:	d412      	bmi.n	8004f36 <_printf_float+0x366>
 8004f10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f12:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f14:	eba3 020a 	sub.w	r2, r3, sl
 8004f18:	eba3 0a01 	sub.w	sl, r3, r1
 8004f1c:	4592      	cmp	sl, r2
 8004f1e:	bfa8      	it	ge
 8004f20:	4692      	movge	sl, r2
 8004f22:	f1ba 0f00 	cmp.w	sl, #0
 8004f26:	dc0e      	bgt.n	8004f46 <_printf_float+0x376>
 8004f28:	f04f 0800 	mov.w	r8, #0
 8004f2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004f30:	f104 091a 	add.w	r9, r4, #26
 8004f34:	e019      	b.n	8004f6a <_printf_float+0x39a>
 8004f36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f3a:	4631      	mov	r1, r6
 8004f3c:	4628      	mov	r0, r5
 8004f3e:	47b8      	blx	r7
 8004f40:	3001      	adds	r0, #1
 8004f42:	d1e5      	bne.n	8004f10 <_printf_float+0x340>
 8004f44:	e6a1      	b.n	8004c8a <_printf_float+0xba>
 8004f46:	4653      	mov	r3, sl
 8004f48:	4642      	mov	r2, r8
 8004f4a:	4631      	mov	r1, r6
 8004f4c:	4628      	mov	r0, r5
 8004f4e:	47b8      	blx	r7
 8004f50:	3001      	adds	r0, #1
 8004f52:	d1e9      	bne.n	8004f28 <_printf_float+0x358>
 8004f54:	e699      	b.n	8004c8a <_printf_float+0xba>
 8004f56:	2301      	movs	r3, #1
 8004f58:	464a      	mov	r2, r9
 8004f5a:	4631      	mov	r1, r6
 8004f5c:	4628      	mov	r0, r5
 8004f5e:	47b8      	blx	r7
 8004f60:	3001      	adds	r0, #1
 8004f62:	f43f ae92 	beq.w	8004c8a <_printf_float+0xba>
 8004f66:	f108 0801 	add.w	r8, r8, #1
 8004f6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f6e:	1a9b      	subs	r3, r3, r2
 8004f70:	eba3 030a 	sub.w	r3, r3, sl
 8004f74:	4543      	cmp	r3, r8
 8004f76:	dcee      	bgt.n	8004f56 <_printf_float+0x386>
 8004f78:	e74a      	b.n	8004e10 <_printf_float+0x240>
 8004f7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f7c:	2a01      	cmp	r2, #1
 8004f7e:	dc01      	bgt.n	8004f84 <_printf_float+0x3b4>
 8004f80:	07db      	lsls	r3, r3, #31
 8004f82:	d53a      	bpl.n	8004ffa <_printf_float+0x42a>
 8004f84:	2301      	movs	r3, #1
 8004f86:	4642      	mov	r2, r8
 8004f88:	4631      	mov	r1, r6
 8004f8a:	4628      	mov	r0, r5
 8004f8c:	47b8      	blx	r7
 8004f8e:	3001      	adds	r0, #1
 8004f90:	f43f ae7b 	beq.w	8004c8a <_printf_float+0xba>
 8004f94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f98:	4631      	mov	r1, r6
 8004f9a:	4628      	mov	r0, r5
 8004f9c:	47b8      	blx	r7
 8004f9e:	3001      	adds	r0, #1
 8004fa0:	f108 0801 	add.w	r8, r8, #1
 8004fa4:	f43f ae71 	beq.w	8004c8a <_printf_float+0xba>
 8004fa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004faa:	2200      	movs	r2, #0
 8004fac:	f103 3aff 	add.w	sl, r3, #4294967295
 8004fb0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	f7fb fd87 	bl	8000ac8 <__aeabi_dcmpeq>
 8004fba:	b9c8      	cbnz	r0, 8004ff0 <_printf_float+0x420>
 8004fbc:	4653      	mov	r3, sl
 8004fbe:	4642      	mov	r2, r8
 8004fc0:	4631      	mov	r1, r6
 8004fc2:	4628      	mov	r0, r5
 8004fc4:	47b8      	blx	r7
 8004fc6:	3001      	adds	r0, #1
 8004fc8:	d10e      	bne.n	8004fe8 <_printf_float+0x418>
 8004fca:	e65e      	b.n	8004c8a <_printf_float+0xba>
 8004fcc:	2301      	movs	r3, #1
 8004fce:	4652      	mov	r2, sl
 8004fd0:	4631      	mov	r1, r6
 8004fd2:	4628      	mov	r0, r5
 8004fd4:	47b8      	blx	r7
 8004fd6:	3001      	adds	r0, #1
 8004fd8:	f43f ae57 	beq.w	8004c8a <_printf_float+0xba>
 8004fdc:	f108 0801 	add.w	r8, r8, #1
 8004fe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	4543      	cmp	r3, r8
 8004fe6:	dcf1      	bgt.n	8004fcc <_printf_float+0x3fc>
 8004fe8:	464b      	mov	r3, r9
 8004fea:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004fee:	e6de      	b.n	8004dae <_printf_float+0x1de>
 8004ff0:	f04f 0800 	mov.w	r8, #0
 8004ff4:	f104 0a1a 	add.w	sl, r4, #26
 8004ff8:	e7f2      	b.n	8004fe0 <_printf_float+0x410>
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e7df      	b.n	8004fbe <_printf_float+0x3ee>
 8004ffe:	2301      	movs	r3, #1
 8005000:	464a      	mov	r2, r9
 8005002:	4631      	mov	r1, r6
 8005004:	4628      	mov	r0, r5
 8005006:	47b8      	blx	r7
 8005008:	3001      	adds	r0, #1
 800500a:	f43f ae3e 	beq.w	8004c8a <_printf_float+0xba>
 800500e:	f108 0801 	add.w	r8, r8, #1
 8005012:	68e3      	ldr	r3, [r4, #12]
 8005014:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005016:	1a9b      	subs	r3, r3, r2
 8005018:	4543      	cmp	r3, r8
 800501a:	dcf0      	bgt.n	8004ffe <_printf_float+0x42e>
 800501c:	e6fc      	b.n	8004e18 <_printf_float+0x248>
 800501e:	f04f 0800 	mov.w	r8, #0
 8005022:	f104 0919 	add.w	r9, r4, #25
 8005026:	e7f4      	b.n	8005012 <_printf_float+0x442>
 8005028:	2900      	cmp	r1, #0
 800502a:	f43f ae8b 	beq.w	8004d44 <_printf_float+0x174>
 800502e:	2300      	movs	r3, #0
 8005030:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005034:	ab09      	add	r3, sp, #36	; 0x24
 8005036:	9300      	str	r3, [sp, #0]
 8005038:	ec49 8b10 	vmov	d0, r8, r9
 800503c:	6022      	str	r2, [r4, #0]
 800503e:	f8cd a004 	str.w	sl, [sp, #4]
 8005042:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005046:	4628      	mov	r0, r5
 8005048:	f7ff fd2e 	bl	8004aa8 <__cvt>
 800504c:	4680      	mov	r8, r0
 800504e:	e648      	b.n	8004ce2 <_printf_float+0x112>

08005050 <_printf_common>:
 8005050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005054:	4691      	mov	r9, r2
 8005056:	461f      	mov	r7, r3
 8005058:	688a      	ldr	r2, [r1, #8]
 800505a:	690b      	ldr	r3, [r1, #16]
 800505c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005060:	4293      	cmp	r3, r2
 8005062:	bfb8      	it	lt
 8005064:	4613      	movlt	r3, r2
 8005066:	f8c9 3000 	str.w	r3, [r9]
 800506a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800506e:	4606      	mov	r6, r0
 8005070:	460c      	mov	r4, r1
 8005072:	b112      	cbz	r2, 800507a <_printf_common+0x2a>
 8005074:	3301      	adds	r3, #1
 8005076:	f8c9 3000 	str.w	r3, [r9]
 800507a:	6823      	ldr	r3, [r4, #0]
 800507c:	0699      	lsls	r1, r3, #26
 800507e:	bf42      	ittt	mi
 8005080:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005084:	3302      	addmi	r3, #2
 8005086:	f8c9 3000 	strmi.w	r3, [r9]
 800508a:	6825      	ldr	r5, [r4, #0]
 800508c:	f015 0506 	ands.w	r5, r5, #6
 8005090:	d107      	bne.n	80050a2 <_printf_common+0x52>
 8005092:	f104 0a19 	add.w	sl, r4, #25
 8005096:	68e3      	ldr	r3, [r4, #12]
 8005098:	f8d9 2000 	ldr.w	r2, [r9]
 800509c:	1a9b      	subs	r3, r3, r2
 800509e:	42ab      	cmp	r3, r5
 80050a0:	dc28      	bgt.n	80050f4 <_printf_common+0xa4>
 80050a2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80050a6:	6822      	ldr	r2, [r4, #0]
 80050a8:	3300      	adds	r3, #0
 80050aa:	bf18      	it	ne
 80050ac:	2301      	movne	r3, #1
 80050ae:	0692      	lsls	r2, r2, #26
 80050b0:	d42d      	bmi.n	800510e <_printf_common+0xbe>
 80050b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050b6:	4639      	mov	r1, r7
 80050b8:	4630      	mov	r0, r6
 80050ba:	47c0      	blx	r8
 80050bc:	3001      	adds	r0, #1
 80050be:	d020      	beq.n	8005102 <_printf_common+0xb2>
 80050c0:	6823      	ldr	r3, [r4, #0]
 80050c2:	68e5      	ldr	r5, [r4, #12]
 80050c4:	f8d9 2000 	ldr.w	r2, [r9]
 80050c8:	f003 0306 	and.w	r3, r3, #6
 80050cc:	2b04      	cmp	r3, #4
 80050ce:	bf08      	it	eq
 80050d0:	1aad      	subeq	r5, r5, r2
 80050d2:	68a3      	ldr	r3, [r4, #8]
 80050d4:	6922      	ldr	r2, [r4, #16]
 80050d6:	bf0c      	ite	eq
 80050d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050dc:	2500      	movne	r5, #0
 80050de:	4293      	cmp	r3, r2
 80050e0:	bfc4      	itt	gt
 80050e2:	1a9b      	subgt	r3, r3, r2
 80050e4:	18ed      	addgt	r5, r5, r3
 80050e6:	f04f 0900 	mov.w	r9, #0
 80050ea:	341a      	adds	r4, #26
 80050ec:	454d      	cmp	r5, r9
 80050ee:	d11a      	bne.n	8005126 <_printf_common+0xd6>
 80050f0:	2000      	movs	r0, #0
 80050f2:	e008      	b.n	8005106 <_printf_common+0xb6>
 80050f4:	2301      	movs	r3, #1
 80050f6:	4652      	mov	r2, sl
 80050f8:	4639      	mov	r1, r7
 80050fa:	4630      	mov	r0, r6
 80050fc:	47c0      	blx	r8
 80050fe:	3001      	adds	r0, #1
 8005100:	d103      	bne.n	800510a <_printf_common+0xba>
 8005102:	f04f 30ff 	mov.w	r0, #4294967295
 8005106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800510a:	3501      	adds	r5, #1
 800510c:	e7c3      	b.n	8005096 <_printf_common+0x46>
 800510e:	18e1      	adds	r1, r4, r3
 8005110:	1c5a      	adds	r2, r3, #1
 8005112:	2030      	movs	r0, #48	; 0x30
 8005114:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005118:	4422      	add	r2, r4
 800511a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800511e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005122:	3302      	adds	r3, #2
 8005124:	e7c5      	b.n	80050b2 <_printf_common+0x62>
 8005126:	2301      	movs	r3, #1
 8005128:	4622      	mov	r2, r4
 800512a:	4639      	mov	r1, r7
 800512c:	4630      	mov	r0, r6
 800512e:	47c0      	blx	r8
 8005130:	3001      	adds	r0, #1
 8005132:	d0e6      	beq.n	8005102 <_printf_common+0xb2>
 8005134:	f109 0901 	add.w	r9, r9, #1
 8005138:	e7d8      	b.n	80050ec <_printf_common+0x9c>
	...

0800513c <_printf_i>:
 800513c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005140:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005144:	460c      	mov	r4, r1
 8005146:	7e09      	ldrb	r1, [r1, #24]
 8005148:	b085      	sub	sp, #20
 800514a:	296e      	cmp	r1, #110	; 0x6e
 800514c:	4617      	mov	r7, r2
 800514e:	4606      	mov	r6, r0
 8005150:	4698      	mov	r8, r3
 8005152:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005154:	f000 80b3 	beq.w	80052be <_printf_i+0x182>
 8005158:	d822      	bhi.n	80051a0 <_printf_i+0x64>
 800515a:	2963      	cmp	r1, #99	; 0x63
 800515c:	d036      	beq.n	80051cc <_printf_i+0x90>
 800515e:	d80a      	bhi.n	8005176 <_printf_i+0x3a>
 8005160:	2900      	cmp	r1, #0
 8005162:	f000 80b9 	beq.w	80052d8 <_printf_i+0x19c>
 8005166:	2958      	cmp	r1, #88	; 0x58
 8005168:	f000 8083 	beq.w	8005272 <_printf_i+0x136>
 800516c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005170:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005174:	e032      	b.n	80051dc <_printf_i+0xa0>
 8005176:	2964      	cmp	r1, #100	; 0x64
 8005178:	d001      	beq.n	800517e <_printf_i+0x42>
 800517a:	2969      	cmp	r1, #105	; 0x69
 800517c:	d1f6      	bne.n	800516c <_printf_i+0x30>
 800517e:	6820      	ldr	r0, [r4, #0]
 8005180:	6813      	ldr	r3, [r2, #0]
 8005182:	0605      	lsls	r5, r0, #24
 8005184:	f103 0104 	add.w	r1, r3, #4
 8005188:	d52a      	bpl.n	80051e0 <_printf_i+0xa4>
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	6011      	str	r1, [r2, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	da03      	bge.n	800519a <_printf_i+0x5e>
 8005192:	222d      	movs	r2, #45	; 0x2d
 8005194:	425b      	negs	r3, r3
 8005196:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800519a:	486f      	ldr	r0, [pc, #444]	; (8005358 <_printf_i+0x21c>)
 800519c:	220a      	movs	r2, #10
 800519e:	e039      	b.n	8005214 <_printf_i+0xd8>
 80051a0:	2973      	cmp	r1, #115	; 0x73
 80051a2:	f000 809d 	beq.w	80052e0 <_printf_i+0x1a4>
 80051a6:	d808      	bhi.n	80051ba <_printf_i+0x7e>
 80051a8:	296f      	cmp	r1, #111	; 0x6f
 80051aa:	d020      	beq.n	80051ee <_printf_i+0xb2>
 80051ac:	2970      	cmp	r1, #112	; 0x70
 80051ae:	d1dd      	bne.n	800516c <_printf_i+0x30>
 80051b0:	6823      	ldr	r3, [r4, #0]
 80051b2:	f043 0320 	orr.w	r3, r3, #32
 80051b6:	6023      	str	r3, [r4, #0]
 80051b8:	e003      	b.n	80051c2 <_printf_i+0x86>
 80051ba:	2975      	cmp	r1, #117	; 0x75
 80051bc:	d017      	beq.n	80051ee <_printf_i+0xb2>
 80051be:	2978      	cmp	r1, #120	; 0x78
 80051c0:	d1d4      	bne.n	800516c <_printf_i+0x30>
 80051c2:	2378      	movs	r3, #120	; 0x78
 80051c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80051c8:	4864      	ldr	r0, [pc, #400]	; (800535c <_printf_i+0x220>)
 80051ca:	e055      	b.n	8005278 <_printf_i+0x13c>
 80051cc:	6813      	ldr	r3, [r2, #0]
 80051ce:	1d19      	adds	r1, r3, #4
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	6011      	str	r1, [r2, #0]
 80051d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051dc:	2301      	movs	r3, #1
 80051de:	e08c      	b.n	80052fa <_printf_i+0x1be>
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	6011      	str	r1, [r2, #0]
 80051e4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80051e8:	bf18      	it	ne
 80051ea:	b21b      	sxthne	r3, r3
 80051ec:	e7cf      	b.n	800518e <_printf_i+0x52>
 80051ee:	6813      	ldr	r3, [r2, #0]
 80051f0:	6825      	ldr	r5, [r4, #0]
 80051f2:	1d18      	adds	r0, r3, #4
 80051f4:	6010      	str	r0, [r2, #0]
 80051f6:	0628      	lsls	r0, r5, #24
 80051f8:	d501      	bpl.n	80051fe <_printf_i+0xc2>
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	e002      	b.n	8005204 <_printf_i+0xc8>
 80051fe:	0668      	lsls	r0, r5, #25
 8005200:	d5fb      	bpl.n	80051fa <_printf_i+0xbe>
 8005202:	881b      	ldrh	r3, [r3, #0]
 8005204:	4854      	ldr	r0, [pc, #336]	; (8005358 <_printf_i+0x21c>)
 8005206:	296f      	cmp	r1, #111	; 0x6f
 8005208:	bf14      	ite	ne
 800520a:	220a      	movne	r2, #10
 800520c:	2208      	moveq	r2, #8
 800520e:	2100      	movs	r1, #0
 8005210:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005214:	6865      	ldr	r5, [r4, #4]
 8005216:	60a5      	str	r5, [r4, #8]
 8005218:	2d00      	cmp	r5, #0
 800521a:	f2c0 8095 	blt.w	8005348 <_printf_i+0x20c>
 800521e:	6821      	ldr	r1, [r4, #0]
 8005220:	f021 0104 	bic.w	r1, r1, #4
 8005224:	6021      	str	r1, [r4, #0]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d13d      	bne.n	80052a6 <_printf_i+0x16a>
 800522a:	2d00      	cmp	r5, #0
 800522c:	f040 808e 	bne.w	800534c <_printf_i+0x210>
 8005230:	4665      	mov	r5, ip
 8005232:	2a08      	cmp	r2, #8
 8005234:	d10b      	bne.n	800524e <_printf_i+0x112>
 8005236:	6823      	ldr	r3, [r4, #0]
 8005238:	07db      	lsls	r3, r3, #31
 800523a:	d508      	bpl.n	800524e <_printf_i+0x112>
 800523c:	6923      	ldr	r3, [r4, #16]
 800523e:	6862      	ldr	r2, [r4, #4]
 8005240:	429a      	cmp	r2, r3
 8005242:	bfde      	ittt	le
 8005244:	2330      	movle	r3, #48	; 0x30
 8005246:	f805 3c01 	strble.w	r3, [r5, #-1]
 800524a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800524e:	ebac 0305 	sub.w	r3, ip, r5
 8005252:	6123      	str	r3, [r4, #16]
 8005254:	f8cd 8000 	str.w	r8, [sp]
 8005258:	463b      	mov	r3, r7
 800525a:	aa03      	add	r2, sp, #12
 800525c:	4621      	mov	r1, r4
 800525e:	4630      	mov	r0, r6
 8005260:	f7ff fef6 	bl	8005050 <_printf_common>
 8005264:	3001      	adds	r0, #1
 8005266:	d14d      	bne.n	8005304 <_printf_i+0x1c8>
 8005268:	f04f 30ff 	mov.w	r0, #4294967295
 800526c:	b005      	add	sp, #20
 800526e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005272:	4839      	ldr	r0, [pc, #228]	; (8005358 <_printf_i+0x21c>)
 8005274:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005278:	6813      	ldr	r3, [r2, #0]
 800527a:	6821      	ldr	r1, [r4, #0]
 800527c:	1d1d      	adds	r5, r3, #4
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	6015      	str	r5, [r2, #0]
 8005282:	060a      	lsls	r2, r1, #24
 8005284:	d50b      	bpl.n	800529e <_printf_i+0x162>
 8005286:	07ca      	lsls	r2, r1, #31
 8005288:	bf44      	itt	mi
 800528a:	f041 0120 	orrmi.w	r1, r1, #32
 800528e:	6021      	strmi	r1, [r4, #0]
 8005290:	b91b      	cbnz	r3, 800529a <_printf_i+0x15e>
 8005292:	6822      	ldr	r2, [r4, #0]
 8005294:	f022 0220 	bic.w	r2, r2, #32
 8005298:	6022      	str	r2, [r4, #0]
 800529a:	2210      	movs	r2, #16
 800529c:	e7b7      	b.n	800520e <_printf_i+0xd2>
 800529e:	064d      	lsls	r5, r1, #25
 80052a0:	bf48      	it	mi
 80052a2:	b29b      	uxthmi	r3, r3
 80052a4:	e7ef      	b.n	8005286 <_printf_i+0x14a>
 80052a6:	4665      	mov	r5, ip
 80052a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80052ac:	fb02 3311 	mls	r3, r2, r1, r3
 80052b0:	5cc3      	ldrb	r3, [r0, r3]
 80052b2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80052b6:	460b      	mov	r3, r1
 80052b8:	2900      	cmp	r1, #0
 80052ba:	d1f5      	bne.n	80052a8 <_printf_i+0x16c>
 80052bc:	e7b9      	b.n	8005232 <_printf_i+0xf6>
 80052be:	6813      	ldr	r3, [r2, #0]
 80052c0:	6825      	ldr	r5, [r4, #0]
 80052c2:	6961      	ldr	r1, [r4, #20]
 80052c4:	1d18      	adds	r0, r3, #4
 80052c6:	6010      	str	r0, [r2, #0]
 80052c8:	0628      	lsls	r0, r5, #24
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	d501      	bpl.n	80052d2 <_printf_i+0x196>
 80052ce:	6019      	str	r1, [r3, #0]
 80052d0:	e002      	b.n	80052d8 <_printf_i+0x19c>
 80052d2:	066a      	lsls	r2, r5, #25
 80052d4:	d5fb      	bpl.n	80052ce <_printf_i+0x192>
 80052d6:	8019      	strh	r1, [r3, #0]
 80052d8:	2300      	movs	r3, #0
 80052da:	6123      	str	r3, [r4, #16]
 80052dc:	4665      	mov	r5, ip
 80052de:	e7b9      	b.n	8005254 <_printf_i+0x118>
 80052e0:	6813      	ldr	r3, [r2, #0]
 80052e2:	1d19      	adds	r1, r3, #4
 80052e4:	6011      	str	r1, [r2, #0]
 80052e6:	681d      	ldr	r5, [r3, #0]
 80052e8:	6862      	ldr	r2, [r4, #4]
 80052ea:	2100      	movs	r1, #0
 80052ec:	4628      	mov	r0, r5
 80052ee:	f7fa ff77 	bl	80001e0 <memchr>
 80052f2:	b108      	cbz	r0, 80052f8 <_printf_i+0x1bc>
 80052f4:	1b40      	subs	r0, r0, r5
 80052f6:	6060      	str	r0, [r4, #4]
 80052f8:	6863      	ldr	r3, [r4, #4]
 80052fa:	6123      	str	r3, [r4, #16]
 80052fc:	2300      	movs	r3, #0
 80052fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005302:	e7a7      	b.n	8005254 <_printf_i+0x118>
 8005304:	6923      	ldr	r3, [r4, #16]
 8005306:	462a      	mov	r2, r5
 8005308:	4639      	mov	r1, r7
 800530a:	4630      	mov	r0, r6
 800530c:	47c0      	blx	r8
 800530e:	3001      	adds	r0, #1
 8005310:	d0aa      	beq.n	8005268 <_printf_i+0x12c>
 8005312:	6823      	ldr	r3, [r4, #0]
 8005314:	079b      	lsls	r3, r3, #30
 8005316:	d413      	bmi.n	8005340 <_printf_i+0x204>
 8005318:	68e0      	ldr	r0, [r4, #12]
 800531a:	9b03      	ldr	r3, [sp, #12]
 800531c:	4298      	cmp	r0, r3
 800531e:	bfb8      	it	lt
 8005320:	4618      	movlt	r0, r3
 8005322:	e7a3      	b.n	800526c <_printf_i+0x130>
 8005324:	2301      	movs	r3, #1
 8005326:	464a      	mov	r2, r9
 8005328:	4639      	mov	r1, r7
 800532a:	4630      	mov	r0, r6
 800532c:	47c0      	blx	r8
 800532e:	3001      	adds	r0, #1
 8005330:	d09a      	beq.n	8005268 <_printf_i+0x12c>
 8005332:	3501      	adds	r5, #1
 8005334:	68e3      	ldr	r3, [r4, #12]
 8005336:	9a03      	ldr	r2, [sp, #12]
 8005338:	1a9b      	subs	r3, r3, r2
 800533a:	42ab      	cmp	r3, r5
 800533c:	dcf2      	bgt.n	8005324 <_printf_i+0x1e8>
 800533e:	e7eb      	b.n	8005318 <_printf_i+0x1dc>
 8005340:	2500      	movs	r5, #0
 8005342:	f104 0919 	add.w	r9, r4, #25
 8005346:	e7f5      	b.n	8005334 <_printf_i+0x1f8>
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1ac      	bne.n	80052a6 <_printf_i+0x16a>
 800534c:	7803      	ldrb	r3, [r0, #0]
 800534e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005352:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005356:	e76c      	b.n	8005232 <_printf_i+0xf6>
 8005358:	08009baf 	.word	0x08009baf
 800535c:	08009bc0 	.word	0x08009bc0

08005360 <_scanf_float>:
 8005360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005364:	469a      	mov	sl, r3
 8005366:	688b      	ldr	r3, [r1, #8]
 8005368:	4616      	mov	r6, r2
 800536a:	1e5a      	subs	r2, r3, #1
 800536c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005370:	b087      	sub	sp, #28
 8005372:	bf83      	ittte	hi
 8005374:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8005378:	189b      	addhi	r3, r3, r2
 800537a:	9301      	strhi	r3, [sp, #4]
 800537c:	2300      	movls	r3, #0
 800537e:	bf86      	itte	hi
 8005380:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005384:	608b      	strhi	r3, [r1, #8]
 8005386:	9301      	strls	r3, [sp, #4]
 8005388:	680b      	ldr	r3, [r1, #0]
 800538a:	4688      	mov	r8, r1
 800538c:	f04f 0b00 	mov.w	fp, #0
 8005390:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005394:	f848 3b1c 	str.w	r3, [r8], #28
 8005398:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800539c:	4607      	mov	r7, r0
 800539e:	460c      	mov	r4, r1
 80053a0:	4645      	mov	r5, r8
 80053a2:	465a      	mov	r2, fp
 80053a4:	46d9      	mov	r9, fp
 80053a6:	f8cd b008 	str.w	fp, [sp, #8]
 80053aa:	68a1      	ldr	r1, [r4, #8]
 80053ac:	b181      	cbz	r1, 80053d0 <_scanf_float+0x70>
 80053ae:	6833      	ldr	r3, [r6, #0]
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	2b49      	cmp	r3, #73	; 0x49
 80053b4:	d071      	beq.n	800549a <_scanf_float+0x13a>
 80053b6:	d84d      	bhi.n	8005454 <_scanf_float+0xf4>
 80053b8:	2b39      	cmp	r3, #57	; 0x39
 80053ba:	d840      	bhi.n	800543e <_scanf_float+0xde>
 80053bc:	2b31      	cmp	r3, #49	; 0x31
 80053be:	f080 8088 	bcs.w	80054d2 <_scanf_float+0x172>
 80053c2:	2b2d      	cmp	r3, #45	; 0x2d
 80053c4:	f000 8090 	beq.w	80054e8 <_scanf_float+0x188>
 80053c8:	d815      	bhi.n	80053f6 <_scanf_float+0x96>
 80053ca:	2b2b      	cmp	r3, #43	; 0x2b
 80053cc:	f000 808c 	beq.w	80054e8 <_scanf_float+0x188>
 80053d0:	f1b9 0f00 	cmp.w	r9, #0
 80053d4:	d003      	beq.n	80053de <_scanf_float+0x7e>
 80053d6:	6823      	ldr	r3, [r4, #0]
 80053d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053dc:	6023      	str	r3, [r4, #0]
 80053de:	3a01      	subs	r2, #1
 80053e0:	2a01      	cmp	r2, #1
 80053e2:	f200 80ea 	bhi.w	80055ba <_scanf_float+0x25a>
 80053e6:	4545      	cmp	r5, r8
 80053e8:	f200 80dc 	bhi.w	80055a4 <_scanf_float+0x244>
 80053ec:	2601      	movs	r6, #1
 80053ee:	4630      	mov	r0, r6
 80053f0:	b007      	add	sp, #28
 80053f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053f6:	2b2e      	cmp	r3, #46	; 0x2e
 80053f8:	f000 809f 	beq.w	800553a <_scanf_float+0x1da>
 80053fc:	2b30      	cmp	r3, #48	; 0x30
 80053fe:	d1e7      	bne.n	80053d0 <_scanf_float+0x70>
 8005400:	6820      	ldr	r0, [r4, #0]
 8005402:	f410 7f80 	tst.w	r0, #256	; 0x100
 8005406:	d064      	beq.n	80054d2 <_scanf_float+0x172>
 8005408:	9b01      	ldr	r3, [sp, #4]
 800540a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800540e:	6020      	str	r0, [r4, #0]
 8005410:	f109 0901 	add.w	r9, r9, #1
 8005414:	b11b      	cbz	r3, 800541e <_scanf_float+0xbe>
 8005416:	3b01      	subs	r3, #1
 8005418:	3101      	adds	r1, #1
 800541a:	9301      	str	r3, [sp, #4]
 800541c:	60a1      	str	r1, [r4, #8]
 800541e:	68a3      	ldr	r3, [r4, #8]
 8005420:	3b01      	subs	r3, #1
 8005422:	60a3      	str	r3, [r4, #8]
 8005424:	6923      	ldr	r3, [r4, #16]
 8005426:	3301      	adds	r3, #1
 8005428:	6123      	str	r3, [r4, #16]
 800542a:	6873      	ldr	r3, [r6, #4]
 800542c:	3b01      	subs	r3, #1
 800542e:	2b00      	cmp	r3, #0
 8005430:	6073      	str	r3, [r6, #4]
 8005432:	f340 80ac 	ble.w	800558e <_scanf_float+0x22e>
 8005436:	6833      	ldr	r3, [r6, #0]
 8005438:	3301      	adds	r3, #1
 800543a:	6033      	str	r3, [r6, #0]
 800543c:	e7b5      	b.n	80053aa <_scanf_float+0x4a>
 800543e:	2b45      	cmp	r3, #69	; 0x45
 8005440:	f000 8085 	beq.w	800554e <_scanf_float+0x1ee>
 8005444:	2b46      	cmp	r3, #70	; 0x46
 8005446:	d06a      	beq.n	800551e <_scanf_float+0x1be>
 8005448:	2b41      	cmp	r3, #65	; 0x41
 800544a:	d1c1      	bne.n	80053d0 <_scanf_float+0x70>
 800544c:	2a01      	cmp	r2, #1
 800544e:	d1bf      	bne.n	80053d0 <_scanf_float+0x70>
 8005450:	2202      	movs	r2, #2
 8005452:	e046      	b.n	80054e2 <_scanf_float+0x182>
 8005454:	2b65      	cmp	r3, #101	; 0x65
 8005456:	d07a      	beq.n	800554e <_scanf_float+0x1ee>
 8005458:	d818      	bhi.n	800548c <_scanf_float+0x12c>
 800545a:	2b54      	cmp	r3, #84	; 0x54
 800545c:	d066      	beq.n	800552c <_scanf_float+0x1cc>
 800545e:	d811      	bhi.n	8005484 <_scanf_float+0x124>
 8005460:	2b4e      	cmp	r3, #78	; 0x4e
 8005462:	d1b5      	bne.n	80053d0 <_scanf_float+0x70>
 8005464:	2a00      	cmp	r2, #0
 8005466:	d146      	bne.n	80054f6 <_scanf_float+0x196>
 8005468:	f1b9 0f00 	cmp.w	r9, #0
 800546c:	d145      	bne.n	80054fa <_scanf_float+0x19a>
 800546e:	6821      	ldr	r1, [r4, #0]
 8005470:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8005474:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8005478:	d13f      	bne.n	80054fa <_scanf_float+0x19a>
 800547a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800547e:	6021      	str	r1, [r4, #0]
 8005480:	2201      	movs	r2, #1
 8005482:	e02e      	b.n	80054e2 <_scanf_float+0x182>
 8005484:	2b59      	cmp	r3, #89	; 0x59
 8005486:	d01e      	beq.n	80054c6 <_scanf_float+0x166>
 8005488:	2b61      	cmp	r3, #97	; 0x61
 800548a:	e7de      	b.n	800544a <_scanf_float+0xea>
 800548c:	2b6e      	cmp	r3, #110	; 0x6e
 800548e:	d0e9      	beq.n	8005464 <_scanf_float+0x104>
 8005490:	d815      	bhi.n	80054be <_scanf_float+0x15e>
 8005492:	2b66      	cmp	r3, #102	; 0x66
 8005494:	d043      	beq.n	800551e <_scanf_float+0x1be>
 8005496:	2b69      	cmp	r3, #105	; 0x69
 8005498:	d19a      	bne.n	80053d0 <_scanf_float+0x70>
 800549a:	f1bb 0f00 	cmp.w	fp, #0
 800549e:	d138      	bne.n	8005512 <_scanf_float+0x1b2>
 80054a0:	f1b9 0f00 	cmp.w	r9, #0
 80054a4:	d197      	bne.n	80053d6 <_scanf_float+0x76>
 80054a6:	6821      	ldr	r1, [r4, #0]
 80054a8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80054ac:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80054b0:	d195      	bne.n	80053de <_scanf_float+0x7e>
 80054b2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80054b6:	6021      	str	r1, [r4, #0]
 80054b8:	f04f 0b01 	mov.w	fp, #1
 80054bc:	e011      	b.n	80054e2 <_scanf_float+0x182>
 80054be:	2b74      	cmp	r3, #116	; 0x74
 80054c0:	d034      	beq.n	800552c <_scanf_float+0x1cc>
 80054c2:	2b79      	cmp	r3, #121	; 0x79
 80054c4:	d184      	bne.n	80053d0 <_scanf_float+0x70>
 80054c6:	f1bb 0f07 	cmp.w	fp, #7
 80054ca:	d181      	bne.n	80053d0 <_scanf_float+0x70>
 80054cc:	f04f 0b08 	mov.w	fp, #8
 80054d0:	e007      	b.n	80054e2 <_scanf_float+0x182>
 80054d2:	eb12 0f0b 	cmn.w	r2, fp
 80054d6:	f47f af7b 	bne.w	80053d0 <_scanf_float+0x70>
 80054da:	6821      	ldr	r1, [r4, #0]
 80054dc:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80054e0:	6021      	str	r1, [r4, #0]
 80054e2:	702b      	strb	r3, [r5, #0]
 80054e4:	3501      	adds	r5, #1
 80054e6:	e79a      	b.n	800541e <_scanf_float+0xbe>
 80054e8:	6821      	ldr	r1, [r4, #0]
 80054ea:	0608      	lsls	r0, r1, #24
 80054ec:	f57f af70 	bpl.w	80053d0 <_scanf_float+0x70>
 80054f0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80054f4:	e7f4      	b.n	80054e0 <_scanf_float+0x180>
 80054f6:	2a02      	cmp	r2, #2
 80054f8:	d047      	beq.n	800558a <_scanf_float+0x22a>
 80054fa:	f1bb 0f01 	cmp.w	fp, #1
 80054fe:	d003      	beq.n	8005508 <_scanf_float+0x1a8>
 8005500:	f1bb 0f04 	cmp.w	fp, #4
 8005504:	f47f af64 	bne.w	80053d0 <_scanf_float+0x70>
 8005508:	f10b 0b01 	add.w	fp, fp, #1
 800550c:	fa5f fb8b 	uxtb.w	fp, fp
 8005510:	e7e7      	b.n	80054e2 <_scanf_float+0x182>
 8005512:	f1bb 0f03 	cmp.w	fp, #3
 8005516:	d0f7      	beq.n	8005508 <_scanf_float+0x1a8>
 8005518:	f1bb 0f05 	cmp.w	fp, #5
 800551c:	e7f2      	b.n	8005504 <_scanf_float+0x1a4>
 800551e:	f1bb 0f02 	cmp.w	fp, #2
 8005522:	f47f af55 	bne.w	80053d0 <_scanf_float+0x70>
 8005526:	f04f 0b03 	mov.w	fp, #3
 800552a:	e7da      	b.n	80054e2 <_scanf_float+0x182>
 800552c:	f1bb 0f06 	cmp.w	fp, #6
 8005530:	f47f af4e 	bne.w	80053d0 <_scanf_float+0x70>
 8005534:	f04f 0b07 	mov.w	fp, #7
 8005538:	e7d3      	b.n	80054e2 <_scanf_float+0x182>
 800553a:	6821      	ldr	r1, [r4, #0]
 800553c:	0588      	lsls	r0, r1, #22
 800553e:	f57f af47 	bpl.w	80053d0 <_scanf_float+0x70>
 8005542:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8005546:	6021      	str	r1, [r4, #0]
 8005548:	f8cd 9008 	str.w	r9, [sp, #8]
 800554c:	e7c9      	b.n	80054e2 <_scanf_float+0x182>
 800554e:	6821      	ldr	r1, [r4, #0]
 8005550:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8005554:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8005558:	d006      	beq.n	8005568 <_scanf_float+0x208>
 800555a:	0548      	lsls	r0, r1, #21
 800555c:	f57f af38 	bpl.w	80053d0 <_scanf_float+0x70>
 8005560:	f1b9 0f00 	cmp.w	r9, #0
 8005564:	f43f af3b 	beq.w	80053de <_scanf_float+0x7e>
 8005568:	0588      	lsls	r0, r1, #22
 800556a:	bf58      	it	pl
 800556c:	9802      	ldrpl	r0, [sp, #8]
 800556e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8005572:	bf58      	it	pl
 8005574:	eba9 0000 	subpl.w	r0, r9, r0
 8005578:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800557c:	bf58      	it	pl
 800557e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8005582:	6021      	str	r1, [r4, #0]
 8005584:	f04f 0900 	mov.w	r9, #0
 8005588:	e7ab      	b.n	80054e2 <_scanf_float+0x182>
 800558a:	2203      	movs	r2, #3
 800558c:	e7a9      	b.n	80054e2 <_scanf_float+0x182>
 800558e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005592:	9205      	str	r2, [sp, #20]
 8005594:	4631      	mov	r1, r6
 8005596:	4638      	mov	r0, r7
 8005598:	4798      	blx	r3
 800559a:	9a05      	ldr	r2, [sp, #20]
 800559c:	2800      	cmp	r0, #0
 800559e:	f43f af04 	beq.w	80053aa <_scanf_float+0x4a>
 80055a2:	e715      	b.n	80053d0 <_scanf_float+0x70>
 80055a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80055a8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80055ac:	4632      	mov	r2, r6
 80055ae:	4638      	mov	r0, r7
 80055b0:	4798      	blx	r3
 80055b2:	6923      	ldr	r3, [r4, #16]
 80055b4:	3b01      	subs	r3, #1
 80055b6:	6123      	str	r3, [r4, #16]
 80055b8:	e715      	b.n	80053e6 <_scanf_float+0x86>
 80055ba:	f10b 33ff 	add.w	r3, fp, #4294967295
 80055be:	2b06      	cmp	r3, #6
 80055c0:	d80a      	bhi.n	80055d8 <_scanf_float+0x278>
 80055c2:	f1bb 0f02 	cmp.w	fp, #2
 80055c6:	d968      	bls.n	800569a <_scanf_float+0x33a>
 80055c8:	f1ab 0b03 	sub.w	fp, fp, #3
 80055cc:	fa5f fb8b 	uxtb.w	fp, fp
 80055d0:	eba5 0b0b 	sub.w	fp, r5, fp
 80055d4:	455d      	cmp	r5, fp
 80055d6:	d14b      	bne.n	8005670 <_scanf_float+0x310>
 80055d8:	6823      	ldr	r3, [r4, #0]
 80055da:	05da      	lsls	r2, r3, #23
 80055dc:	d51f      	bpl.n	800561e <_scanf_float+0x2be>
 80055de:	055b      	lsls	r3, r3, #21
 80055e0:	d468      	bmi.n	80056b4 <_scanf_float+0x354>
 80055e2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80055e6:	6923      	ldr	r3, [r4, #16]
 80055e8:	2965      	cmp	r1, #101	; 0x65
 80055ea:	f103 33ff 	add.w	r3, r3, #4294967295
 80055ee:	f105 3bff 	add.w	fp, r5, #4294967295
 80055f2:	6123      	str	r3, [r4, #16]
 80055f4:	d00d      	beq.n	8005612 <_scanf_float+0x2b2>
 80055f6:	2945      	cmp	r1, #69	; 0x45
 80055f8:	d00b      	beq.n	8005612 <_scanf_float+0x2b2>
 80055fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80055fe:	4632      	mov	r2, r6
 8005600:	4638      	mov	r0, r7
 8005602:	4798      	blx	r3
 8005604:	6923      	ldr	r3, [r4, #16]
 8005606:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800560a:	3b01      	subs	r3, #1
 800560c:	f1a5 0b02 	sub.w	fp, r5, #2
 8005610:	6123      	str	r3, [r4, #16]
 8005612:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005616:	4632      	mov	r2, r6
 8005618:	4638      	mov	r0, r7
 800561a:	4798      	blx	r3
 800561c:	465d      	mov	r5, fp
 800561e:	6826      	ldr	r6, [r4, #0]
 8005620:	f016 0610 	ands.w	r6, r6, #16
 8005624:	d17a      	bne.n	800571c <_scanf_float+0x3bc>
 8005626:	702e      	strb	r6, [r5, #0]
 8005628:	6823      	ldr	r3, [r4, #0]
 800562a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800562e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005632:	d142      	bne.n	80056ba <_scanf_float+0x35a>
 8005634:	9b02      	ldr	r3, [sp, #8]
 8005636:	eba9 0303 	sub.w	r3, r9, r3
 800563a:	425a      	negs	r2, r3
 800563c:	2b00      	cmp	r3, #0
 800563e:	d149      	bne.n	80056d4 <_scanf_float+0x374>
 8005640:	2200      	movs	r2, #0
 8005642:	4641      	mov	r1, r8
 8005644:	4638      	mov	r0, r7
 8005646:	f000 fed7 	bl	80063f8 <_strtod_r>
 800564a:	6825      	ldr	r5, [r4, #0]
 800564c:	f8da 3000 	ldr.w	r3, [sl]
 8005650:	f015 0f02 	tst.w	r5, #2
 8005654:	f103 0204 	add.w	r2, r3, #4
 8005658:	ec59 8b10 	vmov	r8, r9, d0
 800565c:	f8ca 2000 	str.w	r2, [sl]
 8005660:	d043      	beq.n	80056ea <_scanf_float+0x38a>
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	e9c3 8900 	strd	r8, r9, [r3]
 8005668:	68e3      	ldr	r3, [r4, #12]
 800566a:	3301      	adds	r3, #1
 800566c:	60e3      	str	r3, [r4, #12]
 800566e:	e6be      	b.n	80053ee <_scanf_float+0x8e>
 8005670:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005674:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005678:	4632      	mov	r2, r6
 800567a:	4638      	mov	r0, r7
 800567c:	4798      	blx	r3
 800567e:	6923      	ldr	r3, [r4, #16]
 8005680:	3b01      	subs	r3, #1
 8005682:	6123      	str	r3, [r4, #16]
 8005684:	e7a6      	b.n	80055d4 <_scanf_float+0x274>
 8005686:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800568a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800568e:	4632      	mov	r2, r6
 8005690:	4638      	mov	r0, r7
 8005692:	4798      	blx	r3
 8005694:	6923      	ldr	r3, [r4, #16]
 8005696:	3b01      	subs	r3, #1
 8005698:	6123      	str	r3, [r4, #16]
 800569a:	4545      	cmp	r5, r8
 800569c:	d8f3      	bhi.n	8005686 <_scanf_float+0x326>
 800569e:	e6a5      	b.n	80053ec <_scanf_float+0x8c>
 80056a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80056a4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80056a8:	4632      	mov	r2, r6
 80056aa:	4638      	mov	r0, r7
 80056ac:	4798      	blx	r3
 80056ae:	6923      	ldr	r3, [r4, #16]
 80056b0:	3b01      	subs	r3, #1
 80056b2:	6123      	str	r3, [r4, #16]
 80056b4:	4545      	cmp	r5, r8
 80056b6:	d8f3      	bhi.n	80056a0 <_scanf_float+0x340>
 80056b8:	e698      	b.n	80053ec <_scanf_float+0x8c>
 80056ba:	9b03      	ldr	r3, [sp, #12]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d0bf      	beq.n	8005640 <_scanf_float+0x2e0>
 80056c0:	9904      	ldr	r1, [sp, #16]
 80056c2:	230a      	movs	r3, #10
 80056c4:	4632      	mov	r2, r6
 80056c6:	3101      	adds	r1, #1
 80056c8:	4638      	mov	r0, r7
 80056ca:	f000 ff21 	bl	8006510 <_strtol_r>
 80056ce:	9b03      	ldr	r3, [sp, #12]
 80056d0:	9d04      	ldr	r5, [sp, #16]
 80056d2:	1ac2      	subs	r2, r0, r3
 80056d4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80056d8:	429d      	cmp	r5, r3
 80056da:	bf28      	it	cs
 80056dc:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80056e0:	490f      	ldr	r1, [pc, #60]	; (8005720 <_scanf_float+0x3c0>)
 80056e2:	4628      	mov	r0, r5
 80056e4:	f000 f858 	bl	8005798 <siprintf>
 80056e8:	e7aa      	b.n	8005640 <_scanf_float+0x2e0>
 80056ea:	f015 0504 	ands.w	r5, r5, #4
 80056ee:	d1b8      	bne.n	8005662 <_scanf_float+0x302>
 80056f0:	681f      	ldr	r7, [r3, #0]
 80056f2:	ee10 2a10 	vmov	r2, s0
 80056f6:	464b      	mov	r3, r9
 80056f8:	ee10 0a10 	vmov	r0, s0
 80056fc:	4649      	mov	r1, r9
 80056fe:	f7fb fa15 	bl	8000b2c <__aeabi_dcmpun>
 8005702:	b128      	cbz	r0, 8005710 <_scanf_float+0x3b0>
 8005704:	4628      	mov	r0, r5
 8005706:	f000 f80d 	bl	8005724 <nanf>
 800570a:	ed87 0a00 	vstr	s0, [r7]
 800570e:	e7ab      	b.n	8005668 <_scanf_float+0x308>
 8005710:	4640      	mov	r0, r8
 8005712:	4649      	mov	r1, r9
 8005714:	f7fb fa68 	bl	8000be8 <__aeabi_d2f>
 8005718:	6038      	str	r0, [r7, #0]
 800571a:	e7a5      	b.n	8005668 <_scanf_float+0x308>
 800571c:	2600      	movs	r6, #0
 800571e:	e666      	b.n	80053ee <_scanf_float+0x8e>
 8005720:	08009bd1 	.word	0x08009bd1

08005724 <nanf>:
 8005724:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800572c <nanf+0x8>
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	7fc00000 	.word	0x7fc00000

08005730 <sniprintf>:
 8005730:	b40c      	push	{r2, r3}
 8005732:	b530      	push	{r4, r5, lr}
 8005734:	4b17      	ldr	r3, [pc, #92]	; (8005794 <sniprintf+0x64>)
 8005736:	1e0c      	subs	r4, r1, #0
 8005738:	b09d      	sub	sp, #116	; 0x74
 800573a:	681d      	ldr	r5, [r3, #0]
 800573c:	da08      	bge.n	8005750 <sniprintf+0x20>
 800573e:	238b      	movs	r3, #139	; 0x8b
 8005740:	602b      	str	r3, [r5, #0]
 8005742:	f04f 30ff 	mov.w	r0, #4294967295
 8005746:	b01d      	add	sp, #116	; 0x74
 8005748:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800574c:	b002      	add	sp, #8
 800574e:	4770      	bx	lr
 8005750:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005754:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005758:	bf14      	ite	ne
 800575a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800575e:	4623      	moveq	r3, r4
 8005760:	9304      	str	r3, [sp, #16]
 8005762:	9307      	str	r3, [sp, #28]
 8005764:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005768:	9002      	str	r0, [sp, #8]
 800576a:	9006      	str	r0, [sp, #24]
 800576c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005770:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005772:	ab21      	add	r3, sp, #132	; 0x84
 8005774:	a902      	add	r1, sp, #8
 8005776:	4628      	mov	r0, r5
 8005778:	9301      	str	r3, [sp, #4]
 800577a:	f002 fd8f 	bl	800829c <_svfiprintf_r>
 800577e:	1c43      	adds	r3, r0, #1
 8005780:	bfbc      	itt	lt
 8005782:	238b      	movlt	r3, #139	; 0x8b
 8005784:	602b      	strlt	r3, [r5, #0]
 8005786:	2c00      	cmp	r4, #0
 8005788:	d0dd      	beq.n	8005746 <sniprintf+0x16>
 800578a:	9b02      	ldr	r3, [sp, #8]
 800578c:	2200      	movs	r2, #0
 800578e:	701a      	strb	r2, [r3, #0]
 8005790:	e7d9      	b.n	8005746 <sniprintf+0x16>
 8005792:	bf00      	nop
 8005794:	2000000c 	.word	0x2000000c

08005798 <siprintf>:
 8005798:	b40e      	push	{r1, r2, r3}
 800579a:	b500      	push	{lr}
 800579c:	b09c      	sub	sp, #112	; 0x70
 800579e:	ab1d      	add	r3, sp, #116	; 0x74
 80057a0:	9002      	str	r0, [sp, #8]
 80057a2:	9006      	str	r0, [sp, #24]
 80057a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80057a8:	4809      	ldr	r0, [pc, #36]	; (80057d0 <siprintf+0x38>)
 80057aa:	9107      	str	r1, [sp, #28]
 80057ac:	9104      	str	r1, [sp, #16]
 80057ae:	4909      	ldr	r1, [pc, #36]	; (80057d4 <siprintf+0x3c>)
 80057b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80057b4:	9105      	str	r1, [sp, #20]
 80057b6:	6800      	ldr	r0, [r0, #0]
 80057b8:	9301      	str	r3, [sp, #4]
 80057ba:	a902      	add	r1, sp, #8
 80057bc:	f002 fd6e 	bl	800829c <_svfiprintf_r>
 80057c0:	9b02      	ldr	r3, [sp, #8]
 80057c2:	2200      	movs	r2, #0
 80057c4:	701a      	strb	r2, [r3, #0]
 80057c6:	b01c      	add	sp, #112	; 0x70
 80057c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80057cc:	b003      	add	sp, #12
 80057ce:	4770      	bx	lr
 80057d0:	2000000c 	.word	0x2000000c
 80057d4:	ffff0208 	.word	0xffff0208

080057d8 <sulp>:
 80057d8:	b570      	push	{r4, r5, r6, lr}
 80057da:	4604      	mov	r4, r0
 80057dc:	460d      	mov	r5, r1
 80057de:	ec45 4b10 	vmov	d0, r4, r5
 80057e2:	4616      	mov	r6, r2
 80057e4:	f002 fb16 	bl	8007e14 <__ulp>
 80057e8:	ec51 0b10 	vmov	r0, r1, d0
 80057ec:	b17e      	cbz	r6, 800580e <sulp+0x36>
 80057ee:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80057f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	dd09      	ble.n	800580e <sulp+0x36>
 80057fa:	051b      	lsls	r3, r3, #20
 80057fc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005800:	2400      	movs	r4, #0
 8005802:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005806:	4622      	mov	r2, r4
 8005808:	462b      	mov	r3, r5
 800580a:	f7fa fef5 	bl	80005f8 <__aeabi_dmul>
 800580e:	bd70      	pop	{r4, r5, r6, pc}

08005810 <_strtod_l>:
 8005810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005814:	461f      	mov	r7, r3
 8005816:	b0a1      	sub	sp, #132	; 0x84
 8005818:	2300      	movs	r3, #0
 800581a:	4681      	mov	r9, r0
 800581c:	4638      	mov	r0, r7
 800581e:	460e      	mov	r6, r1
 8005820:	9217      	str	r2, [sp, #92]	; 0x5c
 8005822:	931c      	str	r3, [sp, #112]	; 0x70
 8005824:	f001 fff5 	bl	8007812 <__localeconv_l>
 8005828:	4680      	mov	r8, r0
 800582a:	6800      	ldr	r0, [r0, #0]
 800582c:	f7fa fcd0 	bl	80001d0 <strlen>
 8005830:	f04f 0a00 	mov.w	sl, #0
 8005834:	4604      	mov	r4, r0
 8005836:	f04f 0b00 	mov.w	fp, #0
 800583a:	961b      	str	r6, [sp, #108]	; 0x6c
 800583c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800583e:	781a      	ldrb	r2, [r3, #0]
 8005840:	2a0d      	cmp	r2, #13
 8005842:	d832      	bhi.n	80058aa <_strtod_l+0x9a>
 8005844:	2a09      	cmp	r2, #9
 8005846:	d236      	bcs.n	80058b6 <_strtod_l+0xa6>
 8005848:	2a00      	cmp	r2, #0
 800584a:	d03e      	beq.n	80058ca <_strtod_l+0xba>
 800584c:	2300      	movs	r3, #0
 800584e:	930d      	str	r3, [sp, #52]	; 0x34
 8005850:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005852:	782b      	ldrb	r3, [r5, #0]
 8005854:	2b30      	cmp	r3, #48	; 0x30
 8005856:	f040 80ac 	bne.w	80059b2 <_strtod_l+0x1a2>
 800585a:	786b      	ldrb	r3, [r5, #1]
 800585c:	2b58      	cmp	r3, #88	; 0x58
 800585e:	d001      	beq.n	8005864 <_strtod_l+0x54>
 8005860:	2b78      	cmp	r3, #120	; 0x78
 8005862:	d167      	bne.n	8005934 <_strtod_l+0x124>
 8005864:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005866:	9301      	str	r3, [sp, #4]
 8005868:	ab1c      	add	r3, sp, #112	; 0x70
 800586a:	9300      	str	r3, [sp, #0]
 800586c:	9702      	str	r7, [sp, #8]
 800586e:	ab1d      	add	r3, sp, #116	; 0x74
 8005870:	4a88      	ldr	r2, [pc, #544]	; (8005a94 <_strtod_l+0x284>)
 8005872:	a91b      	add	r1, sp, #108	; 0x6c
 8005874:	4648      	mov	r0, r9
 8005876:	f001 fcf2 	bl	800725e <__gethex>
 800587a:	f010 0407 	ands.w	r4, r0, #7
 800587e:	4606      	mov	r6, r0
 8005880:	d005      	beq.n	800588e <_strtod_l+0x7e>
 8005882:	2c06      	cmp	r4, #6
 8005884:	d12b      	bne.n	80058de <_strtod_l+0xce>
 8005886:	3501      	adds	r5, #1
 8005888:	2300      	movs	r3, #0
 800588a:	951b      	str	r5, [sp, #108]	; 0x6c
 800588c:	930d      	str	r3, [sp, #52]	; 0x34
 800588e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005890:	2b00      	cmp	r3, #0
 8005892:	f040 859a 	bne.w	80063ca <_strtod_l+0xbba>
 8005896:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005898:	b1e3      	cbz	r3, 80058d4 <_strtod_l+0xc4>
 800589a:	4652      	mov	r2, sl
 800589c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80058a0:	ec43 2b10 	vmov	d0, r2, r3
 80058a4:	b021      	add	sp, #132	; 0x84
 80058a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058aa:	2a2b      	cmp	r2, #43	; 0x2b
 80058ac:	d015      	beq.n	80058da <_strtod_l+0xca>
 80058ae:	2a2d      	cmp	r2, #45	; 0x2d
 80058b0:	d004      	beq.n	80058bc <_strtod_l+0xac>
 80058b2:	2a20      	cmp	r2, #32
 80058b4:	d1ca      	bne.n	800584c <_strtod_l+0x3c>
 80058b6:	3301      	adds	r3, #1
 80058b8:	931b      	str	r3, [sp, #108]	; 0x6c
 80058ba:	e7bf      	b.n	800583c <_strtod_l+0x2c>
 80058bc:	2201      	movs	r2, #1
 80058be:	920d      	str	r2, [sp, #52]	; 0x34
 80058c0:	1c5a      	adds	r2, r3, #1
 80058c2:	921b      	str	r2, [sp, #108]	; 0x6c
 80058c4:	785b      	ldrb	r3, [r3, #1]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1c2      	bne.n	8005850 <_strtod_l+0x40>
 80058ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80058cc:	961b      	str	r6, [sp, #108]	; 0x6c
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	f040 8579 	bne.w	80063c6 <_strtod_l+0xbb6>
 80058d4:	4652      	mov	r2, sl
 80058d6:	465b      	mov	r3, fp
 80058d8:	e7e2      	b.n	80058a0 <_strtod_l+0x90>
 80058da:	2200      	movs	r2, #0
 80058dc:	e7ef      	b.n	80058be <_strtod_l+0xae>
 80058de:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80058e0:	b13a      	cbz	r2, 80058f2 <_strtod_l+0xe2>
 80058e2:	2135      	movs	r1, #53	; 0x35
 80058e4:	a81e      	add	r0, sp, #120	; 0x78
 80058e6:	f002 fb8d 	bl	8008004 <__copybits>
 80058ea:	991c      	ldr	r1, [sp, #112]	; 0x70
 80058ec:	4648      	mov	r0, r9
 80058ee:	f001 fffa 	bl	80078e6 <_Bfree>
 80058f2:	3c01      	subs	r4, #1
 80058f4:	2c04      	cmp	r4, #4
 80058f6:	d806      	bhi.n	8005906 <_strtod_l+0xf6>
 80058f8:	e8df f004 	tbb	[pc, r4]
 80058fc:	1714030a 	.word	0x1714030a
 8005900:	0a          	.byte	0x0a
 8005901:	00          	.byte	0x00
 8005902:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8005906:	0730      	lsls	r0, r6, #28
 8005908:	d5c1      	bpl.n	800588e <_strtod_l+0x7e>
 800590a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800590e:	e7be      	b.n	800588e <_strtod_l+0x7e>
 8005910:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8005914:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005916:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800591a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800591e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005922:	e7f0      	b.n	8005906 <_strtod_l+0xf6>
 8005924:	f8df b170 	ldr.w	fp, [pc, #368]	; 8005a98 <_strtod_l+0x288>
 8005928:	e7ed      	b.n	8005906 <_strtod_l+0xf6>
 800592a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800592e:	f04f 3aff 	mov.w	sl, #4294967295
 8005932:	e7e8      	b.n	8005906 <_strtod_l+0xf6>
 8005934:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005936:	1c5a      	adds	r2, r3, #1
 8005938:	921b      	str	r2, [sp, #108]	; 0x6c
 800593a:	785b      	ldrb	r3, [r3, #1]
 800593c:	2b30      	cmp	r3, #48	; 0x30
 800593e:	d0f9      	beq.n	8005934 <_strtod_l+0x124>
 8005940:	2b00      	cmp	r3, #0
 8005942:	d0a4      	beq.n	800588e <_strtod_l+0x7e>
 8005944:	2301      	movs	r3, #1
 8005946:	2500      	movs	r5, #0
 8005948:	9306      	str	r3, [sp, #24]
 800594a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800594c:	9308      	str	r3, [sp, #32]
 800594e:	9507      	str	r5, [sp, #28]
 8005950:	9505      	str	r5, [sp, #20]
 8005952:	220a      	movs	r2, #10
 8005954:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8005956:	7807      	ldrb	r7, [r0, #0]
 8005958:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800595c:	b2d9      	uxtb	r1, r3
 800595e:	2909      	cmp	r1, #9
 8005960:	d929      	bls.n	80059b6 <_strtod_l+0x1a6>
 8005962:	4622      	mov	r2, r4
 8005964:	f8d8 1000 	ldr.w	r1, [r8]
 8005968:	f002 fda0 	bl	80084ac <strncmp>
 800596c:	2800      	cmp	r0, #0
 800596e:	d031      	beq.n	80059d4 <_strtod_l+0x1c4>
 8005970:	2000      	movs	r0, #0
 8005972:	9c05      	ldr	r4, [sp, #20]
 8005974:	9004      	str	r0, [sp, #16]
 8005976:	463b      	mov	r3, r7
 8005978:	4602      	mov	r2, r0
 800597a:	2b65      	cmp	r3, #101	; 0x65
 800597c:	d001      	beq.n	8005982 <_strtod_l+0x172>
 800597e:	2b45      	cmp	r3, #69	; 0x45
 8005980:	d114      	bne.n	80059ac <_strtod_l+0x19c>
 8005982:	b924      	cbnz	r4, 800598e <_strtod_l+0x17e>
 8005984:	b910      	cbnz	r0, 800598c <_strtod_l+0x17c>
 8005986:	9b06      	ldr	r3, [sp, #24]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d09e      	beq.n	80058ca <_strtod_l+0xba>
 800598c:	2400      	movs	r4, #0
 800598e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8005990:	1c73      	adds	r3, r6, #1
 8005992:	931b      	str	r3, [sp, #108]	; 0x6c
 8005994:	7873      	ldrb	r3, [r6, #1]
 8005996:	2b2b      	cmp	r3, #43	; 0x2b
 8005998:	d078      	beq.n	8005a8c <_strtod_l+0x27c>
 800599a:	2b2d      	cmp	r3, #45	; 0x2d
 800599c:	d070      	beq.n	8005a80 <_strtod_l+0x270>
 800599e:	f04f 0c00 	mov.w	ip, #0
 80059a2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80059a6:	2f09      	cmp	r7, #9
 80059a8:	d97c      	bls.n	8005aa4 <_strtod_l+0x294>
 80059aa:	961b      	str	r6, [sp, #108]	; 0x6c
 80059ac:	f04f 0e00 	mov.w	lr, #0
 80059b0:	e09a      	b.n	8005ae8 <_strtod_l+0x2d8>
 80059b2:	2300      	movs	r3, #0
 80059b4:	e7c7      	b.n	8005946 <_strtod_l+0x136>
 80059b6:	9905      	ldr	r1, [sp, #20]
 80059b8:	2908      	cmp	r1, #8
 80059ba:	bfdd      	ittte	le
 80059bc:	9907      	ldrle	r1, [sp, #28]
 80059be:	fb02 3301 	mlale	r3, r2, r1, r3
 80059c2:	9307      	strle	r3, [sp, #28]
 80059c4:	fb02 3505 	mlagt	r5, r2, r5, r3
 80059c8:	9b05      	ldr	r3, [sp, #20]
 80059ca:	3001      	adds	r0, #1
 80059cc:	3301      	adds	r3, #1
 80059ce:	9305      	str	r3, [sp, #20]
 80059d0:	901b      	str	r0, [sp, #108]	; 0x6c
 80059d2:	e7bf      	b.n	8005954 <_strtod_l+0x144>
 80059d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80059d6:	191a      	adds	r2, r3, r4
 80059d8:	921b      	str	r2, [sp, #108]	; 0x6c
 80059da:	9a05      	ldr	r2, [sp, #20]
 80059dc:	5d1b      	ldrb	r3, [r3, r4]
 80059de:	2a00      	cmp	r2, #0
 80059e0:	d037      	beq.n	8005a52 <_strtod_l+0x242>
 80059e2:	9c05      	ldr	r4, [sp, #20]
 80059e4:	4602      	mov	r2, r0
 80059e6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80059ea:	2909      	cmp	r1, #9
 80059ec:	d913      	bls.n	8005a16 <_strtod_l+0x206>
 80059ee:	2101      	movs	r1, #1
 80059f0:	9104      	str	r1, [sp, #16]
 80059f2:	e7c2      	b.n	800597a <_strtod_l+0x16a>
 80059f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80059f6:	1c5a      	adds	r2, r3, #1
 80059f8:	921b      	str	r2, [sp, #108]	; 0x6c
 80059fa:	785b      	ldrb	r3, [r3, #1]
 80059fc:	3001      	adds	r0, #1
 80059fe:	2b30      	cmp	r3, #48	; 0x30
 8005a00:	d0f8      	beq.n	80059f4 <_strtod_l+0x1e4>
 8005a02:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8005a06:	2a08      	cmp	r2, #8
 8005a08:	f200 84e4 	bhi.w	80063d4 <_strtod_l+0xbc4>
 8005a0c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005a0e:	9208      	str	r2, [sp, #32]
 8005a10:	4602      	mov	r2, r0
 8005a12:	2000      	movs	r0, #0
 8005a14:	4604      	mov	r4, r0
 8005a16:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8005a1a:	f100 0101 	add.w	r1, r0, #1
 8005a1e:	d012      	beq.n	8005a46 <_strtod_l+0x236>
 8005a20:	440a      	add	r2, r1
 8005a22:	eb00 0c04 	add.w	ip, r0, r4
 8005a26:	4621      	mov	r1, r4
 8005a28:	270a      	movs	r7, #10
 8005a2a:	458c      	cmp	ip, r1
 8005a2c:	d113      	bne.n	8005a56 <_strtod_l+0x246>
 8005a2e:	1821      	adds	r1, r4, r0
 8005a30:	2908      	cmp	r1, #8
 8005a32:	f104 0401 	add.w	r4, r4, #1
 8005a36:	4404      	add	r4, r0
 8005a38:	dc19      	bgt.n	8005a6e <_strtod_l+0x25e>
 8005a3a:	9b07      	ldr	r3, [sp, #28]
 8005a3c:	210a      	movs	r1, #10
 8005a3e:	fb01 e303 	mla	r3, r1, r3, lr
 8005a42:	9307      	str	r3, [sp, #28]
 8005a44:	2100      	movs	r1, #0
 8005a46:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005a48:	1c58      	adds	r0, r3, #1
 8005a4a:	901b      	str	r0, [sp, #108]	; 0x6c
 8005a4c:	785b      	ldrb	r3, [r3, #1]
 8005a4e:	4608      	mov	r0, r1
 8005a50:	e7c9      	b.n	80059e6 <_strtod_l+0x1d6>
 8005a52:	9805      	ldr	r0, [sp, #20]
 8005a54:	e7d3      	b.n	80059fe <_strtod_l+0x1ee>
 8005a56:	2908      	cmp	r1, #8
 8005a58:	f101 0101 	add.w	r1, r1, #1
 8005a5c:	dc03      	bgt.n	8005a66 <_strtod_l+0x256>
 8005a5e:	9b07      	ldr	r3, [sp, #28]
 8005a60:	437b      	muls	r3, r7
 8005a62:	9307      	str	r3, [sp, #28]
 8005a64:	e7e1      	b.n	8005a2a <_strtod_l+0x21a>
 8005a66:	2910      	cmp	r1, #16
 8005a68:	bfd8      	it	le
 8005a6a:	437d      	mulle	r5, r7
 8005a6c:	e7dd      	b.n	8005a2a <_strtod_l+0x21a>
 8005a6e:	2c10      	cmp	r4, #16
 8005a70:	bfdc      	itt	le
 8005a72:	210a      	movle	r1, #10
 8005a74:	fb01 e505 	mlale	r5, r1, r5, lr
 8005a78:	e7e4      	b.n	8005a44 <_strtod_l+0x234>
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	9304      	str	r3, [sp, #16]
 8005a7e:	e781      	b.n	8005984 <_strtod_l+0x174>
 8005a80:	f04f 0c01 	mov.w	ip, #1
 8005a84:	1cb3      	adds	r3, r6, #2
 8005a86:	931b      	str	r3, [sp, #108]	; 0x6c
 8005a88:	78b3      	ldrb	r3, [r6, #2]
 8005a8a:	e78a      	b.n	80059a2 <_strtod_l+0x192>
 8005a8c:	f04f 0c00 	mov.w	ip, #0
 8005a90:	e7f8      	b.n	8005a84 <_strtod_l+0x274>
 8005a92:	bf00      	nop
 8005a94:	08009bd8 	.word	0x08009bd8
 8005a98:	7ff00000 	.word	0x7ff00000
 8005a9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005a9e:	1c5f      	adds	r7, r3, #1
 8005aa0:	971b      	str	r7, [sp, #108]	; 0x6c
 8005aa2:	785b      	ldrb	r3, [r3, #1]
 8005aa4:	2b30      	cmp	r3, #48	; 0x30
 8005aa6:	d0f9      	beq.n	8005a9c <_strtod_l+0x28c>
 8005aa8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8005aac:	2f08      	cmp	r7, #8
 8005aae:	f63f af7d 	bhi.w	80059ac <_strtod_l+0x19c>
 8005ab2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8005ab6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005ab8:	930a      	str	r3, [sp, #40]	; 0x28
 8005aba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005abc:	1c5f      	adds	r7, r3, #1
 8005abe:	971b      	str	r7, [sp, #108]	; 0x6c
 8005ac0:	785b      	ldrb	r3, [r3, #1]
 8005ac2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8005ac6:	f1b8 0f09 	cmp.w	r8, #9
 8005aca:	d937      	bls.n	8005b3c <_strtod_l+0x32c>
 8005acc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005ace:	1a7f      	subs	r7, r7, r1
 8005ad0:	2f08      	cmp	r7, #8
 8005ad2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8005ad6:	dc37      	bgt.n	8005b48 <_strtod_l+0x338>
 8005ad8:	45be      	cmp	lr, r7
 8005ada:	bfa8      	it	ge
 8005adc:	46be      	movge	lr, r7
 8005ade:	f1bc 0f00 	cmp.w	ip, #0
 8005ae2:	d001      	beq.n	8005ae8 <_strtod_l+0x2d8>
 8005ae4:	f1ce 0e00 	rsb	lr, lr, #0
 8005ae8:	2c00      	cmp	r4, #0
 8005aea:	d151      	bne.n	8005b90 <_strtod_l+0x380>
 8005aec:	2800      	cmp	r0, #0
 8005aee:	f47f aece 	bne.w	800588e <_strtod_l+0x7e>
 8005af2:	9a06      	ldr	r2, [sp, #24]
 8005af4:	2a00      	cmp	r2, #0
 8005af6:	f47f aeca 	bne.w	800588e <_strtod_l+0x7e>
 8005afa:	9a04      	ldr	r2, [sp, #16]
 8005afc:	2a00      	cmp	r2, #0
 8005afe:	f47f aee4 	bne.w	80058ca <_strtod_l+0xba>
 8005b02:	2b4e      	cmp	r3, #78	; 0x4e
 8005b04:	d027      	beq.n	8005b56 <_strtod_l+0x346>
 8005b06:	dc21      	bgt.n	8005b4c <_strtod_l+0x33c>
 8005b08:	2b49      	cmp	r3, #73	; 0x49
 8005b0a:	f47f aede 	bne.w	80058ca <_strtod_l+0xba>
 8005b0e:	49a0      	ldr	r1, [pc, #640]	; (8005d90 <_strtod_l+0x580>)
 8005b10:	a81b      	add	r0, sp, #108	; 0x6c
 8005b12:	f001 fdd7 	bl	80076c4 <__match>
 8005b16:	2800      	cmp	r0, #0
 8005b18:	f43f aed7 	beq.w	80058ca <_strtod_l+0xba>
 8005b1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005b1e:	499d      	ldr	r1, [pc, #628]	; (8005d94 <_strtod_l+0x584>)
 8005b20:	3b01      	subs	r3, #1
 8005b22:	a81b      	add	r0, sp, #108	; 0x6c
 8005b24:	931b      	str	r3, [sp, #108]	; 0x6c
 8005b26:	f001 fdcd 	bl	80076c4 <__match>
 8005b2a:	b910      	cbnz	r0, 8005b32 <_strtod_l+0x322>
 8005b2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005b2e:	3301      	adds	r3, #1
 8005b30:	931b      	str	r3, [sp, #108]	; 0x6c
 8005b32:	f8df b274 	ldr.w	fp, [pc, #628]	; 8005da8 <_strtod_l+0x598>
 8005b36:	f04f 0a00 	mov.w	sl, #0
 8005b3a:	e6a8      	b.n	800588e <_strtod_l+0x7e>
 8005b3c:	210a      	movs	r1, #10
 8005b3e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8005b42:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005b46:	e7b8      	b.n	8005aba <_strtod_l+0x2aa>
 8005b48:	46be      	mov	lr, r7
 8005b4a:	e7c8      	b.n	8005ade <_strtod_l+0x2ce>
 8005b4c:	2b69      	cmp	r3, #105	; 0x69
 8005b4e:	d0de      	beq.n	8005b0e <_strtod_l+0x2fe>
 8005b50:	2b6e      	cmp	r3, #110	; 0x6e
 8005b52:	f47f aeba 	bne.w	80058ca <_strtod_l+0xba>
 8005b56:	4990      	ldr	r1, [pc, #576]	; (8005d98 <_strtod_l+0x588>)
 8005b58:	a81b      	add	r0, sp, #108	; 0x6c
 8005b5a:	f001 fdb3 	bl	80076c4 <__match>
 8005b5e:	2800      	cmp	r0, #0
 8005b60:	f43f aeb3 	beq.w	80058ca <_strtod_l+0xba>
 8005b64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	2b28      	cmp	r3, #40	; 0x28
 8005b6a:	d10e      	bne.n	8005b8a <_strtod_l+0x37a>
 8005b6c:	aa1e      	add	r2, sp, #120	; 0x78
 8005b6e:	498b      	ldr	r1, [pc, #556]	; (8005d9c <_strtod_l+0x58c>)
 8005b70:	a81b      	add	r0, sp, #108	; 0x6c
 8005b72:	f001 fdbb 	bl	80076ec <__hexnan>
 8005b76:	2805      	cmp	r0, #5
 8005b78:	d107      	bne.n	8005b8a <_strtod_l+0x37a>
 8005b7a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005b7c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8005b80:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005b84:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005b88:	e681      	b.n	800588e <_strtod_l+0x7e>
 8005b8a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8005db0 <_strtod_l+0x5a0>
 8005b8e:	e7d2      	b.n	8005b36 <_strtod_l+0x326>
 8005b90:	ebae 0302 	sub.w	r3, lr, r2
 8005b94:	9306      	str	r3, [sp, #24]
 8005b96:	9b05      	ldr	r3, [sp, #20]
 8005b98:	9807      	ldr	r0, [sp, #28]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	bf08      	it	eq
 8005b9e:	4623      	moveq	r3, r4
 8005ba0:	2c10      	cmp	r4, #16
 8005ba2:	9305      	str	r3, [sp, #20]
 8005ba4:	46a0      	mov	r8, r4
 8005ba6:	bfa8      	it	ge
 8005ba8:	f04f 0810 	movge.w	r8, #16
 8005bac:	f7fa fcaa 	bl	8000504 <__aeabi_ui2d>
 8005bb0:	2c09      	cmp	r4, #9
 8005bb2:	4682      	mov	sl, r0
 8005bb4:	468b      	mov	fp, r1
 8005bb6:	dc13      	bgt.n	8005be0 <_strtod_l+0x3d0>
 8005bb8:	9b06      	ldr	r3, [sp, #24]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	f43f ae67 	beq.w	800588e <_strtod_l+0x7e>
 8005bc0:	9b06      	ldr	r3, [sp, #24]
 8005bc2:	dd7a      	ble.n	8005cba <_strtod_l+0x4aa>
 8005bc4:	2b16      	cmp	r3, #22
 8005bc6:	dc61      	bgt.n	8005c8c <_strtod_l+0x47c>
 8005bc8:	4a75      	ldr	r2, [pc, #468]	; (8005da0 <_strtod_l+0x590>)
 8005bca:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8005bce:	e9de 0100 	ldrd	r0, r1, [lr]
 8005bd2:	4652      	mov	r2, sl
 8005bd4:	465b      	mov	r3, fp
 8005bd6:	f7fa fd0f 	bl	80005f8 <__aeabi_dmul>
 8005bda:	4682      	mov	sl, r0
 8005bdc:	468b      	mov	fp, r1
 8005bde:	e656      	b.n	800588e <_strtod_l+0x7e>
 8005be0:	4b6f      	ldr	r3, [pc, #444]	; (8005da0 <_strtod_l+0x590>)
 8005be2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005be6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005bea:	f7fa fd05 	bl	80005f8 <__aeabi_dmul>
 8005bee:	4606      	mov	r6, r0
 8005bf0:	4628      	mov	r0, r5
 8005bf2:	460f      	mov	r7, r1
 8005bf4:	f7fa fc86 	bl	8000504 <__aeabi_ui2d>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	460b      	mov	r3, r1
 8005bfc:	4630      	mov	r0, r6
 8005bfe:	4639      	mov	r1, r7
 8005c00:	f7fa fb44 	bl	800028c <__adddf3>
 8005c04:	2c0f      	cmp	r4, #15
 8005c06:	4682      	mov	sl, r0
 8005c08:	468b      	mov	fp, r1
 8005c0a:	ddd5      	ble.n	8005bb8 <_strtod_l+0x3a8>
 8005c0c:	9b06      	ldr	r3, [sp, #24]
 8005c0e:	eba4 0808 	sub.w	r8, r4, r8
 8005c12:	4498      	add	r8, r3
 8005c14:	f1b8 0f00 	cmp.w	r8, #0
 8005c18:	f340 8096 	ble.w	8005d48 <_strtod_l+0x538>
 8005c1c:	f018 030f 	ands.w	r3, r8, #15
 8005c20:	d00a      	beq.n	8005c38 <_strtod_l+0x428>
 8005c22:	495f      	ldr	r1, [pc, #380]	; (8005da0 <_strtod_l+0x590>)
 8005c24:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005c28:	4652      	mov	r2, sl
 8005c2a:	465b      	mov	r3, fp
 8005c2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c30:	f7fa fce2 	bl	80005f8 <__aeabi_dmul>
 8005c34:	4682      	mov	sl, r0
 8005c36:	468b      	mov	fp, r1
 8005c38:	f038 080f 	bics.w	r8, r8, #15
 8005c3c:	d073      	beq.n	8005d26 <_strtod_l+0x516>
 8005c3e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005c42:	dd47      	ble.n	8005cd4 <_strtod_l+0x4c4>
 8005c44:	2400      	movs	r4, #0
 8005c46:	46a0      	mov	r8, r4
 8005c48:	9407      	str	r4, [sp, #28]
 8005c4a:	9405      	str	r4, [sp, #20]
 8005c4c:	2322      	movs	r3, #34	; 0x22
 8005c4e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8005da8 <_strtod_l+0x598>
 8005c52:	f8c9 3000 	str.w	r3, [r9]
 8005c56:	f04f 0a00 	mov.w	sl, #0
 8005c5a:	9b07      	ldr	r3, [sp, #28]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f43f ae16 	beq.w	800588e <_strtod_l+0x7e>
 8005c62:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005c64:	4648      	mov	r0, r9
 8005c66:	f001 fe3e 	bl	80078e6 <_Bfree>
 8005c6a:	9905      	ldr	r1, [sp, #20]
 8005c6c:	4648      	mov	r0, r9
 8005c6e:	f001 fe3a 	bl	80078e6 <_Bfree>
 8005c72:	4641      	mov	r1, r8
 8005c74:	4648      	mov	r0, r9
 8005c76:	f001 fe36 	bl	80078e6 <_Bfree>
 8005c7a:	9907      	ldr	r1, [sp, #28]
 8005c7c:	4648      	mov	r0, r9
 8005c7e:	f001 fe32 	bl	80078e6 <_Bfree>
 8005c82:	4621      	mov	r1, r4
 8005c84:	4648      	mov	r0, r9
 8005c86:	f001 fe2e 	bl	80078e6 <_Bfree>
 8005c8a:	e600      	b.n	800588e <_strtod_l+0x7e>
 8005c8c:	9a06      	ldr	r2, [sp, #24]
 8005c8e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005c92:	4293      	cmp	r3, r2
 8005c94:	dbba      	blt.n	8005c0c <_strtod_l+0x3fc>
 8005c96:	4d42      	ldr	r5, [pc, #264]	; (8005da0 <_strtod_l+0x590>)
 8005c98:	f1c4 040f 	rsb	r4, r4, #15
 8005c9c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005ca0:	4652      	mov	r2, sl
 8005ca2:	465b      	mov	r3, fp
 8005ca4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ca8:	f7fa fca6 	bl	80005f8 <__aeabi_dmul>
 8005cac:	9b06      	ldr	r3, [sp, #24]
 8005cae:	1b1c      	subs	r4, r3, r4
 8005cb0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005cb4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005cb8:	e78d      	b.n	8005bd6 <_strtod_l+0x3c6>
 8005cba:	f113 0f16 	cmn.w	r3, #22
 8005cbe:	dba5      	blt.n	8005c0c <_strtod_l+0x3fc>
 8005cc0:	4a37      	ldr	r2, [pc, #220]	; (8005da0 <_strtod_l+0x590>)
 8005cc2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8005cc6:	e9d2 2300 	ldrd	r2, r3, [r2]
 8005cca:	4650      	mov	r0, sl
 8005ccc:	4659      	mov	r1, fp
 8005cce:	f7fa fdbd 	bl	800084c <__aeabi_ddiv>
 8005cd2:	e782      	b.n	8005bda <_strtod_l+0x3ca>
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	4e33      	ldr	r6, [pc, #204]	; (8005da4 <_strtod_l+0x594>)
 8005cd8:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005cdc:	4650      	mov	r0, sl
 8005cde:	4659      	mov	r1, fp
 8005ce0:	461d      	mov	r5, r3
 8005ce2:	f1b8 0f01 	cmp.w	r8, #1
 8005ce6:	dc21      	bgt.n	8005d2c <_strtod_l+0x51c>
 8005ce8:	b10b      	cbz	r3, 8005cee <_strtod_l+0x4de>
 8005cea:	4682      	mov	sl, r0
 8005cec:	468b      	mov	fp, r1
 8005cee:	4b2d      	ldr	r3, [pc, #180]	; (8005da4 <_strtod_l+0x594>)
 8005cf0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005cf4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005cf8:	4652      	mov	r2, sl
 8005cfa:	465b      	mov	r3, fp
 8005cfc:	e9d5 0100 	ldrd	r0, r1, [r5]
 8005d00:	f7fa fc7a 	bl	80005f8 <__aeabi_dmul>
 8005d04:	4b28      	ldr	r3, [pc, #160]	; (8005da8 <_strtod_l+0x598>)
 8005d06:	460a      	mov	r2, r1
 8005d08:	400b      	ands	r3, r1
 8005d0a:	4928      	ldr	r1, [pc, #160]	; (8005dac <_strtod_l+0x59c>)
 8005d0c:	428b      	cmp	r3, r1
 8005d0e:	4682      	mov	sl, r0
 8005d10:	d898      	bhi.n	8005c44 <_strtod_l+0x434>
 8005d12:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005d16:	428b      	cmp	r3, r1
 8005d18:	bf86      	itte	hi
 8005d1a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8005db4 <_strtod_l+0x5a4>
 8005d1e:	f04f 3aff 	movhi.w	sl, #4294967295
 8005d22:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005d26:	2300      	movs	r3, #0
 8005d28:	9304      	str	r3, [sp, #16]
 8005d2a:	e077      	b.n	8005e1c <_strtod_l+0x60c>
 8005d2c:	f018 0f01 	tst.w	r8, #1
 8005d30:	d006      	beq.n	8005d40 <_strtod_l+0x530>
 8005d32:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8005d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d3a:	f7fa fc5d 	bl	80005f8 <__aeabi_dmul>
 8005d3e:	2301      	movs	r3, #1
 8005d40:	3501      	adds	r5, #1
 8005d42:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005d46:	e7cc      	b.n	8005ce2 <_strtod_l+0x4d2>
 8005d48:	d0ed      	beq.n	8005d26 <_strtod_l+0x516>
 8005d4a:	f1c8 0800 	rsb	r8, r8, #0
 8005d4e:	f018 020f 	ands.w	r2, r8, #15
 8005d52:	d00a      	beq.n	8005d6a <_strtod_l+0x55a>
 8005d54:	4b12      	ldr	r3, [pc, #72]	; (8005da0 <_strtod_l+0x590>)
 8005d56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d5a:	4650      	mov	r0, sl
 8005d5c:	4659      	mov	r1, fp
 8005d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d62:	f7fa fd73 	bl	800084c <__aeabi_ddiv>
 8005d66:	4682      	mov	sl, r0
 8005d68:	468b      	mov	fp, r1
 8005d6a:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005d6e:	d0da      	beq.n	8005d26 <_strtod_l+0x516>
 8005d70:	f1b8 0f1f 	cmp.w	r8, #31
 8005d74:	dd20      	ble.n	8005db8 <_strtod_l+0x5a8>
 8005d76:	2400      	movs	r4, #0
 8005d78:	46a0      	mov	r8, r4
 8005d7a:	9407      	str	r4, [sp, #28]
 8005d7c:	9405      	str	r4, [sp, #20]
 8005d7e:	2322      	movs	r3, #34	; 0x22
 8005d80:	f04f 0a00 	mov.w	sl, #0
 8005d84:	f04f 0b00 	mov.w	fp, #0
 8005d88:	f8c9 3000 	str.w	r3, [r9]
 8005d8c:	e765      	b.n	8005c5a <_strtod_l+0x44a>
 8005d8e:	bf00      	nop
 8005d90:	08009ba2 	.word	0x08009ba2
 8005d94:	08009c2b 	.word	0x08009c2b
 8005d98:	08009baa 	.word	0x08009baa
 8005d9c:	08009bec 	.word	0x08009bec
 8005da0:	08009c68 	.word	0x08009c68
 8005da4:	08009c40 	.word	0x08009c40
 8005da8:	7ff00000 	.word	0x7ff00000
 8005dac:	7ca00000 	.word	0x7ca00000
 8005db0:	fff80000 	.word	0xfff80000
 8005db4:	7fefffff 	.word	0x7fefffff
 8005db8:	f018 0310 	ands.w	r3, r8, #16
 8005dbc:	bf18      	it	ne
 8005dbe:	236a      	movne	r3, #106	; 0x6a
 8005dc0:	4da0      	ldr	r5, [pc, #640]	; (8006044 <_strtod_l+0x834>)
 8005dc2:	9304      	str	r3, [sp, #16]
 8005dc4:	4650      	mov	r0, sl
 8005dc6:	4659      	mov	r1, fp
 8005dc8:	2300      	movs	r3, #0
 8005dca:	f1b8 0f00 	cmp.w	r8, #0
 8005dce:	f300 810a 	bgt.w	8005fe6 <_strtod_l+0x7d6>
 8005dd2:	b10b      	cbz	r3, 8005dd8 <_strtod_l+0x5c8>
 8005dd4:	4682      	mov	sl, r0
 8005dd6:	468b      	mov	fp, r1
 8005dd8:	9b04      	ldr	r3, [sp, #16]
 8005dda:	b1bb      	cbz	r3, 8005e0c <_strtod_l+0x5fc>
 8005ddc:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8005de0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	4659      	mov	r1, fp
 8005de8:	dd10      	ble.n	8005e0c <_strtod_l+0x5fc>
 8005dea:	2b1f      	cmp	r3, #31
 8005dec:	f340 8107 	ble.w	8005ffe <_strtod_l+0x7ee>
 8005df0:	2b34      	cmp	r3, #52	; 0x34
 8005df2:	bfde      	ittt	le
 8005df4:	3b20      	suble	r3, #32
 8005df6:	f04f 32ff 	movle.w	r2, #4294967295
 8005dfa:	fa02 f303 	lslle.w	r3, r2, r3
 8005dfe:	f04f 0a00 	mov.w	sl, #0
 8005e02:	bfcc      	ite	gt
 8005e04:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005e08:	ea03 0b01 	andle.w	fp, r3, r1
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	2300      	movs	r3, #0
 8005e10:	4650      	mov	r0, sl
 8005e12:	4659      	mov	r1, fp
 8005e14:	f7fa fe58 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e18:	2800      	cmp	r0, #0
 8005e1a:	d1ac      	bne.n	8005d76 <_strtod_l+0x566>
 8005e1c:	9b07      	ldr	r3, [sp, #28]
 8005e1e:	9300      	str	r3, [sp, #0]
 8005e20:	9a05      	ldr	r2, [sp, #20]
 8005e22:	9908      	ldr	r1, [sp, #32]
 8005e24:	4623      	mov	r3, r4
 8005e26:	4648      	mov	r0, r9
 8005e28:	f001 fdaf 	bl	800798a <__s2b>
 8005e2c:	9007      	str	r0, [sp, #28]
 8005e2e:	2800      	cmp	r0, #0
 8005e30:	f43f af08 	beq.w	8005c44 <_strtod_l+0x434>
 8005e34:	9a06      	ldr	r2, [sp, #24]
 8005e36:	9b06      	ldr	r3, [sp, #24]
 8005e38:	2a00      	cmp	r2, #0
 8005e3a:	f1c3 0300 	rsb	r3, r3, #0
 8005e3e:	bfa8      	it	ge
 8005e40:	2300      	movge	r3, #0
 8005e42:	930e      	str	r3, [sp, #56]	; 0x38
 8005e44:	2400      	movs	r4, #0
 8005e46:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005e4a:	9316      	str	r3, [sp, #88]	; 0x58
 8005e4c:	46a0      	mov	r8, r4
 8005e4e:	9b07      	ldr	r3, [sp, #28]
 8005e50:	4648      	mov	r0, r9
 8005e52:	6859      	ldr	r1, [r3, #4]
 8005e54:	f001 fd13 	bl	800787e <_Balloc>
 8005e58:	9005      	str	r0, [sp, #20]
 8005e5a:	2800      	cmp	r0, #0
 8005e5c:	f43f aef6 	beq.w	8005c4c <_strtod_l+0x43c>
 8005e60:	9b07      	ldr	r3, [sp, #28]
 8005e62:	691a      	ldr	r2, [r3, #16]
 8005e64:	3202      	adds	r2, #2
 8005e66:	f103 010c 	add.w	r1, r3, #12
 8005e6a:	0092      	lsls	r2, r2, #2
 8005e6c:	300c      	adds	r0, #12
 8005e6e:	f001 fcfb 	bl	8007868 <memcpy>
 8005e72:	aa1e      	add	r2, sp, #120	; 0x78
 8005e74:	a91d      	add	r1, sp, #116	; 0x74
 8005e76:	ec4b ab10 	vmov	d0, sl, fp
 8005e7a:	4648      	mov	r0, r9
 8005e7c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8005e80:	f002 f83e 	bl	8007f00 <__d2b>
 8005e84:	901c      	str	r0, [sp, #112]	; 0x70
 8005e86:	2800      	cmp	r0, #0
 8005e88:	f43f aee0 	beq.w	8005c4c <_strtod_l+0x43c>
 8005e8c:	2101      	movs	r1, #1
 8005e8e:	4648      	mov	r0, r9
 8005e90:	f001 fe07 	bl	8007aa2 <__i2b>
 8005e94:	4680      	mov	r8, r0
 8005e96:	2800      	cmp	r0, #0
 8005e98:	f43f aed8 	beq.w	8005c4c <_strtod_l+0x43c>
 8005e9c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8005e9e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005ea0:	2e00      	cmp	r6, #0
 8005ea2:	bfab      	itete	ge
 8005ea4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8005ea6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8005ea8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8005eaa:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8005eac:	bfac      	ite	ge
 8005eae:	18f7      	addge	r7, r6, r3
 8005eb0:	1b9d      	sublt	r5, r3, r6
 8005eb2:	9b04      	ldr	r3, [sp, #16]
 8005eb4:	1af6      	subs	r6, r6, r3
 8005eb6:	4416      	add	r6, r2
 8005eb8:	4b63      	ldr	r3, [pc, #396]	; (8006048 <_strtod_l+0x838>)
 8005eba:	3e01      	subs	r6, #1
 8005ebc:	429e      	cmp	r6, r3
 8005ebe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005ec2:	f280 80af 	bge.w	8006024 <_strtod_l+0x814>
 8005ec6:	1b9b      	subs	r3, r3, r6
 8005ec8:	2b1f      	cmp	r3, #31
 8005eca:	eba2 0203 	sub.w	r2, r2, r3
 8005ece:	f04f 0101 	mov.w	r1, #1
 8005ed2:	f300 809b 	bgt.w	800600c <_strtod_l+0x7fc>
 8005ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8005eda:	930f      	str	r3, [sp, #60]	; 0x3c
 8005edc:	2300      	movs	r3, #0
 8005ede:	930a      	str	r3, [sp, #40]	; 0x28
 8005ee0:	18be      	adds	r6, r7, r2
 8005ee2:	9b04      	ldr	r3, [sp, #16]
 8005ee4:	42b7      	cmp	r7, r6
 8005ee6:	4415      	add	r5, r2
 8005ee8:	441d      	add	r5, r3
 8005eea:	463b      	mov	r3, r7
 8005eec:	bfa8      	it	ge
 8005eee:	4633      	movge	r3, r6
 8005ef0:	42ab      	cmp	r3, r5
 8005ef2:	bfa8      	it	ge
 8005ef4:	462b      	movge	r3, r5
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	bfc2      	ittt	gt
 8005efa:	1af6      	subgt	r6, r6, r3
 8005efc:	1aed      	subgt	r5, r5, r3
 8005efe:	1aff      	subgt	r7, r7, r3
 8005f00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f02:	b1bb      	cbz	r3, 8005f34 <_strtod_l+0x724>
 8005f04:	4641      	mov	r1, r8
 8005f06:	461a      	mov	r2, r3
 8005f08:	4648      	mov	r0, r9
 8005f0a:	f001 fe69 	bl	8007be0 <__pow5mult>
 8005f0e:	4680      	mov	r8, r0
 8005f10:	2800      	cmp	r0, #0
 8005f12:	f43f ae9b 	beq.w	8005c4c <_strtod_l+0x43c>
 8005f16:	4601      	mov	r1, r0
 8005f18:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005f1a:	4648      	mov	r0, r9
 8005f1c:	f001 fdca 	bl	8007ab4 <__multiply>
 8005f20:	900c      	str	r0, [sp, #48]	; 0x30
 8005f22:	2800      	cmp	r0, #0
 8005f24:	f43f ae92 	beq.w	8005c4c <_strtod_l+0x43c>
 8005f28:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005f2a:	4648      	mov	r0, r9
 8005f2c:	f001 fcdb 	bl	80078e6 <_Bfree>
 8005f30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f32:	931c      	str	r3, [sp, #112]	; 0x70
 8005f34:	2e00      	cmp	r6, #0
 8005f36:	dc7a      	bgt.n	800602e <_strtod_l+0x81e>
 8005f38:	9b06      	ldr	r3, [sp, #24]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	dd08      	ble.n	8005f50 <_strtod_l+0x740>
 8005f3e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005f40:	9905      	ldr	r1, [sp, #20]
 8005f42:	4648      	mov	r0, r9
 8005f44:	f001 fe4c 	bl	8007be0 <__pow5mult>
 8005f48:	9005      	str	r0, [sp, #20]
 8005f4a:	2800      	cmp	r0, #0
 8005f4c:	f43f ae7e 	beq.w	8005c4c <_strtod_l+0x43c>
 8005f50:	2d00      	cmp	r5, #0
 8005f52:	dd08      	ble.n	8005f66 <_strtod_l+0x756>
 8005f54:	462a      	mov	r2, r5
 8005f56:	9905      	ldr	r1, [sp, #20]
 8005f58:	4648      	mov	r0, r9
 8005f5a:	f001 fe8f 	bl	8007c7c <__lshift>
 8005f5e:	9005      	str	r0, [sp, #20]
 8005f60:	2800      	cmp	r0, #0
 8005f62:	f43f ae73 	beq.w	8005c4c <_strtod_l+0x43c>
 8005f66:	2f00      	cmp	r7, #0
 8005f68:	dd08      	ble.n	8005f7c <_strtod_l+0x76c>
 8005f6a:	4641      	mov	r1, r8
 8005f6c:	463a      	mov	r2, r7
 8005f6e:	4648      	mov	r0, r9
 8005f70:	f001 fe84 	bl	8007c7c <__lshift>
 8005f74:	4680      	mov	r8, r0
 8005f76:	2800      	cmp	r0, #0
 8005f78:	f43f ae68 	beq.w	8005c4c <_strtod_l+0x43c>
 8005f7c:	9a05      	ldr	r2, [sp, #20]
 8005f7e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005f80:	4648      	mov	r0, r9
 8005f82:	f001 fee9 	bl	8007d58 <__mdiff>
 8005f86:	4604      	mov	r4, r0
 8005f88:	2800      	cmp	r0, #0
 8005f8a:	f43f ae5f 	beq.w	8005c4c <_strtod_l+0x43c>
 8005f8e:	68c3      	ldr	r3, [r0, #12]
 8005f90:	930c      	str	r3, [sp, #48]	; 0x30
 8005f92:	2300      	movs	r3, #0
 8005f94:	60c3      	str	r3, [r0, #12]
 8005f96:	4641      	mov	r1, r8
 8005f98:	f001 fec4 	bl	8007d24 <__mcmp>
 8005f9c:	2800      	cmp	r0, #0
 8005f9e:	da55      	bge.n	800604c <_strtod_l+0x83c>
 8005fa0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005fa2:	b9e3      	cbnz	r3, 8005fde <_strtod_l+0x7ce>
 8005fa4:	f1ba 0f00 	cmp.w	sl, #0
 8005fa8:	d119      	bne.n	8005fde <_strtod_l+0x7ce>
 8005faa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005fae:	b9b3      	cbnz	r3, 8005fde <_strtod_l+0x7ce>
 8005fb0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005fb4:	0d1b      	lsrs	r3, r3, #20
 8005fb6:	051b      	lsls	r3, r3, #20
 8005fb8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005fbc:	d90f      	bls.n	8005fde <_strtod_l+0x7ce>
 8005fbe:	6963      	ldr	r3, [r4, #20]
 8005fc0:	b913      	cbnz	r3, 8005fc8 <_strtod_l+0x7b8>
 8005fc2:	6923      	ldr	r3, [r4, #16]
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	dd0a      	ble.n	8005fde <_strtod_l+0x7ce>
 8005fc8:	4621      	mov	r1, r4
 8005fca:	2201      	movs	r2, #1
 8005fcc:	4648      	mov	r0, r9
 8005fce:	f001 fe55 	bl	8007c7c <__lshift>
 8005fd2:	4641      	mov	r1, r8
 8005fd4:	4604      	mov	r4, r0
 8005fd6:	f001 fea5 	bl	8007d24 <__mcmp>
 8005fda:	2800      	cmp	r0, #0
 8005fdc:	dc67      	bgt.n	80060ae <_strtod_l+0x89e>
 8005fde:	9b04      	ldr	r3, [sp, #16]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d171      	bne.n	80060c8 <_strtod_l+0x8b8>
 8005fe4:	e63d      	b.n	8005c62 <_strtod_l+0x452>
 8005fe6:	f018 0f01 	tst.w	r8, #1
 8005fea:	d004      	beq.n	8005ff6 <_strtod_l+0x7e6>
 8005fec:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005ff0:	f7fa fb02 	bl	80005f8 <__aeabi_dmul>
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005ffa:	3508      	adds	r5, #8
 8005ffc:	e6e5      	b.n	8005dca <_strtod_l+0x5ba>
 8005ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8006002:	fa02 f303 	lsl.w	r3, r2, r3
 8006006:	ea03 0a0a 	and.w	sl, r3, sl
 800600a:	e6ff      	b.n	8005e0c <_strtod_l+0x5fc>
 800600c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8006010:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8006014:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8006018:	36e2      	adds	r6, #226	; 0xe2
 800601a:	fa01 f306 	lsl.w	r3, r1, r6
 800601e:	930a      	str	r3, [sp, #40]	; 0x28
 8006020:	910f      	str	r1, [sp, #60]	; 0x3c
 8006022:	e75d      	b.n	8005ee0 <_strtod_l+0x6d0>
 8006024:	2300      	movs	r3, #0
 8006026:	930a      	str	r3, [sp, #40]	; 0x28
 8006028:	2301      	movs	r3, #1
 800602a:	930f      	str	r3, [sp, #60]	; 0x3c
 800602c:	e758      	b.n	8005ee0 <_strtod_l+0x6d0>
 800602e:	4632      	mov	r2, r6
 8006030:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006032:	4648      	mov	r0, r9
 8006034:	f001 fe22 	bl	8007c7c <__lshift>
 8006038:	901c      	str	r0, [sp, #112]	; 0x70
 800603a:	2800      	cmp	r0, #0
 800603c:	f47f af7c 	bne.w	8005f38 <_strtod_l+0x728>
 8006040:	e604      	b.n	8005c4c <_strtod_l+0x43c>
 8006042:	bf00      	nop
 8006044:	08009c00 	.word	0x08009c00
 8006048:	fffffc02 	.word	0xfffffc02
 800604c:	465d      	mov	r5, fp
 800604e:	f040 8086 	bne.w	800615e <_strtod_l+0x94e>
 8006052:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006054:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006058:	b32a      	cbz	r2, 80060a6 <_strtod_l+0x896>
 800605a:	4aaf      	ldr	r2, [pc, #700]	; (8006318 <_strtod_l+0xb08>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d153      	bne.n	8006108 <_strtod_l+0x8f8>
 8006060:	9b04      	ldr	r3, [sp, #16]
 8006062:	4650      	mov	r0, sl
 8006064:	b1d3      	cbz	r3, 800609c <_strtod_l+0x88c>
 8006066:	4aad      	ldr	r2, [pc, #692]	; (800631c <_strtod_l+0xb0c>)
 8006068:	402a      	ands	r2, r5
 800606a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800606e:	f04f 31ff 	mov.w	r1, #4294967295
 8006072:	d816      	bhi.n	80060a2 <_strtod_l+0x892>
 8006074:	0d12      	lsrs	r2, r2, #20
 8006076:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800607a:	fa01 f303 	lsl.w	r3, r1, r3
 800607e:	4298      	cmp	r0, r3
 8006080:	d142      	bne.n	8006108 <_strtod_l+0x8f8>
 8006082:	4ba7      	ldr	r3, [pc, #668]	; (8006320 <_strtod_l+0xb10>)
 8006084:	429d      	cmp	r5, r3
 8006086:	d102      	bne.n	800608e <_strtod_l+0x87e>
 8006088:	3001      	adds	r0, #1
 800608a:	f43f addf 	beq.w	8005c4c <_strtod_l+0x43c>
 800608e:	4ba3      	ldr	r3, [pc, #652]	; (800631c <_strtod_l+0xb0c>)
 8006090:	402b      	ands	r3, r5
 8006092:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006096:	f04f 0a00 	mov.w	sl, #0
 800609a:	e7a0      	b.n	8005fde <_strtod_l+0x7ce>
 800609c:	f04f 33ff 	mov.w	r3, #4294967295
 80060a0:	e7ed      	b.n	800607e <_strtod_l+0x86e>
 80060a2:	460b      	mov	r3, r1
 80060a4:	e7eb      	b.n	800607e <_strtod_l+0x86e>
 80060a6:	bb7b      	cbnz	r3, 8006108 <_strtod_l+0x8f8>
 80060a8:	f1ba 0f00 	cmp.w	sl, #0
 80060ac:	d12c      	bne.n	8006108 <_strtod_l+0x8f8>
 80060ae:	9904      	ldr	r1, [sp, #16]
 80060b0:	4a9a      	ldr	r2, [pc, #616]	; (800631c <_strtod_l+0xb0c>)
 80060b2:	465b      	mov	r3, fp
 80060b4:	b1f1      	cbz	r1, 80060f4 <_strtod_l+0x8e4>
 80060b6:	ea02 010b 	and.w	r1, r2, fp
 80060ba:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80060be:	dc19      	bgt.n	80060f4 <_strtod_l+0x8e4>
 80060c0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80060c4:	f77f ae5b 	ble.w	8005d7e <_strtod_l+0x56e>
 80060c8:	4a96      	ldr	r2, [pc, #600]	; (8006324 <_strtod_l+0xb14>)
 80060ca:	2300      	movs	r3, #0
 80060cc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80060d0:	4650      	mov	r0, sl
 80060d2:	4659      	mov	r1, fp
 80060d4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80060d8:	f7fa fa8e 	bl	80005f8 <__aeabi_dmul>
 80060dc:	4682      	mov	sl, r0
 80060de:	468b      	mov	fp, r1
 80060e0:	2900      	cmp	r1, #0
 80060e2:	f47f adbe 	bne.w	8005c62 <_strtod_l+0x452>
 80060e6:	2800      	cmp	r0, #0
 80060e8:	f47f adbb 	bne.w	8005c62 <_strtod_l+0x452>
 80060ec:	2322      	movs	r3, #34	; 0x22
 80060ee:	f8c9 3000 	str.w	r3, [r9]
 80060f2:	e5b6      	b.n	8005c62 <_strtod_l+0x452>
 80060f4:	4013      	ands	r3, r2
 80060f6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80060fa:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80060fe:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006102:	f04f 3aff 	mov.w	sl, #4294967295
 8006106:	e76a      	b.n	8005fde <_strtod_l+0x7ce>
 8006108:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800610a:	b193      	cbz	r3, 8006132 <_strtod_l+0x922>
 800610c:	422b      	tst	r3, r5
 800610e:	f43f af66 	beq.w	8005fde <_strtod_l+0x7ce>
 8006112:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006114:	9a04      	ldr	r2, [sp, #16]
 8006116:	4650      	mov	r0, sl
 8006118:	4659      	mov	r1, fp
 800611a:	b173      	cbz	r3, 800613a <_strtod_l+0x92a>
 800611c:	f7ff fb5c 	bl	80057d8 <sulp>
 8006120:	4602      	mov	r2, r0
 8006122:	460b      	mov	r3, r1
 8006124:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006128:	f7fa f8b0 	bl	800028c <__adddf3>
 800612c:	4682      	mov	sl, r0
 800612e:	468b      	mov	fp, r1
 8006130:	e755      	b.n	8005fde <_strtod_l+0x7ce>
 8006132:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006134:	ea13 0f0a 	tst.w	r3, sl
 8006138:	e7e9      	b.n	800610e <_strtod_l+0x8fe>
 800613a:	f7ff fb4d 	bl	80057d8 <sulp>
 800613e:	4602      	mov	r2, r0
 8006140:	460b      	mov	r3, r1
 8006142:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006146:	f7fa f89f 	bl	8000288 <__aeabi_dsub>
 800614a:	2200      	movs	r2, #0
 800614c:	2300      	movs	r3, #0
 800614e:	4682      	mov	sl, r0
 8006150:	468b      	mov	fp, r1
 8006152:	f7fa fcb9 	bl	8000ac8 <__aeabi_dcmpeq>
 8006156:	2800      	cmp	r0, #0
 8006158:	f47f ae11 	bne.w	8005d7e <_strtod_l+0x56e>
 800615c:	e73f      	b.n	8005fde <_strtod_l+0x7ce>
 800615e:	4641      	mov	r1, r8
 8006160:	4620      	mov	r0, r4
 8006162:	f001 ff1c 	bl	8007f9e <__ratio>
 8006166:	ec57 6b10 	vmov	r6, r7, d0
 800616a:	2200      	movs	r2, #0
 800616c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006170:	ee10 0a10 	vmov	r0, s0
 8006174:	4639      	mov	r1, r7
 8006176:	f7fa fcbb 	bl	8000af0 <__aeabi_dcmple>
 800617a:	2800      	cmp	r0, #0
 800617c:	d077      	beq.n	800626e <_strtod_l+0xa5e>
 800617e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006180:	2b00      	cmp	r3, #0
 8006182:	d04a      	beq.n	800621a <_strtod_l+0xa0a>
 8006184:	4b68      	ldr	r3, [pc, #416]	; (8006328 <_strtod_l+0xb18>)
 8006186:	2200      	movs	r2, #0
 8006188:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800618c:	4f66      	ldr	r7, [pc, #408]	; (8006328 <_strtod_l+0xb18>)
 800618e:	2600      	movs	r6, #0
 8006190:	4b62      	ldr	r3, [pc, #392]	; (800631c <_strtod_l+0xb0c>)
 8006192:	402b      	ands	r3, r5
 8006194:	930f      	str	r3, [sp, #60]	; 0x3c
 8006196:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006198:	4b64      	ldr	r3, [pc, #400]	; (800632c <_strtod_l+0xb1c>)
 800619a:	429a      	cmp	r2, r3
 800619c:	f040 80ce 	bne.w	800633c <_strtod_l+0xb2c>
 80061a0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80061a4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80061a8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80061ac:	ec4b ab10 	vmov	d0, sl, fp
 80061b0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80061b4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80061b8:	f001 fe2c 	bl	8007e14 <__ulp>
 80061bc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80061c0:	ec53 2b10 	vmov	r2, r3, d0
 80061c4:	f7fa fa18 	bl	80005f8 <__aeabi_dmul>
 80061c8:	4652      	mov	r2, sl
 80061ca:	465b      	mov	r3, fp
 80061cc:	f7fa f85e 	bl	800028c <__adddf3>
 80061d0:	460b      	mov	r3, r1
 80061d2:	4952      	ldr	r1, [pc, #328]	; (800631c <_strtod_l+0xb0c>)
 80061d4:	4a56      	ldr	r2, [pc, #344]	; (8006330 <_strtod_l+0xb20>)
 80061d6:	4019      	ands	r1, r3
 80061d8:	4291      	cmp	r1, r2
 80061da:	4682      	mov	sl, r0
 80061dc:	d95b      	bls.n	8006296 <_strtod_l+0xa86>
 80061de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061e0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d103      	bne.n	80061f0 <_strtod_l+0x9e0>
 80061e8:	9b08      	ldr	r3, [sp, #32]
 80061ea:	3301      	adds	r3, #1
 80061ec:	f43f ad2e 	beq.w	8005c4c <_strtod_l+0x43c>
 80061f0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8006320 <_strtod_l+0xb10>
 80061f4:	f04f 3aff 	mov.w	sl, #4294967295
 80061f8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80061fa:	4648      	mov	r0, r9
 80061fc:	f001 fb73 	bl	80078e6 <_Bfree>
 8006200:	9905      	ldr	r1, [sp, #20]
 8006202:	4648      	mov	r0, r9
 8006204:	f001 fb6f 	bl	80078e6 <_Bfree>
 8006208:	4641      	mov	r1, r8
 800620a:	4648      	mov	r0, r9
 800620c:	f001 fb6b 	bl	80078e6 <_Bfree>
 8006210:	4621      	mov	r1, r4
 8006212:	4648      	mov	r0, r9
 8006214:	f001 fb67 	bl	80078e6 <_Bfree>
 8006218:	e619      	b.n	8005e4e <_strtod_l+0x63e>
 800621a:	f1ba 0f00 	cmp.w	sl, #0
 800621e:	d11a      	bne.n	8006256 <_strtod_l+0xa46>
 8006220:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006224:	b9eb      	cbnz	r3, 8006262 <_strtod_l+0xa52>
 8006226:	2200      	movs	r2, #0
 8006228:	4b3f      	ldr	r3, [pc, #252]	; (8006328 <_strtod_l+0xb18>)
 800622a:	4630      	mov	r0, r6
 800622c:	4639      	mov	r1, r7
 800622e:	f7fa fc55 	bl	8000adc <__aeabi_dcmplt>
 8006232:	b9c8      	cbnz	r0, 8006268 <_strtod_l+0xa58>
 8006234:	4630      	mov	r0, r6
 8006236:	4639      	mov	r1, r7
 8006238:	2200      	movs	r2, #0
 800623a:	4b3e      	ldr	r3, [pc, #248]	; (8006334 <_strtod_l+0xb24>)
 800623c:	f7fa f9dc 	bl	80005f8 <__aeabi_dmul>
 8006240:	4606      	mov	r6, r0
 8006242:	460f      	mov	r7, r1
 8006244:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8006248:	9618      	str	r6, [sp, #96]	; 0x60
 800624a:	9319      	str	r3, [sp, #100]	; 0x64
 800624c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8006250:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006254:	e79c      	b.n	8006190 <_strtod_l+0x980>
 8006256:	f1ba 0f01 	cmp.w	sl, #1
 800625a:	d102      	bne.n	8006262 <_strtod_l+0xa52>
 800625c:	2d00      	cmp	r5, #0
 800625e:	f43f ad8e 	beq.w	8005d7e <_strtod_l+0x56e>
 8006262:	2200      	movs	r2, #0
 8006264:	4b34      	ldr	r3, [pc, #208]	; (8006338 <_strtod_l+0xb28>)
 8006266:	e78f      	b.n	8006188 <_strtod_l+0x978>
 8006268:	2600      	movs	r6, #0
 800626a:	4f32      	ldr	r7, [pc, #200]	; (8006334 <_strtod_l+0xb24>)
 800626c:	e7ea      	b.n	8006244 <_strtod_l+0xa34>
 800626e:	4b31      	ldr	r3, [pc, #196]	; (8006334 <_strtod_l+0xb24>)
 8006270:	4630      	mov	r0, r6
 8006272:	4639      	mov	r1, r7
 8006274:	2200      	movs	r2, #0
 8006276:	f7fa f9bf 	bl	80005f8 <__aeabi_dmul>
 800627a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800627c:	4606      	mov	r6, r0
 800627e:	460f      	mov	r7, r1
 8006280:	b933      	cbnz	r3, 8006290 <_strtod_l+0xa80>
 8006282:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006286:	9010      	str	r0, [sp, #64]	; 0x40
 8006288:	9311      	str	r3, [sp, #68]	; 0x44
 800628a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800628e:	e7df      	b.n	8006250 <_strtod_l+0xa40>
 8006290:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8006294:	e7f9      	b.n	800628a <_strtod_l+0xa7a>
 8006296:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800629a:	9b04      	ldr	r3, [sp, #16]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d1ab      	bne.n	80061f8 <_strtod_l+0x9e8>
 80062a0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80062a4:	0d1b      	lsrs	r3, r3, #20
 80062a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80062a8:	051b      	lsls	r3, r3, #20
 80062aa:	429a      	cmp	r2, r3
 80062ac:	465d      	mov	r5, fp
 80062ae:	d1a3      	bne.n	80061f8 <_strtod_l+0x9e8>
 80062b0:	4639      	mov	r1, r7
 80062b2:	4630      	mov	r0, r6
 80062b4:	f7fa fc50 	bl	8000b58 <__aeabi_d2iz>
 80062b8:	f7fa f934 	bl	8000524 <__aeabi_i2d>
 80062bc:	460b      	mov	r3, r1
 80062be:	4602      	mov	r2, r0
 80062c0:	4639      	mov	r1, r7
 80062c2:	4630      	mov	r0, r6
 80062c4:	f7f9 ffe0 	bl	8000288 <__aeabi_dsub>
 80062c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80062ca:	4606      	mov	r6, r0
 80062cc:	460f      	mov	r7, r1
 80062ce:	b933      	cbnz	r3, 80062de <_strtod_l+0xace>
 80062d0:	f1ba 0f00 	cmp.w	sl, #0
 80062d4:	d103      	bne.n	80062de <_strtod_l+0xace>
 80062d6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80062da:	2d00      	cmp	r5, #0
 80062dc:	d06d      	beq.n	80063ba <_strtod_l+0xbaa>
 80062de:	a30a      	add	r3, pc, #40	; (adr r3, 8006308 <_strtod_l+0xaf8>)
 80062e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e4:	4630      	mov	r0, r6
 80062e6:	4639      	mov	r1, r7
 80062e8:	f7fa fbf8 	bl	8000adc <__aeabi_dcmplt>
 80062ec:	2800      	cmp	r0, #0
 80062ee:	f47f acb8 	bne.w	8005c62 <_strtod_l+0x452>
 80062f2:	a307      	add	r3, pc, #28	; (adr r3, 8006310 <_strtod_l+0xb00>)
 80062f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f8:	4630      	mov	r0, r6
 80062fa:	4639      	mov	r1, r7
 80062fc:	f7fa fc0c 	bl	8000b18 <__aeabi_dcmpgt>
 8006300:	2800      	cmp	r0, #0
 8006302:	f43f af79 	beq.w	80061f8 <_strtod_l+0x9e8>
 8006306:	e4ac      	b.n	8005c62 <_strtod_l+0x452>
 8006308:	94a03595 	.word	0x94a03595
 800630c:	3fdfffff 	.word	0x3fdfffff
 8006310:	35afe535 	.word	0x35afe535
 8006314:	3fe00000 	.word	0x3fe00000
 8006318:	000fffff 	.word	0x000fffff
 800631c:	7ff00000 	.word	0x7ff00000
 8006320:	7fefffff 	.word	0x7fefffff
 8006324:	39500000 	.word	0x39500000
 8006328:	3ff00000 	.word	0x3ff00000
 800632c:	7fe00000 	.word	0x7fe00000
 8006330:	7c9fffff 	.word	0x7c9fffff
 8006334:	3fe00000 	.word	0x3fe00000
 8006338:	bff00000 	.word	0xbff00000
 800633c:	9b04      	ldr	r3, [sp, #16]
 800633e:	b333      	cbz	r3, 800638e <_strtod_l+0xb7e>
 8006340:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006342:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006346:	d822      	bhi.n	800638e <_strtod_l+0xb7e>
 8006348:	a327      	add	r3, pc, #156	; (adr r3, 80063e8 <_strtod_l+0xbd8>)
 800634a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800634e:	4630      	mov	r0, r6
 8006350:	4639      	mov	r1, r7
 8006352:	f7fa fbcd 	bl	8000af0 <__aeabi_dcmple>
 8006356:	b1a0      	cbz	r0, 8006382 <_strtod_l+0xb72>
 8006358:	4639      	mov	r1, r7
 800635a:	4630      	mov	r0, r6
 800635c:	f7fa fc24 	bl	8000ba8 <__aeabi_d2uiz>
 8006360:	2800      	cmp	r0, #0
 8006362:	bf08      	it	eq
 8006364:	2001      	moveq	r0, #1
 8006366:	f7fa f8cd 	bl	8000504 <__aeabi_ui2d>
 800636a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800636c:	4606      	mov	r6, r0
 800636e:	460f      	mov	r7, r1
 8006370:	bb03      	cbnz	r3, 80063b4 <_strtod_l+0xba4>
 8006372:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006376:	9012      	str	r0, [sp, #72]	; 0x48
 8006378:	9313      	str	r3, [sp, #76]	; 0x4c
 800637a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800637e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006382:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006384:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006386:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800638a:	1a9b      	subs	r3, r3, r2
 800638c:	930b      	str	r3, [sp, #44]	; 0x2c
 800638e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8006392:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8006396:	f001 fd3d 	bl	8007e14 <__ulp>
 800639a:	4650      	mov	r0, sl
 800639c:	ec53 2b10 	vmov	r2, r3, d0
 80063a0:	4659      	mov	r1, fp
 80063a2:	f7fa f929 	bl	80005f8 <__aeabi_dmul>
 80063a6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80063aa:	f7f9 ff6f 	bl	800028c <__adddf3>
 80063ae:	4682      	mov	sl, r0
 80063b0:	468b      	mov	fp, r1
 80063b2:	e772      	b.n	800629a <_strtod_l+0xa8a>
 80063b4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80063b8:	e7df      	b.n	800637a <_strtod_l+0xb6a>
 80063ba:	a30d      	add	r3, pc, #52	; (adr r3, 80063f0 <_strtod_l+0xbe0>)
 80063bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c0:	f7fa fb8c 	bl	8000adc <__aeabi_dcmplt>
 80063c4:	e79c      	b.n	8006300 <_strtod_l+0xaf0>
 80063c6:	2300      	movs	r3, #0
 80063c8:	930d      	str	r3, [sp, #52]	; 0x34
 80063ca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80063cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80063ce:	6013      	str	r3, [r2, #0]
 80063d0:	f7ff ba61 	b.w	8005896 <_strtod_l+0x86>
 80063d4:	2b65      	cmp	r3, #101	; 0x65
 80063d6:	f04f 0200 	mov.w	r2, #0
 80063da:	f43f ab4e 	beq.w	8005a7a <_strtod_l+0x26a>
 80063de:	2101      	movs	r1, #1
 80063e0:	4614      	mov	r4, r2
 80063e2:	9104      	str	r1, [sp, #16]
 80063e4:	f7ff bacb 	b.w	800597e <_strtod_l+0x16e>
 80063e8:	ffc00000 	.word	0xffc00000
 80063ec:	41dfffff 	.word	0x41dfffff
 80063f0:	94a03595 	.word	0x94a03595
 80063f4:	3fcfffff 	.word	0x3fcfffff

080063f8 <_strtod_r>:
 80063f8:	4b05      	ldr	r3, [pc, #20]	; (8006410 <_strtod_r+0x18>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	b410      	push	{r4}
 80063fe:	6a1b      	ldr	r3, [r3, #32]
 8006400:	4c04      	ldr	r4, [pc, #16]	; (8006414 <_strtod_r+0x1c>)
 8006402:	2b00      	cmp	r3, #0
 8006404:	bf08      	it	eq
 8006406:	4623      	moveq	r3, r4
 8006408:	f85d 4b04 	ldr.w	r4, [sp], #4
 800640c:	f7ff ba00 	b.w	8005810 <_strtod_l>
 8006410:	2000000c 	.word	0x2000000c
 8006414:	20000070 	.word	0x20000070

08006418 <_strtol_l.isra.0>:
 8006418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800641c:	4680      	mov	r8, r0
 800641e:	4689      	mov	r9, r1
 8006420:	4692      	mov	sl, r2
 8006422:	461e      	mov	r6, r3
 8006424:	460f      	mov	r7, r1
 8006426:	463d      	mov	r5, r7
 8006428:	9808      	ldr	r0, [sp, #32]
 800642a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800642e:	f001 f9ed 	bl	800780c <__locale_ctype_ptr_l>
 8006432:	4420      	add	r0, r4
 8006434:	7843      	ldrb	r3, [r0, #1]
 8006436:	f013 0308 	ands.w	r3, r3, #8
 800643a:	d132      	bne.n	80064a2 <_strtol_l.isra.0+0x8a>
 800643c:	2c2d      	cmp	r4, #45	; 0x2d
 800643e:	d132      	bne.n	80064a6 <_strtol_l.isra.0+0x8e>
 8006440:	787c      	ldrb	r4, [r7, #1]
 8006442:	1cbd      	adds	r5, r7, #2
 8006444:	2201      	movs	r2, #1
 8006446:	2e00      	cmp	r6, #0
 8006448:	d05d      	beq.n	8006506 <_strtol_l.isra.0+0xee>
 800644a:	2e10      	cmp	r6, #16
 800644c:	d109      	bne.n	8006462 <_strtol_l.isra.0+0x4a>
 800644e:	2c30      	cmp	r4, #48	; 0x30
 8006450:	d107      	bne.n	8006462 <_strtol_l.isra.0+0x4a>
 8006452:	782b      	ldrb	r3, [r5, #0]
 8006454:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006458:	2b58      	cmp	r3, #88	; 0x58
 800645a:	d14f      	bne.n	80064fc <_strtol_l.isra.0+0xe4>
 800645c:	786c      	ldrb	r4, [r5, #1]
 800645e:	2610      	movs	r6, #16
 8006460:	3502      	adds	r5, #2
 8006462:	2a00      	cmp	r2, #0
 8006464:	bf14      	ite	ne
 8006466:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800646a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800646e:	2700      	movs	r7, #0
 8006470:	fbb1 fcf6 	udiv	ip, r1, r6
 8006474:	4638      	mov	r0, r7
 8006476:	fb06 1e1c 	mls	lr, r6, ip, r1
 800647a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800647e:	2b09      	cmp	r3, #9
 8006480:	d817      	bhi.n	80064b2 <_strtol_l.isra.0+0x9a>
 8006482:	461c      	mov	r4, r3
 8006484:	42a6      	cmp	r6, r4
 8006486:	dd23      	ble.n	80064d0 <_strtol_l.isra.0+0xb8>
 8006488:	1c7b      	adds	r3, r7, #1
 800648a:	d007      	beq.n	800649c <_strtol_l.isra.0+0x84>
 800648c:	4584      	cmp	ip, r0
 800648e:	d31c      	bcc.n	80064ca <_strtol_l.isra.0+0xb2>
 8006490:	d101      	bne.n	8006496 <_strtol_l.isra.0+0x7e>
 8006492:	45a6      	cmp	lr, r4
 8006494:	db19      	blt.n	80064ca <_strtol_l.isra.0+0xb2>
 8006496:	fb00 4006 	mla	r0, r0, r6, r4
 800649a:	2701      	movs	r7, #1
 800649c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80064a0:	e7eb      	b.n	800647a <_strtol_l.isra.0+0x62>
 80064a2:	462f      	mov	r7, r5
 80064a4:	e7bf      	b.n	8006426 <_strtol_l.isra.0+0xe>
 80064a6:	2c2b      	cmp	r4, #43	; 0x2b
 80064a8:	bf04      	itt	eq
 80064aa:	1cbd      	addeq	r5, r7, #2
 80064ac:	787c      	ldrbeq	r4, [r7, #1]
 80064ae:	461a      	mov	r2, r3
 80064b0:	e7c9      	b.n	8006446 <_strtol_l.isra.0+0x2e>
 80064b2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80064b6:	2b19      	cmp	r3, #25
 80064b8:	d801      	bhi.n	80064be <_strtol_l.isra.0+0xa6>
 80064ba:	3c37      	subs	r4, #55	; 0x37
 80064bc:	e7e2      	b.n	8006484 <_strtol_l.isra.0+0x6c>
 80064be:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80064c2:	2b19      	cmp	r3, #25
 80064c4:	d804      	bhi.n	80064d0 <_strtol_l.isra.0+0xb8>
 80064c6:	3c57      	subs	r4, #87	; 0x57
 80064c8:	e7dc      	b.n	8006484 <_strtol_l.isra.0+0x6c>
 80064ca:	f04f 37ff 	mov.w	r7, #4294967295
 80064ce:	e7e5      	b.n	800649c <_strtol_l.isra.0+0x84>
 80064d0:	1c7b      	adds	r3, r7, #1
 80064d2:	d108      	bne.n	80064e6 <_strtol_l.isra.0+0xce>
 80064d4:	2322      	movs	r3, #34	; 0x22
 80064d6:	f8c8 3000 	str.w	r3, [r8]
 80064da:	4608      	mov	r0, r1
 80064dc:	f1ba 0f00 	cmp.w	sl, #0
 80064e0:	d107      	bne.n	80064f2 <_strtol_l.isra.0+0xda>
 80064e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064e6:	b102      	cbz	r2, 80064ea <_strtol_l.isra.0+0xd2>
 80064e8:	4240      	negs	r0, r0
 80064ea:	f1ba 0f00 	cmp.w	sl, #0
 80064ee:	d0f8      	beq.n	80064e2 <_strtol_l.isra.0+0xca>
 80064f0:	b10f      	cbz	r7, 80064f6 <_strtol_l.isra.0+0xde>
 80064f2:	f105 39ff 	add.w	r9, r5, #4294967295
 80064f6:	f8ca 9000 	str.w	r9, [sl]
 80064fa:	e7f2      	b.n	80064e2 <_strtol_l.isra.0+0xca>
 80064fc:	2430      	movs	r4, #48	; 0x30
 80064fe:	2e00      	cmp	r6, #0
 8006500:	d1af      	bne.n	8006462 <_strtol_l.isra.0+0x4a>
 8006502:	2608      	movs	r6, #8
 8006504:	e7ad      	b.n	8006462 <_strtol_l.isra.0+0x4a>
 8006506:	2c30      	cmp	r4, #48	; 0x30
 8006508:	d0a3      	beq.n	8006452 <_strtol_l.isra.0+0x3a>
 800650a:	260a      	movs	r6, #10
 800650c:	e7a9      	b.n	8006462 <_strtol_l.isra.0+0x4a>
	...

08006510 <_strtol_r>:
 8006510:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006512:	4c06      	ldr	r4, [pc, #24]	; (800652c <_strtol_r+0x1c>)
 8006514:	4d06      	ldr	r5, [pc, #24]	; (8006530 <_strtol_r+0x20>)
 8006516:	6824      	ldr	r4, [r4, #0]
 8006518:	6a24      	ldr	r4, [r4, #32]
 800651a:	2c00      	cmp	r4, #0
 800651c:	bf08      	it	eq
 800651e:	462c      	moveq	r4, r5
 8006520:	9400      	str	r4, [sp, #0]
 8006522:	f7ff ff79 	bl	8006418 <_strtol_l.isra.0>
 8006526:	b003      	add	sp, #12
 8006528:	bd30      	pop	{r4, r5, pc}
 800652a:	bf00      	nop
 800652c:	2000000c 	.word	0x2000000c
 8006530:	20000070 	.word	0x20000070

08006534 <quorem>:
 8006534:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006538:	6903      	ldr	r3, [r0, #16]
 800653a:	690c      	ldr	r4, [r1, #16]
 800653c:	42a3      	cmp	r3, r4
 800653e:	4680      	mov	r8, r0
 8006540:	f2c0 8082 	blt.w	8006648 <quorem+0x114>
 8006544:	3c01      	subs	r4, #1
 8006546:	f101 0714 	add.w	r7, r1, #20
 800654a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800654e:	f100 0614 	add.w	r6, r0, #20
 8006552:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006556:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800655a:	eb06 030c 	add.w	r3, r6, ip
 800655e:	3501      	adds	r5, #1
 8006560:	eb07 090c 	add.w	r9, r7, ip
 8006564:	9301      	str	r3, [sp, #4]
 8006566:	fbb0 f5f5 	udiv	r5, r0, r5
 800656a:	b395      	cbz	r5, 80065d2 <quorem+0x9e>
 800656c:	f04f 0a00 	mov.w	sl, #0
 8006570:	4638      	mov	r0, r7
 8006572:	46b6      	mov	lr, r6
 8006574:	46d3      	mov	fp, sl
 8006576:	f850 2b04 	ldr.w	r2, [r0], #4
 800657a:	b293      	uxth	r3, r2
 800657c:	fb05 a303 	mla	r3, r5, r3, sl
 8006580:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006584:	b29b      	uxth	r3, r3
 8006586:	ebab 0303 	sub.w	r3, fp, r3
 800658a:	0c12      	lsrs	r2, r2, #16
 800658c:	f8de b000 	ldr.w	fp, [lr]
 8006590:	fb05 a202 	mla	r2, r5, r2, sl
 8006594:	fa13 f38b 	uxtah	r3, r3, fp
 8006598:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800659c:	fa1f fb82 	uxth.w	fp, r2
 80065a0:	f8de 2000 	ldr.w	r2, [lr]
 80065a4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80065a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065b2:	4581      	cmp	r9, r0
 80065b4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80065b8:	f84e 3b04 	str.w	r3, [lr], #4
 80065bc:	d2db      	bcs.n	8006576 <quorem+0x42>
 80065be:	f856 300c 	ldr.w	r3, [r6, ip]
 80065c2:	b933      	cbnz	r3, 80065d2 <quorem+0x9e>
 80065c4:	9b01      	ldr	r3, [sp, #4]
 80065c6:	3b04      	subs	r3, #4
 80065c8:	429e      	cmp	r6, r3
 80065ca:	461a      	mov	r2, r3
 80065cc:	d330      	bcc.n	8006630 <quorem+0xfc>
 80065ce:	f8c8 4010 	str.w	r4, [r8, #16]
 80065d2:	4640      	mov	r0, r8
 80065d4:	f001 fba6 	bl	8007d24 <__mcmp>
 80065d8:	2800      	cmp	r0, #0
 80065da:	db25      	blt.n	8006628 <quorem+0xf4>
 80065dc:	3501      	adds	r5, #1
 80065de:	4630      	mov	r0, r6
 80065e0:	f04f 0c00 	mov.w	ip, #0
 80065e4:	f857 2b04 	ldr.w	r2, [r7], #4
 80065e8:	f8d0 e000 	ldr.w	lr, [r0]
 80065ec:	b293      	uxth	r3, r2
 80065ee:	ebac 0303 	sub.w	r3, ip, r3
 80065f2:	0c12      	lsrs	r2, r2, #16
 80065f4:	fa13 f38e 	uxtah	r3, r3, lr
 80065f8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80065fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006600:	b29b      	uxth	r3, r3
 8006602:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006606:	45b9      	cmp	r9, r7
 8006608:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800660c:	f840 3b04 	str.w	r3, [r0], #4
 8006610:	d2e8      	bcs.n	80065e4 <quorem+0xb0>
 8006612:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006616:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800661a:	b92a      	cbnz	r2, 8006628 <quorem+0xf4>
 800661c:	3b04      	subs	r3, #4
 800661e:	429e      	cmp	r6, r3
 8006620:	461a      	mov	r2, r3
 8006622:	d30b      	bcc.n	800663c <quorem+0x108>
 8006624:	f8c8 4010 	str.w	r4, [r8, #16]
 8006628:	4628      	mov	r0, r5
 800662a:	b003      	add	sp, #12
 800662c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006630:	6812      	ldr	r2, [r2, #0]
 8006632:	3b04      	subs	r3, #4
 8006634:	2a00      	cmp	r2, #0
 8006636:	d1ca      	bne.n	80065ce <quorem+0x9a>
 8006638:	3c01      	subs	r4, #1
 800663a:	e7c5      	b.n	80065c8 <quorem+0x94>
 800663c:	6812      	ldr	r2, [r2, #0]
 800663e:	3b04      	subs	r3, #4
 8006640:	2a00      	cmp	r2, #0
 8006642:	d1ef      	bne.n	8006624 <quorem+0xf0>
 8006644:	3c01      	subs	r4, #1
 8006646:	e7ea      	b.n	800661e <quorem+0xea>
 8006648:	2000      	movs	r0, #0
 800664a:	e7ee      	b.n	800662a <quorem+0xf6>
 800664c:	0000      	movs	r0, r0
	...

08006650 <_dtoa_r>:
 8006650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006654:	ec57 6b10 	vmov	r6, r7, d0
 8006658:	b097      	sub	sp, #92	; 0x5c
 800665a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800665c:	9106      	str	r1, [sp, #24]
 800665e:	4604      	mov	r4, r0
 8006660:	920b      	str	r2, [sp, #44]	; 0x2c
 8006662:	9312      	str	r3, [sp, #72]	; 0x48
 8006664:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006668:	e9cd 6700 	strd	r6, r7, [sp]
 800666c:	b93d      	cbnz	r5, 800667e <_dtoa_r+0x2e>
 800666e:	2010      	movs	r0, #16
 8006670:	f001 f8e0 	bl	8007834 <malloc>
 8006674:	6260      	str	r0, [r4, #36]	; 0x24
 8006676:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800667a:	6005      	str	r5, [r0, #0]
 800667c:	60c5      	str	r5, [r0, #12]
 800667e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006680:	6819      	ldr	r1, [r3, #0]
 8006682:	b151      	cbz	r1, 800669a <_dtoa_r+0x4a>
 8006684:	685a      	ldr	r2, [r3, #4]
 8006686:	604a      	str	r2, [r1, #4]
 8006688:	2301      	movs	r3, #1
 800668a:	4093      	lsls	r3, r2
 800668c:	608b      	str	r3, [r1, #8]
 800668e:	4620      	mov	r0, r4
 8006690:	f001 f929 	bl	80078e6 <_Bfree>
 8006694:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006696:	2200      	movs	r2, #0
 8006698:	601a      	str	r2, [r3, #0]
 800669a:	1e3b      	subs	r3, r7, #0
 800669c:	bfbb      	ittet	lt
 800669e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80066a2:	9301      	strlt	r3, [sp, #4]
 80066a4:	2300      	movge	r3, #0
 80066a6:	2201      	movlt	r2, #1
 80066a8:	bfac      	ite	ge
 80066aa:	f8c8 3000 	strge.w	r3, [r8]
 80066ae:	f8c8 2000 	strlt.w	r2, [r8]
 80066b2:	4baf      	ldr	r3, [pc, #700]	; (8006970 <_dtoa_r+0x320>)
 80066b4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80066b8:	ea33 0308 	bics.w	r3, r3, r8
 80066bc:	d114      	bne.n	80066e8 <_dtoa_r+0x98>
 80066be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80066c0:	f242 730f 	movw	r3, #9999	; 0x270f
 80066c4:	6013      	str	r3, [r2, #0]
 80066c6:	9b00      	ldr	r3, [sp, #0]
 80066c8:	b923      	cbnz	r3, 80066d4 <_dtoa_r+0x84>
 80066ca:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80066ce:	2800      	cmp	r0, #0
 80066d0:	f000 8542 	beq.w	8007158 <_dtoa_r+0xb08>
 80066d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066d6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8006984 <_dtoa_r+0x334>
 80066da:	2b00      	cmp	r3, #0
 80066dc:	f000 8544 	beq.w	8007168 <_dtoa_r+0xb18>
 80066e0:	f10b 0303 	add.w	r3, fp, #3
 80066e4:	f000 bd3e 	b.w	8007164 <_dtoa_r+0xb14>
 80066e8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80066ec:	2200      	movs	r2, #0
 80066ee:	2300      	movs	r3, #0
 80066f0:	4630      	mov	r0, r6
 80066f2:	4639      	mov	r1, r7
 80066f4:	f7fa f9e8 	bl	8000ac8 <__aeabi_dcmpeq>
 80066f8:	4681      	mov	r9, r0
 80066fa:	b168      	cbz	r0, 8006718 <_dtoa_r+0xc8>
 80066fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80066fe:	2301      	movs	r3, #1
 8006700:	6013      	str	r3, [r2, #0]
 8006702:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006704:	2b00      	cmp	r3, #0
 8006706:	f000 8524 	beq.w	8007152 <_dtoa_r+0xb02>
 800670a:	4b9a      	ldr	r3, [pc, #616]	; (8006974 <_dtoa_r+0x324>)
 800670c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800670e:	f103 3bff 	add.w	fp, r3, #4294967295
 8006712:	6013      	str	r3, [r2, #0]
 8006714:	f000 bd28 	b.w	8007168 <_dtoa_r+0xb18>
 8006718:	aa14      	add	r2, sp, #80	; 0x50
 800671a:	a915      	add	r1, sp, #84	; 0x54
 800671c:	ec47 6b10 	vmov	d0, r6, r7
 8006720:	4620      	mov	r0, r4
 8006722:	f001 fbed 	bl	8007f00 <__d2b>
 8006726:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800672a:	9004      	str	r0, [sp, #16]
 800672c:	2d00      	cmp	r5, #0
 800672e:	d07c      	beq.n	800682a <_dtoa_r+0x1da>
 8006730:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006734:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8006738:	46b2      	mov	sl, r6
 800673a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800673e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006742:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8006746:	2200      	movs	r2, #0
 8006748:	4b8b      	ldr	r3, [pc, #556]	; (8006978 <_dtoa_r+0x328>)
 800674a:	4650      	mov	r0, sl
 800674c:	4659      	mov	r1, fp
 800674e:	f7f9 fd9b 	bl	8000288 <__aeabi_dsub>
 8006752:	a381      	add	r3, pc, #516	; (adr r3, 8006958 <_dtoa_r+0x308>)
 8006754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006758:	f7f9 ff4e 	bl	80005f8 <__aeabi_dmul>
 800675c:	a380      	add	r3, pc, #512	; (adr r3, 8006960 <_dtoa_r+0x310>)
 800675e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006762:	f7f9 fd93 	bl	800028c <__adddf3>
 8006766:	4606      	mov	r6, r0
 8006768:	4628      	mov	r0, r5
 800676a:	460f      	mov	r7, r1
 800676c:	f7f9 feda 	bl	8000524 <__aeabi_i2d>
 8006770:	a37d      	add	r3, pc, #500	; (adr r3, 8006968 <_dtoa_r+0x318>)
 8006772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006776:	f7f9 ff3f 	bl	80005f8 <__aeabi_dmul>
 800677a:	4602      	mov	r2, r0
 800677c:	460b      	mov	r3, r1
 800677e:	4630      	mov	r0, r6
 8006780:	4639      	mov	r1, r7
 8006782:	f7f9 fd83 	bl	800028c <__adddf3>
 8006786:	4606      	mov	r6, r0
 8006788:	460f      	mov	r7, r1
 800678a:	f7fa f9e5 	bl	8000b58 <__aeabi_d2iz>
 800678e:	2200      	movs	r2, #0
 8006790:	4682      	mov	sl, r0
 8006792:	2300      	movs	r3, #0
 8006794:	4630      	mov	r0, r6
 8006796:	4639      	mov	r1, r7
 8006798:	f7fa f9a0 	bl	8000adc <__aeabi_dcmplt>
 800679c:	b148      	cbz	r0, 80067b2 <_dtoa_r+0x162>
 800679e:	4650      	mov	r0, sl
 80067a0:	f7f9 fec0 	bl	8000524 <__aeabi_i2d>
 80067a4:	4632      	mov	r2, r6
 80067a6:	463b      	mov	r3, r7
 80067a8:	f7fa f98e 	bl	8000ac8 <__aeabi_dcmpeq>
 80067ac:	b908      	cbnz	r0, 80067b2 <_dtoa_r+0x162>
 80067ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80067b2:	f1ba 0f16 	cmp.w	sl, #22
 80067b6:	d859      	bhi.n	800686c <_dtoa_r+0x21c>
 80067b8:	4970      	ldr	r1, [pc, #448]	; (800697c <_dtoa_r+0x32c>)
 80067ba:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80067be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80067c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067c6:	f7fa f9a7 	bl	8000b18 <__aeabi_dcmpgt>
 80067ca:	2800      	cmp	r0, #0
 80067cc:	d050      	beq.n	8006870 <_dtoa_r+0x220>
 80067ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80067d2:	2300      	movs	r3, #0
 80067d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80067d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80067d8:	1b5d      	subs	r5, r3, r5
 80067da:	f1b5 0801 	subs.w	r8, r5, #1
 80067de:	bf49      	itett	mi
 80067e0:	f1c5 0301 	rsbmi	r3, r5, #1
 80067e4:	2300      	movpl	r3, #0
 80067e6:	9305      	strmi	r3, [sp, #20]
 80067e8:	f04f 0800 	movmi.w	r8, #0
 80067ec:	bf58      	it	pl
 80067ee:	9305      	strpl	r3, [sp, #20]
 80067f0:	f1ba 0f00 	cmp.w	sl, #0
 80067f4:	db3e      	blt.n	8006874 <_dtoa_r+0x224>
 80067f6:	2300      	movs	r3, #0
 80067f8:	44d0      	add	r8, sl
 80067fa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80067fe:	9307      	str	r3, [sp, #28]
 8006800:	9b06      	ldr	r3, [sp, #24]
 8006802:	2b09      	cmp	r3, #9
 8006804:	f200 8090 	bhi.w	8006928 <_dtoa_r+0x2d8>
 8006808:	2b05      	cmp	r3, #5
 800680a:	bfc4      	itt	gt
 800680c:	3b04      	subgt	r3, #4
 800680e:	9306      	strgt	r3, [sp, #24]
 8006810:	9b06      	ldr	r3, [sp, #24]
 8006812:	f1a3 0302 	sub.w	r3, r3, #2
 8006816:	bfcc      	ite	gt
 8006818:	2500      	movgt	r5, #0
 800681a:	2501      	movle	r5, #1
 800681c:	2b03      	cmp	r3, #3
 800681e:	f200 808f 	bhi.w	8006940 <_dtoa_r+0x2f0>
 8006822:	e8df f003 	tbb	[pc, r3]
 8006826:	7f7d      	.short	0x7f7d
 8006828:	7131      	.short	0x7131
 800682a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800682e:	441d      	add	r5, r3
 8006830:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006834:	2820      	cmp	r0, #32
 8006836:	dd13      	ble.n	8006860 <_dtoa_r+0x210>
 8006838:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800683c:	9b00      	ldr	r3, [sp, #0]
 800683e:	fa08 f800 	lsl.w	r8, r8, r0
 8006842:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006846:	fa23 f000 	lsr.w	r0, r3, r0
 800684a:	ea48 0000 	orr.w	r0, r8, r0
 800684e:	f7f9 fe59 	bl	8000504 <__aeabi_ui2d>
 8006852:	2301      	movs	r3, #1
 8006854:	4682      	mov	sl, r0
 8006856:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800685a:	3d01      	subs	r5, #1
 800685c:	9313      	str	r3, [sp, #76]	; 0x4c
 800685e:	e772      	b.n	8006746 <_dtoa_r+0xf6>
 8006860:	9b00      	ldr	r3, [sp, #0]
 8006862:	f1c0 0020 	rsb	r0, r0, #32
 8006866:	fa03 f000 	lsl.w	r0, r3, r0
 800686a:	e7f0      	b.n	800684e <_dtoa_r+0x1fe>
 800686c:	2301      	movs	r3, #1
 800686e:	e7b1      	b.n	80067d4 <_dtoa_r+0x184>
 8006870:	900f      	str	r0, [sp, #60]	; 0x3c
 8006872:	e7b0      	b.n	80067d6 <_dtoa_r+0x186>
 8006874:	9b05      	ldr	r3, [sp, #20]
 8006876:	eba3 030a 	sub.w	r3, r3, sl
 800687a:	9305      	str	r3, [sp, #20]
 800687c:	f1ca 0300 	rsb	r3, sl, #0
 8006880:	9307      	str	r3, [sp, #28]
 8006882:	2300      	movs	r3, #0
 8006884:	930e      	str	r3, [sp, #56]	; 0x38
 8006886:	e7bb      	b.n	8006800 <_dtoa_r+0x1b0>
 8006888:	2301      	movs	r3, #1
 800688a:	930a      	str	r3, [sp, #40]	; 0x28
 800688c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800688e:	2b00      	cmp	r3, #0
 8006890:	dd59      	ble.n	8006946 <_dtoa_r+0x2f6>
 8006892:	9302      	str	r3, [sp, #8]
 8006894:	4699      	mov	r9, r3
 8006896:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006898:	2200      	movs	r2, #0
 800689a:	6072      	str	r2, [r6, #4]
 800689c:	2204      	movs	r2, #4
 800689e:	f102 0014 	add.w	r0, r2, #20
 80068a2:	4298      	cmp	r0, r3
 80068a4:	6871      	ldr	r1, [r6, #4]
 80068a6:	d953      	bls.n	8006950 <_dtoa_r+0x300>
 80068a8:	4620      	mov	r0, r4
 80068aa:	f000 ffe8 	bl	800787e <_Balloc>
 80068ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068b0:	6030      	str	r0, [r6, #0]
 80068b2:	f1b9 0f0e 	cmp.w	r9, #14
 80068b6:	f8d3 b000 	ldr.w	fp, [r3]
 80068ba:	f200 80e6 	bhi.w	8006a8a <_dtoa_r+0x43a>
 80068be:	2d00      	cmp	r5, #0
 80068c0:	f000 80e3 	beq.w	8006a8a <_dtoa_r+0x43a>
 80068c4:	ed9d 7b00 	vldr	d7, [sp]
 80068c8:	f1ba 0f00 	cmp.w	sl, #0
 80068cc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80068d0:	dd74      	ble.n	80069bc <_dtoa_r+0x36c>
 80068d2:	4a2a      	ldr	r2, [pc, #168]	; (800697c <_dtoa_r+0x32c>)
 80068d4:	f00a 030f 	and.w	r3, sl, #15
 80068d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80068dc:	ed93 7b00 	vldr	d7, [r3]
 80068e0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80068e4:	06f0      	lsls	r0, r6, #27
 80068e6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80068ea:	d565      	bpl.n	80069b8 <_dtoa_r+0x368>
 80068ec:	4b24      	ldr	r3, [pc, #144]	; (8006980 <_dtoa_r+0x330>)
 80068ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80068f2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80068f6:	f7f9 ffa9 	bl	800084c <__aeabi_ddiv>
 80068fa:	e9cd 0100 	strd	r0, r1, [sp]
 80068fe:	f006 060f 	and.w	r6, r6, #15
 8006902:	2503      	movs	r5, #3
 8006904:	4f1e      	ldr	r7, [pc, #120]	; (8006980 <_dtoa_r+0x330>)
 8006906:	e04c      	b.n	80069a2 <_dtoa_r+0x352>
 8006908:	2301      	movs	r3, #1
 800690a:	930a      	str	r3, [sp, #40]	; 0x28
 800690c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800690e:	4453      	add	r3, sl
 8006910:	f103 0901 	add.w	r9, r3, #1
 8006914:	9302      	str	r3, [sp, #8]
 8006916:	464b      	mov	r3, r9
 8006918:	2b01      	cmp	r3, #1
 800691a:	bfb8      	it	lt
 800691c:	2301      	movlt	r3, #1
 800691e:	e7ba      	b.n	8006896 <_dtoa_r+0x246>
 8006920:	2300      	movs	r3, #0
 8006922:	e7b2      	b.n	800688a <_dtoa_r+0x23a>
 8006924:	2300      	movs	r3, #0
 8006926:	e7f0      	b.n	800690a <_dtoa_r+0x2ba>
 8006928:	2501      	movs	r5, #1
 800692a:	2300      	movs	r3, #0
 800692c:	9306      	str	r3, [sp, #24]
 800692e:	950a      	str	r5, [sp, #40]	; 0x28
 8006930:	f04f 33ff 	mov.w	r3, #4294967295
 8006934:	9302      	str	r3, [sp, #8]
 8006936:	4699      	mov	r9, r3
 8006938:	2200      	movs	r2, #0
 800693a:	2312      	movs	r3, #18
 800693c:	920b      	str	r2, [sp, #44]	; 0x2c
 800693e:	e7aa      	b.n	8006896 <_dtoa_r+0x246>
 8006940:	2301      	movs	r3, #1
 8006942:	930a      	str	r3, [sp, #40]	; 0x28
 8006944:	e7f4      	b.n	8006930 <_dtoa_r+0x2e0>
 8006946:	2301      	movs	r3, #1
 8006948:	9302      	str	r3, [sp, #8]
 800694a:	4699      	mov	r9, r3
 800694c:	461a      	mov	r2, r3
 800694e:	e7f5      	b.n	800693c <_dtoa_r+0x2ec>
 8006950:	3101      	adds	r1, #1
 8006952:	6071      	str	r1, [r6, #4]
 8006954:	0052      	lsls	r2, r2, #1
 8006956:	e7a2      	b.n	800689e <_dtoa_r+0x24e>
 8006958:	636f4361 	.word	0x636f4361
 800695c:	3fd287a7 	.word	0x3fd287a7
 8006960:	8b60c8b3 	.word	0x8b60c8b3
 8006964:	3fc68a28 	.word	0x3fc68a28
 8006968:	509f79fb 	.word	0x509f79fb
 800696c:	3fd34413 	.word	0x3fd34413
 8006970:	7ff00000 	.word	0x7ff00000
 8006974:	08009bae 	.word	0x08009bae
 8006978:	3ff80000 	.word	0x3ff80000
 800697c:	08009c68 	.word	0x08009c68
 8006980:	08009c40 	.word	0x08009c40
 8006984:	08009c31 	.word	0x08009c31
 8006988:	07f1      	lsls	r1, r6, #31
 800698a:	d508      	bpl.n	800699e <_dtoa_r+0x34e>
 800698c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006990:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006994:	f7f9 fe30 	bl	80005f8 <__aeabi_dmul>
 8006998:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800699c:	3501      	adds	r5, #1
 800699e:	1076      	asrs	r6, r6, #1
 80069a0:	3708      	adds	r7, #8
 80069a2:	2e00      	cmp	r6, #0
 80069a4:	d1f0      	bne.n	8006988 <_dtoa_r+0x338>
 80069a6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80069aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80069ae:	f7f9 ff4d 	bl	800084c <__aeabi_ddiv>
 80069b2:	e9cd 0100 	strd	r0, r1, [sp]
 80069b6:	e01a      	b.n	80069ee <_dtoa_r+0x39e>
 80069b8:	2502      	movs	r5, #2
 80069ba:	e7a3      	b.n	8006904 <_dtoa_r+0x2b4>
 80069bc:	f000 80a0 	beq.w	8006b00 <_dtoa_r+0x4b0>
 80069c0:	f1ca 0600 	rsb	r6, sl, #0
 80069c4:	4b9f      	ldr	r3, [pc, #636]	; (8006c44 <_dtoa_r+0x5f4>)
 80069c6:	4fa0      	ldr	r7, [pc, #640]	; (8006c48 <_dtoa_r+0x5f8>)
 80069c8:	f006 020f 	and.w	r2, r6, #15
 80069cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80069d8:	f7f9 fe0e 	bl	80005f8 <__aeabi_dmul>
 80069dc:	e9cd 0100 	strd	r0, r1, [sp]
 80069e0:	1136      	asrs	r6, r6, #4
 80069e2:	2300      	movs	r3, #0
 80069e4:	2502      	movs	r5, #2
 80069e6:	2e00      	cmp	r6, #0
 80069e8:	d17f      	bne.n	8006aea <_dtoa_r+0x49a>
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d1e1      	bne.n	80069b2 <_dtoa_r+0x362>
 80069ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	f000 8087 	beq.w	8006b04 <_dtoa_r+0x4b4>
 80069f6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80069fa:	2200      	movs	r2, #0
 80069fc:	4b93      	ldr	r3, [pc, #588]	; (8006c4c <_dtoa_r+0x5fc>)
 80069fe:	4630      	mov	r0, r6
 8006a00:	4639      	mov	r1, r7
 8006a02:	f7fa f86b 	bl	8000adc <__aeabi_dcmplt>
 8006a06:	2800      	cmp	r0, #0
 8006a08:	d07c      	beq.n	8006b04 <_dtoa_r+0x4b4>
 8006a0a:	f1b9 0f00 	cmp.w	r9, #0
 8006a0e:	d079      	beq.n	8006b04 <_dtoa_r+0x4b4>
 8006a10:	9b02      	ldr	r3, [sp, #8]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	dd35      	ble.n	8006a82 <_dtoa_r+0x432>
 8006a16:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006a1a:	9308      	str	r3, [sp, #32]
 8006a1c:	4639      	mov	r1, r7
 8006a1e:	2200      	movs	r2, #0
 8006a20:	4b8b      	ldr	r3, [pc, #556]	; (8006c50 <_dtoa_r+0x600>)
 8006a22:	4630      	mov	r0, r6
 8006a24:	f7f9 fde8 	bl	80005f8 <__aeabi_dmul>
 8006a28:	e9cd 0100 	strd	r0, r1, [sp]
 8006a2c:	9f02      	ldr	r7, [sp, #8]
 8006a2e:	3501      	adds	r5, #1
 8006a30:	4628      	mov	r0, r5
 8006a32:	f7f9 fd77 	bl	8000524 <__aeabi_i2d>
 8006a36:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006a3a:	f7f9 fddd 	bl	80005f8 <__aeabi_dmul>
 8006a3e:	2200      	movs	r2, #0
 8006a40:	4b84      	ldr	r3, [pc, #528]	; (8006c54 <_dtoa_r+0x604>)
 8006a42:	f7f9 fc23 	bl	800028c <__adddf3>
 8006a46:	4605      	mov	r5, r0
 8006a48:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006a4c:	2f00      	cmp	r7, #0
 8006a4e:	d15d      	bne.n	8006b0c <_dtoa_r+0x4bc>
 8006a50:	2200      	movs	r2, #0
 8006a52:	4b81      	ldr	r3, [pc, #516]	; (8006c58 <_dtoa_r+0x608>)
 8006a54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a58:	f7f9 fc16 	bl	8000288 <__aeabi_dsub>
 8006a5c:	462a      	mov	r2, r5
 8006a5e:	4633      	mov	r3, r6
 8006a60:	e9cd 0100 	strd	r0, r1, [sp]
 8006a64:	f7fa f858 	bl	8000b18 <__aeabi_dcmpgt>
 8006a68:	2800      	cmp	r0, #0
 8006a6a:	f040 8288 	bne.w	8006f7e <_dtoa_r+0x92e>
 8006a6e:	462a      	mov	r2, r5
 8006a70:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006a74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a78:	f7fa f830 	bl	8000adc <__aeabi_dcmplt>
 8006a7c:	2800      	cmp	r0, #0
 8006a7e:	f040 827c 	bne.w	8006f7a <_dtoa_r+0x92a>
 8006a82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006a86:	e9cd 2300 	strd	r2, r3, [sp]
 8006a8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	f2c0 8150 	blt.w	8006d32 <_dtoa_r+0x6e2>
 8006a92:	f1ba 0f0e 	cmp.w	sl, #14
 8006a96:	f300 814c 	bgt.w	8006d32 <_dtoa_r+0x6e2>
 8006a9a:	4b6a      	ldr	r3, [pc, #424]	; (8006c44 <_dtoa_r+0x5f4>)
 8006a9c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006aa0:	ed93 7b00 	vldr	d7, [r3]
 8006aa4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006aac:	f280 80d8 	bge.w	8006c60 <_dtoa_r+0x610>
 8006ab0:	f1b9 0f00 	cmp.w	r9, #0
 8006ab4:	f300 80d4 	bgt.w	8006c60 <_dtoa_r+0x610>
 8006ab8:	f040 825e 	bne.w	8006f78 <_dtoa_r+0x928>
 8006abc:	2200      	movs	r2, #0
 8006abe:	4b66      	ldr	r3, [pc, #408]	; (8006c58 <_dtoa_r+0x608>)
 8006ac0:	ec51 0b17 	vmov	r0, r1, d7
 8006ac4:	f7f9 fd98 	bl	80005f8 <__aeabi_dmul>
 8006ac8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006acc:	f7fa f81a 	bl	8000b04 <__aeabi_dcmpge>
 8006ad0:	464f      	mov	r7, r9
 8006ad2:	464e      	mov	r6, r9
 8006ad4:	2800      	cmp	r0, #0
 8006ad6:	f040 8234 	bne.w	8006f42 <_dtoa_r+0x8f2>
 8006ada:	2331      	movs	r3, #49	; 0x31
 8006adc:	f10b 0501 	add.w	r5, fp, #1
 8006ae0:	f88b 3000 	strb.w	r3, [fp]
 8006ae4:	f10a 0a01 	add.w	sl, sl, #1
 8006ae8:	e22f      	b.n	8006f4a <_dtoa_r+0x8fa>
 8006aea:	07f2      	lsls	r2, r6, #31
 8006aec:	d505      	bpl.n	8006afa <_dtoa_r+0x4aa>
 8006aee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006af2:	f7f9 fd81 	bl	80005f8 <__aeabi_dmul>
 8006af6:	3501      	adds	r5, #1
 8006af8:	2301      	movs	r3, #1
 8006afa:	1076      	asrs	r6, r6, #1
 8006afc:	3708      	adds	r7, #8
 8006afe:	e772      	b.n	80069e6 <_dtoa_r+0x396>
 8006b00:	2502      	movs	r5, #2
 8006b02:	e774      	b.n	80069ee <_dtoa_r+0x39e>
 8006b04:	f8cd a020 	str.w	sl, [sp, #32]
 8006b08:	464f      	mov	r7, r9
 8006b0a:	e791      	b.n	8006a30 <_dtoa_r+0x3e0>
 8006b0c:	4b4d      	ldr	r3, [pc, #308]	; (8006c44 <_dtoa_r+0x5f4>)
 8006b0e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006b12:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006b16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d047      	beq.n	8006bac <_dtoa_r+0x55c>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	460b      	mov	r3, r1
 8006b20:	2000      	movs	r0, #0
 8006b22:	494e      	ldr	r1, [pc, #312]	; (8006c5c <_dtoa_r+0x60c>)
 8006b24:	f7f9 fe92 	bl	800084c <__aeabi_ddiv>
 8006b28:	462a      	mov	r2, r5
 8006b2a:	4633      	mov	r3, r6
 8006b2c:	f7f9 fbac 	bl	8000288 <__aeabi_dsub>
 8006b30:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006b34:	465d      	mov	r5, fp
 8006b36:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b3a:	f7fa f80d 	bl	8000b58 <__aeabi_d2iz>
 8006b3e:	4606      	mov	r6, r0
 8006b40:	f7f9 fcf0 	bl	8000524 <__aeabi_i2d>
 8006b44:	4602      	mov	r2, r0
 8006b46:	460b      	mov	r3, r1
 8006b48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b4c:	f7f9 fb9c 	bl	8000288 <__aeabi_dsub>
 8006b50:	3630      	adds	r6, #48	; 0x30
 8006b52:	f805 6b01 	strb.w	r6, [r5], #1
 8006b56:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006b5a:	e9cd 0100 	strd	r0, r1, [sp]
 8006b5e:	f7f9 ffbd 	bl	8000adc <__aeabi_dcmplt>
 8006b62:	2800      	cmp	r0, #0
 8006b64:	d163      	bne.n	8006c2e <_dtoa_r+0x5de>
 8006b66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b6a:	2000      	movs	r0, #0
 8006b6c:	4937      	ldr	r1, [pc, #220]	; (8006c4c <_dtoa_r+0x5fc>)
 8006b6e:	f7f9 fb8b 	bl	8000288 <__aeabi_dsub>
 8006b72:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006b76:	f7f9 ffb1 	bl	8000adc <__aeabi_dcmplt>
 8006b7a:	2800      	cmp	r0, #0
 8006b7c:	f040 80b7 	bne.w	8006cee <_dtoa_r+0x69e>
 8006b80:	eba5 030b 	sub.w	r3, r5, fp
 8006b84:	429f      	cmp	r7, r3
 8006b86:	f77f af7c 	ble.w	8006a82 <_dtoa_r+0x432>
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	4b30      	ldr	r3, [pc, #192]	; (8006c50 <_dtoa_r+0x600>)
 8006b8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006b92:	f7f9 fd31 	bl	80005f8 <__aeabi_dmul>
 8006b96:	2200      	movs	r2, #0
 8006b98:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006b9c:	4b2c      	ldr	r3, [pc, #176]	; (8006c50 <_dtoa_r+0x600>)
 8006b9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ba2:	f7f9 fd29 	bl	80005f8 <__aeabi_dmul>
 8006ba6:	e9cd 0100 	strd	r0, r1, [sp]
 8006baa:	e7c4      	b.n	8006b36 <_dtoa_r+0x4e6>
 8006bac:	462a      	mov	r2, r5
 8006bae:	4633      	mov	r3, r6
 8006bb0:	f7f9 fd22 	bl	80005f8 <__aeabi_dmul>
 8006bb4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006bb8:	eb0b 0507 	add.w	r5, fp, r7
 8006bbc:	465e      	mov	r6, fp
 8006bbe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006bc2:	f7f9 ffc9 	bl	8000b58 <__aeabi_d2iz>
 8006bc6:	4607      	mov	r7, r0
 8006bc8:	f7f9 fcac 	bl	8000524 <__aeabi_i2d>
 8006bcc:	3730      	adds	r7, #48	; 0x30
 8006bce:	4602      	mov	r2, r0
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006bd6:	f7f9 fb57 	bl	8000288 <__aeabi_dsub>
 8006bda:	f806 7b01 	strb.w	r7, [r6], #1
 8006bde:	42ae      	cmp	r6, r5
 8006be0:	e9cd 0100 	strd	r0, r1, [sp]
 8006be4:	f04f 0200 	mov.w	r2, #0
 8006be8:	d126      	bne.n	8006c38 <_dtoa_r+0x5e8>
 8006bea:	4b1c      	ldr	r3, [pc, #112]	; (8006c5c <_dtoa_r+0x60c>)
 8006bec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006bf0:	f7f9 fb4c 	bl	800028c <__adddf3>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006bfc:	f7f9 ff8c 	bl	8000b18 <__aeabi_dcmpgt>
 8006c00:	2800      	cmp	r0, #0
 8006c02:	d174      	bne.n	8006cee <_dtoa_r+0x69e>
 8006c04:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006c08:	2000      	movs	r0, #0
 8006c0a:	4914      	ldr	r1, [pc, #80]	; (8006c5c <_dtoa_r+0x60c>)
 8006c0c:	f7f9 fb3c 	bl	8000288 <__aeabi_dsub>
 8006c10:	4602      	mov	r2, r0
 8006c12:	460b      	mov	r3, r1
 8006c14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006c18:	f7f9 ff60 	bl	8000adc <__aeabi_dcmplt>
 8006c1c:	2800      	cmp	r0, #0
 8006c1e:	f43f af30 	beq.w	8006a82 <_dtoa_r+0x432>
 8006c22:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006c26:	2b30      	cmp	r3, #48	; 0x30
 8006c28:	f105 32ff 	add.w	r2, r5, #4294967295
 8006c2c:	d002      	beq.n	8006c34 <_dtoa_r+0x5e4>
 8006c2e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006c32:	e04a      	b.n	8006cca <_dtoa_r+0x67a>
 8006c34:	4615      	mov	r5, r2
 8006c36:	e7f4      	b.n	8006c22 <_dtoa_r+0x5d2>
 8006c38:	4b05      	ldr	r3, [pc, #20]	; (8006c50 <_dtoa_r+0x600>)
 8006c3a:	f7f9 fcdd 	bl	80005f8 <__aeabi_dmul>
 8006c3e:	e9cd 0100 	strd	r0, r1, [sp]
 8006c42:	e7bc      	b.n	8006bbe <_dtoa_r+0x56e>
 8006c44:	08009c68 	.word	0x08009c68
 8006c48:	08009c40 	.word	0x08009c40
 8006c4c:	3ff00000 	.word	0x3ff00000
 8006c50:	40240000 	.word	0x40240000
 8006c54:	401c0000 	.word	0x401c0000
 8006c58:	40140000 	.word	0x40140000
 8006c5c:	3fe00000 	.word	0x3fe00000
 8006c60:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006c64:	465d      	mov	r5, fp
 8006c66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c6a:	4630      	mov	r0, r6
 8006c6c:	4639      	mov	r1, r7
 8006c6e:	f7f9 fded 	bl	800084c <__aeabi_ddiv>
 8006c72:	f7f9 ff71 	bl	8000b58 <__aeabi_d2iz>
 8006c76:	4680      	mov	r8, r0
 8006c78:	f7f9 fc54 	bl	8000524 <__aeabi_i2d>
 8006c7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c80:	f7f9 fcba 	bl	80005f8 <__aeabi_dmul>
 8006c84:	4602      	mov	r2, r0
 8006c86:	460b      	mov	r3, r1
 8006c88:	4630      	mov	r0, r6
 8006c8a:	4639      	mov	r1, r7
 8006c8c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8006c90:	f7f9 fafa 	bl	8000288 <__aeabi_dsub>
 8006c94:	f805 6b01 	strb.w	r6, [r5], #1
 8006c98:	eba5 060b 	sub.w	r6, r5, fp
 8006c9c:	45b1      	cmp	r9, r6
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	d139      	bne.n	8006d18 <_dtoa_r+0x6c8>
 8006ca4:	f7f9 faf2 	bl	800028c <__adddf3>
 8006ca8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006cac:	4606      	mov	r6, r0
 8006cae:	460f      	mov	r7, r1
 8006cb0:	f7f9 ff32 	bl	8000b18 <__aeabi_dcmpgt>
 8006cb4:	b9c8      	cbnz	r0, 8006cea <_dtoa_r+0x69a>
 8006cb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006cba:	4630      	mov	r0, r6
 8006cbc:	4639      	mov	r1, r7
 8006cbe:	f7f9 ff03 	bl	8000ac8 <__aeabi_dcmpeq>
 8006cc2:	b110      	cbz	r0, 8006cca <_dtoa_r+0x67a>
 8006cc4:	f018 0f01 	tst.w	r8, #1
 8006cc8:	d10f      	bne.n	8006cea <_dtoa_r+0x69a>
 8006cca:	9904      	ldr	r1, [sp, #16]
 8006ccc:	4620      	mov	r0, r4
 8006cce:	f000 fe0a 	bl	80078e6 <_Bfree>
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006cd6:	702b      	strb	r3, [r5, #0]
 8006cd8:	f10a 0301 	add.w	r3, sl, #1
 8006cdc:	6013      	str	r3, [r2, #0]
 8006cde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	f000 8241 	beq.w	8007168 <_dtoa_r+0xb18>
 8006ce6:	601d      	str	r5, [r3, #0]
 8006ce8:	e23e      	b.n	8007168 <_dtoa_r+0xb18>
 8006cea:	f8cd a020 	str.w	sl, [sp, #32]
 8006cee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006cf2:	2a39      	cmp	r2, #57	; 0x39
 8006cf4:	f105 33ff 	add.w	r3, r5, #4294967295
 8006cf8:	d108      	bne.n	8006d0c <_dtoa_r+0x6bc>
 8006cfa:	459b      	cmp	fp, r3
 8006cfc:	d10a      	bne.n	8006d14 <_dtoa_r+0x6c4>
 8006cfe:	9b08      	ldr	r3, [sp, #32]
 8006d00:	3301      	adds	r3, #1
 8006d02:	9308      	str	r3, [sp, #32]
 8006d04:	2330      	movs	r3, #48	; 0x30
 8006d06:	f88b 3000 	strb.w	r3, [fp]
 8006d0a:	465b      	mov	r3, fp
 8006d0c:	781a      	ldrb	r2, [r3, #0]
 8006d0e:	3201      	adds	r2, #1
 8006d10:	701a      	strb	r2, [r3, #0]
 8006d12:	e78c      	b.n	8006c2e <_dtoa_r+0x5de>
 8006d14:	461d      	mov	r5, r3
 8006d16:	e7ea      	b.n	8006cee <_dtoa_r+0x69e>
 8006d18:	2200      	movs	r2, #0
 8006d1a:	4b9b      	ldr	r3, [pc, #620]	; (8006f88 <_dtoa_r+0x938>)
 8006d1c:	f7f9 fc6c 	bl	80005f8 <__aeabi_dmul>
 8006d20:	2200      	movs	r2, #0
 8006d22:	2300      	movs	r3, #0
 8006d24:	4606      	mov	r6, r0
 8006d26:	460f      	mov	r7, r1
 8006d28:	f7f9 fece 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d2c:	2800      	cmp	r0, #0
 8006d2e:	d09a      	beq.n	8006c66 <_dtoa_r+0x616>
 8006d30:	e7cb      	b.n	8006cca <_dtoa_r+0x67a>
 8006d32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d34:	2a00      	cmp	r2, #0
 8006d36:	f000 808b 	beq.w	8006e50 <_dtoa_r+0x800>
 8006d3a:	9a06      	ldr	r2, [sp, #24]
 8006d3c:	2a01      	cmp	r2, #1
 8006d3e:	dc6e      	bgt.n	8006e1e <_dtoa_r+0x7ce>
 8006d40:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006d42:	2a00      	cmp	r2, #0
 8006d44:	d067      	beq.n	8006e16 <_dtoa_r+0x7c6>
 8006d46:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006d4a:	9f07      	ldr	r7, [sp, #28]
 8006d4c:	9d05      	ldr	r5, [sp, #20]
 8006d4e:	9a05      	ldr	r2, [sp, #20]
 8006d50:	2101      	movs	r1, #1
 8006d52:	441a      	add	r2, r3
 8006d54:	4620      	mov	r0, r4
 8006d56:	9205      	str	r2, [sp, #20]
 8006d58:	4498      	add	r8, r3
 8006d5a:	f000 fea2 	bl	8007aa2 <__i2b>
 8006d5e:	4606      	mov	r6, r0
 8006d60:	2d00      	cmp	r5, #0
 8006d62:	dd0c      	ble.n	8006d7e <_dtoa_r+0x72e>
 8006d64:	f1b8 0f00 	cmp.w	r8, #0
 8006d68:	dd09      	ble.n	8006d7e <_dtoa_r+0x72e>
 8006d6a:	4545      	cmp	r5, r8
 8006d6c:	9a05      	ldr	r2, [sp, #20]
 8006d6e:	462b      	mov	r3, r5
 8006d70:	bfa8      	it	ge
 8006d72:	4643      	movge	r3, r8
 8006d74:	1ad2      	subs	r2, r2, r3
 8006d76:	9205      	str	r2, [sp, #20]
 8006d78:	1aed      	subs	r5, r5, r3
 8006d7a:	eba8 0803 	sub.w	r8, r8, r3
 8006d7e:	9b07      	ldr	r3, [sp, #28]
 8006d80:	b1eb      	cbz	r3, 8006dbe <_dtoa_r+0x76e>
 8006d82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d067      	beq.n	8006e58 <_dtoa_r+0x808>
 8006d88:	b18f      	cbz	r7, 8006dae <_dtoa_r+0x75e>
 8006d8a:	4631      	mov	r1, r6
 8006d8c:	463a      	mov	r2, r7
 8006d8e:	4620      	mov	r0, r4
 8006d90:	f000 ff26 	bl	8007be0 <__pow5mult>
 8006d94:	9a04      	ldr	r2, [sp, #16]
 8006d96:	4601      	mov	r1, r0
 8006d98:	4606      	mov	r6, r0
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	f000 fe8a 	bl	8007ab4 <__multiply>
 8006da0:	9904      	ldr	r1, [sp, #16]
 8006da2:	9008      	str	r0, [sp, #32]
 8006da4:	4620      	mov	r0, r4
 8006da6:	f000 fd9e 	bl	80078e6 <_Bfree>
 8006daa:	9b08      	ldr	r3, [sp, #32]
 8006dac:	9304      	str	r3, [sp, #16]
 8006dae:	9b07      	ldr	r3, [sp, #28]
 8006db0:	1bda      	subs	r2, r3, r7
 8006db2:	d004      	beq.n	8006dbe <_dtoa_r+0x76e>
 8006db4:	9904      	ldr	r1, [sp, #16]
 8006db6:	4620      	mov	r0, r4
 8006db8:	f000 ff12 	bl	8007be0 <__pow5mult>
 8006dbc:	9004      	str	r0, [sp, #16]
 8006dbe:	2101      	movs	r1, #1
 8006dc0:	4620      	mov	r0, r4
 8006dc2:	f000 fe6e 	bl	8007aa2 <__i2b>
 8006dc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006dc8:	4607      	mov	r7, r0
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	f000 81d0 	beq.w	8007170 <_dtoa_r+0xb20>
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	4601      	mov	r1, r0
 8006dd4:	4620      	mov	r0, r4
 8006dd6:	f000 ff03 	bl	8007be0 <__pow5mult>
 8006dda:	9b06      	ldr	r3, [sp, #24]
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	4607      	mov	r7, r0
 8006de0:	dc40      	bgt.n	8006e64 <_dtoa_r+0x814>
 8006de2:	9b00      	ldr	r3, [sp, #0]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d139      	bne.n	8006e5c <_dtoa_r+0x80c>
 8006de8:	9b01      	ldr	r3, [sp, #4]
 8006dea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d136      	bne.n	8006e60 <_dtoa_r+0x810>
 8006df2:	9b01      	ldr	r3, [sp, #4]
 8006df4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006df8:	0d1b      	lsrs	r3, r3, #20
 8006dfa:	051b      	lsls	r3, r3, #20
 8006dfc:	b12b      	cbz	r3, 8006e0a <_dtoa_r+0x7ba>
 8006dfe:	9b05      	ldr	r3, [sp, #20]
 8006e00:	3301      	adds	r3, #1
 8006e02:	9305      	str	r3, [sp, #20]
 8006e04:	f108 0801 	add.w	r8, r8, #1
 8006e08:	2301      	movs	r3, #1
 8006e0a:	9307      	str	r3, [sp, #28]
 8006e0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d12a      	bne.n	8006e68 <_dtoa_r+0x818>
 8006e12:	2001      	movs	r0, #1
 8006e14:	e030      	b.n	8006e78 <_dtoa_r+0x828>
 8006e16:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006e18:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006e1c:	e795      	b.n	8006d4a <_dtoa_r+0x6fa>
 8006e1e:	9b07      	ldr	r3, [sp, #28]
 8006e20:	f109 37ff 	add.w	r7, r9, #4294967295
 8006e24:	42bb      	cmp	r3, r7
 8006e26:	bfbf      	itttt	lt
 8006e28:	9b07      	ldrlt	r3, [sp, #28]
 8006e2a:	9707      	strlt	r7, [sp, #28]
 8006e2c:	1afa      	sublt	r2, r7, r3
 8006e2e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006e30:	bfbb      	ittet	lt
 8006e32:	189b      	addlt	r3, r3, r2
 8006e34:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006e36:	1bdf      	subge	r7, r3, r7
 8006e38:	2700      	movlt	r7, #0
 8006e3a:	f1b9 0f00 	cmp.w	r9, #0
 8006e3e:	bfb5      	itete	lt
 8006e40:	9b05      	ldrlt	r3, [sp, #20]
 8006e42:	9d05      	ldrge	r5, [sp, #20]
 8006e44:	eba3 0509 	sublt.w	r5, r3, r9
 8006e48:	464b      	movge	r3, r9
 8006e4a:	bfb8      	it	lt
 8006e4c:	2300      	movlt	r3, #0
 8006e4e:	e77e      	b.n	8006d4e <_dtoa_r+0x6fe>
 8006e50:	9f07      	ldr	r7, [sp, #28]
 8006e52:	9d05      	ldr	r5, [sp, #20]
 8006e54:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006e56:	e783      	b.n	8006d60 <_dtoa_r+0x710>
 8006e58:	9a07      	ldr	r2, [sp, #28]
 8006e5a:	e7ab      	b.n	8006db4 <_dtoa_r+0x764>
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	e7d4      	b.n	8006e0a <_dtoa_r+0x7ba>
 8006e60:	9b00      	ldr	r3, [sp, #0]
 8006e62:	e7d2      	b.n	8006e0a <_dtoa_r+0x7ba>
 8006e64:	2300      	movs	r3, #0
 8006e66:	9307      	str	r3, [sp, #28]
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8006e6e:	6918      	ldr	r0, [r3, #16]
 8006e70:	f000 fdc9 	bl	8007a06 <__hi0bits>
 8006e74:	f1c0 0020 	rsb	r0, r0, #32
 8006e78:	4440      	add	r0, r8
 8006e7a:	f010 001f 	ands.w	r0, r0, #31
 8006e7e:	d047      	beq.n	8006f10 <_dtoa_r+0x8c0>
 8006e80:	f1c0 0320 	rsb	r3, r0, #32
 8006e84:	2b04      	cmp	r3, #4
 8006e86:	dd3b      	ble.n	8006f00 <_dtoa_r+0x8b0>
 8006e88:	9b05      	ldr	r3, [sp, #20]
 8006e8a:	f1c0 001c 	rsb	r0, r0, #28
 8006e8e:	4403      	add	r3, r0
 8006e90:	9305      	str	r3, [sp, #20]
 8006e92:	4405      	add	r5, r0
 8006e94:	4480      	add	r8, r0
 8006e96:	9b05      	ldr	r3, [sp, #20]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	dd05      	ble.n	8006ea8 <_dtoa_r+0x858>
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	9904      	ldr	r1, [sp, #16]
 8006ea0:	4620      	mov	r0, r4
 8006ea2:	f000 feeb 	bl	8007c7c <__lshift>
 8006ea6:	9004      	str	r0, [sp, #16]
 8006ea8:	f1b8 0f00 	cmp.w	r8, #0
 8006eac:	dd05      	ble.n	8006eba <_dtoa_r+0x86a>
 8006eae:	4639      	mov	r1, r7
 8006eb0:	4642      	mov	r2, r8
 8006eb2:	4620      	mov	r0, r4
 8006eb4:	f000 fee2 	bl	8007c7c <__lshift>
 8006eb8:	4607      	mov	r7, r0
 8006eba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ebc:	b353      	cbz	r3, 8006f14 <_dtoa_r+0x8c4>
 8006ebe:	4639      	mov	r1, r7
 8006ec0:	9804      	ldr	r0, [sp, #16]
 8006ec2:	f000 ff2f 	bl	8007d24 <__mcmp>
 8006ec6:	2800      	cmp	r0, #0
 8006ec8:	da24      	bge.n	8006f14 <_dtoa_r+0x8c4>
 8006eca:	2300      	movs	r3, #0
 8006ecc:	220a      	movs	r2, #10
 8006ece:	9904      	ldr	r1, [sp, #16]
 8006ed0:	4620      	mov	r0, r4
 8006ed2:	f000 fd1f 	bl	8007914 <__multadd>
 8006ed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ed8:	9004      	str	r0, [sp, #16]
 8006eda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	f000 814d 	beq.w	800717e <_dtoa_r+0xb2e>
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	4631      	mov	r1, r6
 8006ee8:	220a      	movs	r2, #10
 8006eea:	4620      	mov	r0, r4
 8006eec:	f000 fd12 	bl	8007914 <__multadd>
 8006ef0:	9b02      	ldr	r3, [sp, #8]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	4606      	mov	r6, r0
 8006ef6:	dc4f      	bgt.n	8006f98 <_dtoa_r+0x948>
 8006ef8:	9b06      	ldr	r3, [sp, #24]
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	dd4c      	ble.n	8006f98 <_dtoa_r+0x948>
 8006efe:	e011      	b.n	8006f24 <_dtoa_r+0x8d4>
 8006f00:	d0c9      	beq.n	8006e96 <_dtoa_r+0x846>
 8006f02:	9a05      	ldr	r2, [sp, #20]
 8006f04:	331c      	adds	r3, #28
 8006f06:	441a      	add	r2, r3
 8006f08:	9205      	str	r2, [sp, #20]
 8006f0a:	441d      	add	r5, r3
 8006f0c:	4498      	add	r8, r3
 8006f0e:	e7c2      	b.n	8006e96 <_dtoa_r+0x846>
 8006f10:	4603      	mov	r3, r0
 8006f12:	e7f6      	b.n	8006f02 <_dtoa_r+0x8b2>
 8006f14:	f1b9 0f00 	cmp.w	r9, #0
 8006f18:	dc38      	bgt.n	8006f8c <_dtoa_r+0x93c>
 8006f1a:	9b06      	ldr	r3, [sp, #24]
 8006f1c:	2b02      	cmp	r3, #2
 8006f1e:	dd35      	ble.n	8006f8c <_dtoa_r+0x93c>
 8006f20:	f8cd 9008 	str.w	r9, [sp, #8]
 8006f24:	9b02      	ldr	r3, [sp, #8]
 8006f26:	b963      	cbnz	r3, 8006f42 <_dtoa_r+0x8f2>
 8006f28:	4639      	mov	r1, r7
 8006f2a:	2205      	movs	r2, #5
 8006f2c:	4620      	mov	r0, r4
 8006f2e:	f000 fcf1 	bl	8007914 <__multadd>
 8006f32:	4601      	mov	r1, r0
 8006f34:	4607      	mov	r7, r0
 8006f36:	9804      	ldr	r0, [sp, #16]
 8006f38:	f000 fef4 	bl	8007d24 <__mcmp>
 8006f3c:	2800      	cmp	r0, #0
 8006f3e:	f73f adcc 	bgt.w	8006ada <_dtoa_r+0x48a>
 8006f42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f44:	465d      	mov	r5, fp
 8006f46:	ea6f 0a03 	mvn.w	sl, r3
 8006f4a:	f04f 0900 	mov.w	r9, #0
 8006f4e:	4639      	mov	r1, r7
 8006f50:	4620      	mov	r0, r4
 8006f52:	f000 fcc8 	bl	80078e6 <_Bfree>
 8006f56:	2e00      	cmp	r6, #0
 8006f58:	f43f aeb7 	beq.w	8006cca <_dtoa_r+0x67a>
 8006f5c:	f1b9 0f00 	cmp.w	r9, #0
 8006f60:	d005      	beq.n	8006f6e <_dtoa_r+0x91e>
 8006f62:	45b1      	cmp	r9, r6
 8006f64:	d003      	beq.n	8006f6e <_dtoa_r+0x91e>
 8006f66:	4649      	mov	r1, r9
 8006f68:	4620      	mov	r0, r4
 8006f6a:	f000 fcbc 	bl	80078e6 <_Bfree>
 8006f6e:	4631      	mov	r1, r6
 8006f70:	4620      	mov	r0, r4
 8006f72:	f000 fcb8 	bl	80078e6 <_Bfree>
 8006f76:	e6a8      	b.n	8006cca <_dtoa_r+0x67a>
 8006f78:	2700      	movs	r7, #0
 8006f7a:	463e      	mov	r6, r7
 8006f7c:	e7e1      	b.n	8006f42 <_dtoa_r+0x8f2>
 8006f7e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006f82:	463e      	mov	r6, r7
 8006f84:	e5a9      	b.n	8006ada <_dtoa_r+0x48a>
 8006f86:	bf00      	nop
 8006f88:	40240000 	.word	0x40240000
 8006f8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f8e:	f8cd 9008 	str.w	r9, [sp, #8]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	f000 80fa 	beq.w	800718c <_dtoa_r+0xb3c>
 8006f98:	2d00      	cmp	r5, #0
 8006f9a:	dd05      	ble.n	8006fa8 <_dtoa_r+0x958>
 8006f9c:	4631      	mov	r1, r6
 8006f9e:	462a      	mov	r2, r5
 8006fa0:	4620      	mov	r0, r4
 8006fa2:	f000 fe6b 	bl	8007c7c <__lshift>
 8006fa6:	4606      	mov	r6, r0
 8006fa8:	9b07      	ldr	r3, [sp, #28]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d04c      	beq.n	8007048 <_dtoa_r+0x9f8>
 8006fae:	6871      	ldr	r1, [r6, #4]
 8006fb0:	4620      	mov	r0, r4
 8006fb2:	f000 fc64 	bl	800787e <_Balloc>
 8006fb6:	6932      	ldr	r2, [r6, #16]
 8006fb8:	3202      	adds	r2, #2
 8006fba:	4605      	mov	r5, r0
 8006fbc:	0092      	lsls	r2, r2, #2
 8006fbe:	f106 010c 	add.w	r1, r6, #12
 8006fc2:	300c      	adds	r0, #12
 8006fc4:	f000 fc50 	bl	8007868 <memcpy>
 8006fc8:	2201      	movs	r2, #1
 8006fca:	4629      	mov	r1, r5
 8006fcc:	4620      	mov	r0, r4
 8006fce:	f000 fe55 	bl	8007c7c <__lshift>
 8006fd2:	9b00      	ldr	r3, [sp, #0]
 8006fd4:	f8cd b014 	str.w	fp, [sp, #20]
 8006fd8:	f003 0301 	and.w	r3, r3, #1
 8006fdc:	46b1      	mov	r9, r6
 8006fde:	9307      	str	r3, [sp, #28]
 8006fe0:	4606      	mov	r6, r0
 8006fe2:	4639      	mov	r1, r7
 8006fe4:	9804      	ldr	r0, [sp, #16]
 8006fe6:	f7ff faa5 	bl	8006534 <quorem>
 8006fea:	4649      	mov	r1, r9
 8006fec:	4605      	mov	r5, r0
 8006fee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006ff2:	9804      	ldr	r0, [sp, #16]
 8006ff4:	f000 fe96 	bl	8007d24 <__mcmp>
 8006ff8:	4632      	mov	r2, r6
 8006ffa:	9000      	str	r0, [sp, #0]
 8006ffc:	4639      	mov	r1, r7
 8006ffe:	4620      	mov	r0, r4
 8007000:	f000 feaa 	bl	8007d58 <__mdiff>
 8007004:	68c3      	ldr	r3, [r0, #12]
 8007006:	4602      	mov	r2, r0
 8007008:	bb03      	cbnz	r3, 800704c <_dtoa_r+0x9fc>
 800700a:	4601      	mov	r1, r0
 800700c:	9008      	str	r0, [sp, #32]
 800700e:	9804      	ldr	r0, [sp, #16]
 8007010:	f000 fe88 	bl	8007d24 <__mcmp>
 8007014:	9a08      	ldr	r2, [sp, #32]
 8007016:	4603      	mov	r3, r0
 8007018:	4611      	mov	r1, r2
 800701a:	4620      	mov	r0, r4
 800701c:	9308      	str	r3, [sp, #32]
 800701e:	f000 fc62 	bl	80078e6 <_Bfree>
 8007022:	9b08      	ldr	r3, [sp, #32]
 8007024:	b9a3      	cbnz	r3, 8007050 <_dtoa_r+0xa00>
 8007026:	9a06      	ldr	r2, [sp, #24]
 8007028:	b992      	cbnz	r2, 8007050 <_dtoa_r+0xa00>
 800702a:	9a07      	ldr	r2, [sp, #28]
 800702c:	b982      	cbnz	r2, 8007050 <_dtoa_r+0xa00>
 800702e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007032:	d029      	beq.n	8007088 <_dtoa_r+0xa38>
 8007034:	9b00      	ldr	r3, [sp, #0]
 8007036:	2b00      	cmp	r3, #0
 8007038:	dd01      	ble.n	800703e <_dtoa_r+0x9ee>
 800703a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800703e:	9b05      	ldr	r3, [sp, #20]
 8007040:	1c5d      	adds	r5, r3, #1
 8007042:	f883 8000 	strb.w	r8, [r3]
 8007046:	e782      	b.n	8006f4e <_dtoa_r+0x8fe>
 8007048:	4630      	mov	r0, r6
 800704a:	e7c2      	b.n	8006fd2 <_dtoa_r+0x982>
 800704c:	2301      	movs	r3, #1
 800704e:	e7e3      	b.n	8007018 <_dtoa_r+0x9c8>
 8007050:	9a00      	ldr	r2, [sp, #0]
 8007052:	2a00      	cmp	r2, #0
 8007054:	db04      	blt.n	8007060 <_dtoa_r+0xa10>
 8007056:	d125      	bne.n	80070a4 <_dtoa_r+0xa54>
 8007058:	9a06      	ldr	r2, [sp, #24]
 800705a:	bb1a      	cbnz	r2, 80070a4 <_dtoa_r+0xa54>
 800705c:	9a07      	ldr	r2, [sp, #28]
 800705e:	bb0a      	cbnz	r2, 80070a4 <_dtoa_r+0xa54>
 8007060:	2b00      	cmp	r3, #0
 8007062:	ddec      	ble.n	800703e <_dtoa_r+0x9ee>
 8007064:	2201      	movs	r2, #1
 8007066:	9904      	ldr	r1, [sp, #16]
 8007068:	4620      	mov	r0, r4
 800706a:	f000 fe07 	bl	8007c7c <__lshift>
 800706e:	4639      	mov	r1, r7
 8007070:	9004      	str	r0, [sp, #16]
 8007072:	f000 fe57 	bl	8007d24 <__mcmp>
 8007076:	2800      	cmp	r0, #0
 8007078:	dc03      	bgt.n	8007082 <_dtoa_r+0xa32>
 800707a:	d1e0      	bne.n	800703e <_dtoa_r+0x9ee>
 800707c:	f018 0f01 	tst.w	r8, #1
 8007080:	d0dd      	beq.n	800703e <_dtoa_r+0x9ee>
 8007082:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007086:	d1d8      	bne.n	800703a <_dtoa_r+0x9ea>
 8007088:	9b05      	ldr	r3, [sp, #20]
 800708a:	9a05      	ldr	r2, [sp, #20]
 800708c:	1c5d      	adds	r5, r3, #1
 800708e:	2339      	movs	r3, #57	; 0x39
 8007090:	7013      	strb	r3, [r2, #0]
 8007092:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007096:	2b39      	cmp	r3, #57	; 0x39
 8007098:	f105 32ff 	add.w	r2, r5, #4294967295
 800709c:	d04f      	beq.n	800713e <_dtoa_r+0xaee>
 800709e:	3301      	adds	r3, #1
 80070a0:	7013      	strb	r3, [r2, #0]
 80070a2:	e754      	b.n	8006f4e <_dtoa_r+0x8fe>
 80070a4:	9a05      	ldr	r2, [sp, #20]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	f102 0501 	add.w	r5, r2, #1
 80070ac:	dd06      	ble.n	80070bc <_dtoa_r+0xa6c>
 80070ae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80070b2:	d0e9      	beq.n	8007088 <_dtoa_r+0xa38>
 80070b4:	f108 0801 	add.w	r8, r8, #1
 80070b8:	9b05      	ldr	r3, [sp, #20]
 80070ba:	e7c2      	b.n	8007042 <_dtoa_r+0x9f2>
 80070bc:	9a02      	ldr	r2, [sp, #8]
 80070be:	f805 8c01 	strb.w	r8, [r5, #-1]
 80070c2:	eba5 030b 	sub.w	r3, r5, fp
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d021      	beq.n	800710e <_dtoa_r+0xabe>
 80070ca:	2300      	movs	r3, #0
 80070cc:	220a      	movs	r2, #10
 80070ce:	9904      	ldr	r1, [sp, #16]
 80070d0:	4620      	mov	r0, r4
 80070d2:	f000 fc1f 	bl	8007914 <__multadd>
 80070d6:	45b1      	cmp	r9, r6
 80070d8:	9004      	str	r0, [sp, #16]
 80070da:	f04f 0300 	mov.w	r3, #0
 80070de:	f04f 020a 	mov.w	r2, #10
 80070e2:	4649      	mov	r1, r9
 80070e4:	4620      	mov	r0, r4
 80070e6:	d105      	bne.n	80070f4 <_dtoa_r+0xaa4>
 80070e8:	f000 fc14 	bl	8007914 <__multadd>
 80070ec:	4681      	mov	r9, r0
 80070ee:	4606      	mov	r6, r0
 80070f0:	9505      	str	r5, [sp, #20]
 80070f2:	e776      	b.n	8006fe2 <_dtoa_r+0x992>
 80070f4:	f000 fc0e 	bl	8007914 <__multadd>
 80070f8:	4631      	mov	r1, r6
 80070fa:	4681      	mov	r9, r0
 80070fc:	2300      	movs	r3, #0
 80070fe:	220a      	movs	r2, #10
 8007100:	4620      	mov	r0, r4
 8007102:	f000 fc07 	bl	8007914 <__multadd>
 8007106:	4606      	mov	r6, r0
 8007108:	e7f2      	b.n	80070f0 <_dtoa_r+0xaa0>
 800710a:	f04f 0900 	mov.w	r9, #0
 800710e:	2201      	movs	r2, #1
 8007110:	9904      	ldr	r1, [sp, #16]
 8007112:	4620      	mov	r0, r4
 8007114:	f000 fdb2 	bl	8007c7c <__lshift>
 8007118:	4639      	mov	r1, r7
 800711a:	9004      	str	r0, [sp, #16]
 800711c:	f000 fe02 	bl	8007d24 <__mcmp>
 8007120:	2800      	cmp	r0, #0
 8007122:	dcb6      	bgt.n	8007092 <_dtoa_r+0xa42>
 8007124:	d102      	bne.n	800712c <_dtoa_r+0xadc>
 8007126:	f018 0f01 	tst.w	r8, #1
 800712a:	d1b2      	bne.n	8007092 <_dtoa_r+0xa42>
 800712c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007130:	2b30      	cmp	r3, #48	; 0x30
 8007132:	f105 32ff 	add.w	r2, r5, #4294967295
 8007136:	f47f af0a 	bne.w	8006f4e <_dtoa_r+0x8fe>
 800713a:	4615      	mov	r5, r2
 800713c:	e7f6      	b.n	800712c <_dtoa_r+0xadc>
 800713e:	4593      	cmp	fp, r2
 8007140:	d105      	bne.n	800714e <_dtoa_r+0xafe>
 8007142:	2331      	movs	r3, #49	; 0x31
 8007144:	f10a 0a01 	add.w	sl, sl, #1
 8007148:	f88b 3000 	strb.w	r3, [fp]
 800714c:	e6ff      	b.n	8006f4e <_dtoa_r+0x8fe>
 800714e:	4615      	mov	r5, r2
 8007150:	e79f      	b.n	8007092 <_dtoa_r+0xa42>
 8007152:	f8df b064 	ldr.w	fp, [pc, #100]	; 80071b8 <_dtoa_r+0xb68>
 8007156:	e007      	b.n	8007168 <_dtoa_r+0xb18>
 8007158:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800715a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80071bc <_dtoa_r+0xb6c>
 800715e:	b11b      	cbz	r3, 8007168 <_dtoa_r+0xb18>
 8007160:	f10b 0308 	add.w	r3, fp, #8
 8007164:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007166:	6013      	str	r3, [r2, #0]
 8007168:	4658      	mov	r0, fp
 800716a:	b017      	add	sp, #92	; 0x5c
 800716c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007170:	9b06      	ldr	r3, [sp, #24]
 8007172:	2b01      	cmp	r3, #1
 8007174:	f77f ae35 	ble.w	8006de2 <_dtoa_r+0x792>
 8007178:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800717a:	9307      	str	r3, [sp, #28]
 800717c:	e649      	b.n	8006e12 <_dtoa_r+0x7c2>
 800717e:	9b02      	ldr	r3, [sp, #8]
 8007180:	2b00      	cmp	r3, #0
 8007182:	dc03      	bgt.n	800718c <_dtoa_r+0xb3c>
 8007184:	9b06      	ldr	r3, [sp, #24]
 8007186:	2b02      	cmp	r3, #2
 8007188:	f73f aecc 	bgt.w	8006f24 <_dtoa_r+0x8d4>
 800718c:	465d      	mov	r5, fp
 800718e:	4639      	mov	r1, r7
 8007190:	9804      	ldr	r0, [sp, #16]
 8007192:	f7ff f9cf 	bl	8006534 <quorem>
 8007196:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800719a:	f805 8b01 	strb.w	r8, [r5], #1
 800719e:	9a02      	ldr	r2, [sp, #8]
 80071a0:	eba5 030b 	sub.w	r3, r5, fp
 80071a4:	429a      	cmp	r2, r3
 80071a6:	ddb0      	ble.n	800710a <_dtoa_r+0xaba>
 80071a8:	2300      	movs	r3, #0
 80071aa:	220a      	movs	r2, #10
 80071ac:	9904      	ldr	r1, [sp, #16]
 80071ae:	4620      	mov	r0, r4
 80071b0:	f000 fbb0 	bl	8007914 <__multadd>
 80071b4:	9004      	str	r0, [sp, #16]
 80071b6:	e7ea      	b.n	800718e <_dtoa_r+0xb3e>
 80071b8:	08009bad 	.word	0x08009bad
 80071bc:	08009c28 	.word	0x08009c28

080071c0 <rshift>:
 80071c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071c2:	6906      	ldr	r6, [r0, #16]
 80071c4:	114b      	asrs	r3, r1, #5
 80071c6:	429e      	cmp	r6, r3
 80071c8:	f100 0414 	add.w	r4, r0, #20
 80071cc:	dd30      	ble.n	8007230 <rshift+0x70>
 80071ce:	f011 011f 	ands.w	r1, r1, #31
 80071d2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80071d6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80071da:	d108      	bne.n	80071ee <rshift+0x2e>
 80071dc:	4621      	mov	r1, r4
 80071de:	42b2      	cmp	r2, r6
 80071e0:	460b      	mov	r3, r1
 80071e2:	d211      	bcs.n	8007208 <rshift+0x48>
 80071e4:	f852 3b04 	ldr.w	r3, [r2], #4
 80071e8:	f841 3b04 	str.w	r3, [r1], #4
 80071ec:	e7f7      	b.n	80071de <rshift+0x1e>
 80071ee:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80071f2:	f1c1 0c20 	rsb	ip, r1, #32
 80071f6:	40cd      	lsrs	r5, r1
 80071f8:	3204      	adds	r2, #4
 80071fa:	4623      	mov	r3, r4
 80071fc:	42b2      	cmp	r2, r6
 80071fe:	4617      	mov	r7, r2
 8007200:	d30c      	bcc.n	800721c <rshift+0x5c>
 8007202:	601d      	str	r5, [r3, #0]
 8007204:	b105      	cbz	r5, 8007208 <rshift+0x48>
 8007206:	3304      	adds	r3, #4
 8007208:	1b1a      	subs	r2, r3, r4
 800720a:	42a3      	cmp	r3, r4
 800720c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007210:	bf08      	it	eq
 8007212:	2300      	moveq	r3, #0
 8007214:	6102      	str	r2, [r0, #16]
 8007216:	bf08      	it	eq
 8007218:	6143      	streq	r3, [r0, #20]
 800721a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800721c:	683f      	ldr	r7, [r7, #0]
 800721e:	fa07 f70c 	lsl.w	r7, r7, ip
 8007222:	433d      	orrs	r5, r7
 8007224:	f843 5b04 	str.w	r5, [r3], #4
 8007228:	f852 5b04 	ldr.w	r5, [r2], #4
 800722c:	40cd      	lsrs	r5, r1
 800722e:	e7e5      	b.n	80071fc <rshift+0x3c>
 8007230:	4623      	mov	r3, r4
 8007232:	e7e9      	b.n	8007208 <rshift+0x48>

08007234 <__hexdig_fun>:
 8007234:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007238:	2b09      	cmp	r3, #9
 800723a:	d802      	bhi.n	8007242 <__hexdig_fun+0xe>
 800723c:	3820      	subs	r0, #32
 800723e:	b2c0      	uxtb	r0, r0
 8007240:	4770      	bx	lr
 8007242:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007246:	2b05      	cmp	r3, #5
 8007248:	d801      	bhi.n	800724e <__hexdig_fun+0x1a>
 800724a:	3847      	subs	r0, #71	; 0x47
 800724c:	e7f7      	b.n	800723e <__hexdig_fun+0xa>
 800724e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007252:	2b05      	cmp	r3, #5
 8007254:	d801      	bhi.n	800725a <__hexdig_fun+0x26>
 8007256:	3827      	subs	r0, #39	; 0x27
 8007258:	e7f1      	b.n	800723e <__hexdig_fun+0xa>
 800725a:	2000      	movs	r0, #0
 800725c:	4770      	bx	lr

0800725e <__gethex>:
 800725e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007262:	b08b      	sub	sp, #44	; 0x2c
 8007264:	468a      	mov	sl, r1
 8007266:	9002      	str	r0, [sp, #8]
 8007268:	9816      	ldr	r0, [sp, #88]	; 0x58
 800726a:	9306      	str	r3, [sp, #24]
 800726c:	4690      	mov	r8, r2
 800726e:	f000 fad0 	bl	8007812 <__localeconv_l>
 8007272:	6803      	ldr	r3, [r0, #0]
 8007274:	9303      	str	r3, [sp, #12]
 8007276:	4618      	mov	r0, r3
 8007278:	f7f8 ffaa 	bl	80001d0 <strlen>
 800727c:	9b03      	ldr	r3, [sp, #12]
 800727e:	9001      	str	r0, [sp, #4]
 8007280:	4403      	add	r3, r0
 8007282:	f04f 0b00 	mov.w	fp, #0
 8007286:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800728a:	9307      	str	r3, [sp, #28]
 800728c:	f8da 3000 	ldr.w	r3, [sl]
 8007290:	3302      	adds	r3, #2
 8007292:	461f      	mov	r7, r3
 8007294:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007298:	2830      	cmp	r0, #48	; 0x30
 800729a:	d06c      	beq.n	8007376 <__gethex+0x118>
 800729c:	f7ff ffca 	bl	8007234 <__hexdig_fun>
 80072a0:	4604      	mov	r4, r0
 80072a2:	2800      	cmp	r0, #0
 80072a4:	d16a      	bne.n	800737c <__gethex+0x11e>
 80072a6:	9a01      	ldr	r2, [sp, #4]
 80072a8:	9903      	ldr	r1, [sp, #12]
 80072aa:	4638      	mov	r0, r7
 80072ac:	f001 f8fe 	bl	80084ac <strncmp>
 80072b0:	2800      	cmp	r0, #0
 80072b2:	d166      	bne.n	8007382 <__gethex+0x124>
 80072b4:	9b01      	ldr	r3, [sp, #4]
 80072b6:	5cf8      	ldrb	r0, [r7, r3]
 80072b8:	18fe      	adds	r6, r7, r3
 80072ba:	f7ff ffbb 	bl	8007234 <__hexdig_fun>
 80072be:	2800      	cmp	r0, #0
 80072c0:	d062      	beq.n	8007388 <__gethex+0x12a>
 80072c2:	4633      	mov	r3, r6
 80072c4:	7818      	ldrb	r0, [r3, #0]
 80072c6:	2830      	cmp	r0, #48	; 0x30
 80072c8:	461f      	mov	r7, r3
 80072ca:	f103 0301 	add.w	r3, r3, #1
 80072ce:	d0f9      	beq.n	80072c4 <__gethex+0x66>
 80072d0:	f7ff ffb0 	bl	8007234 <__hexdig_fun>
 80072d4:	fab0 f580 	clz	r5, r0
 80072d8:	096d      	lsrs	r5, r5, #5
 80072da:	4634      	mov	r4, r6
 80072dc:	f04f 0b01 	mov.w	fp, #1
 80072e0:	463a      	mov	r2, r7
 80072e2:	4616      	mov	r6, r2
 80072e4:	3201      	adds	r2, #1
 80072e6:	7830      	ldrb	r0, [r6, #0]
 80072e8:	f7ff ffa4 	bl	8007234 <__hexdig_fun>
 80072ec:	2800      	cmp	r0, #0
 80072ee:	d1f8      	bne.n	80072e2 <__gethex+0x84>
 80072f0:	9a01      	ldr	r2, [sp, #4]
 80072f2:	9903      	ldr	r1, [sp, #12]
 80072f4:	4630      	mov	r0, r6
 80072f6:	f001 f8d9 	bl	80084ac <strncmp>
 80072fa:	b950      	cbnz	r0, 8007312 <__gethex+0xb4>
 80072fc:	b954      	cbnz	r4, 8007314 <__gethex+0xb6>
 80072fe:	9b01      	ldr	r3, [sp, #4]
 8007300:	18f4      	adds	r4, r6, r3
 8007302:	4622      	mov	r2, r4
 8007304:	4616      	mov	r6, r2
 8007306:	3201      	adds	r2, #1
 8007308:	7830      	ldrb	r0, [r6, #0]
 800730a:	f7ff ff93 	bl	8007234 <__hexdig_fun>
 800730e:	2800      	cmp	r0, #0
 8007310:	d1f8      	bne.n	8007304 <__gethex+0xa6>
 8007312:	b10c      	cbz	r4, 8007318 <__gethex+0xba>
 8007314:	1ba4      	subs	r4, r4, r6
 8007316:	00a4      	lsls	r4, r4, #2
 8007318:	7833      	ldrb	r3, [r6, #0]
 800731a:	2b50      	cmp	r3, #80	; 0x50
 800731c:	d001      	beq.n	8007322 <__gethex+0xc4>
 800731e:	2b70      	cmp	r3, #112	; 0x70
 8007320:	d140      	bne.n	80073a4 <__gethex+0x146>
 8007322:	7873      	ldrb	r3, [r6, #1]
 8007324:	2b2b      	cmp	r3, #43	; 0x2b
 8007326:	d031      	beq.n	800738c <__gethex+0x12e>
 8007328:	2b2d      	cmp	r3, #45	; 0x2d
 800732a:	d033      	beq.n	8007394 <__gethex+0x136>
 800732c:	1c71      	adds	r1, r6, #1
 800732e:	f04f 0900 	mov.w	r9, #0
 8007332:	7808      	ldrb	r0, [r1, #0]
 8007334:	f7ff ff7e 	bl	8007234 <__hexdig_fun>
 8007338:	1e43      	subs	r3, r0, #1
 800733a:	b2db      	uxtb	r3, r3
 800733c:	2b18      	cmp	r3, #24
 800733e:	d831      	bhi.n	80073a4 <__gethex+0x146>
 8007340:	f1a0 0210 	sub.w	r2, r0, #16
 8007344:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007348:	f7ff ff74 	bl	8007234 <__hexdig_fun>
 800734c:	1e43      	subs	r3, r0, #1
 800734e:	b2db      	uxtb	r3, r3
 8007350:	2b18      	cmp	r3, #24
 8007352:	d922      	bls.n	800739a <__gethex+0x13c>
 8007354:	f1b9 0f00 	cmp.w	r9, #0
 8007358:	d000      	beq.n	800735c <__gethex+0xfe>
 800735a:	4252      	negs	r2, r2
 800735c:	4414      	add	r4, r2
 800735e:	f8ca 1000 	str.w	r1, [sl]
 8007362:	b30d      	cbz	r5, 80073a8 <__gethex+0x14a>
 8007364:	f1bb 0f00 	cmp.w	fp, #0
 8007368:	bf0c      	ite	eq
 800736a:	2706      	moveq	r7, #6
 800736c:	2700      	movne	r7, #0
 800736e:	4638      	mov	r0, r7
 8007370:	b00b      	add	sp, #44	; 0x2c
 8007372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007376:	f10b 0b01 	add.w	fp, fp, #1
 800737a:	e78a      	b.n	8007292 <__gethex+0x34>
 800737c:	2500      	movs	r5, #0
 800737e:	462c      	mov	r4, r5
 8007380:	e7ae      	b.n	80072e0 <__gethex+0x82>
 8007382:	463e      	mov	r6, r7
 8007384:	2501      	movs	r5, #1
 8007386:	e7c7      	b.n	8007318 <__gethex+0xba>
 8007388:	4604      	mov	r4, r0
 800738a:	e7fb      	b.n	8007384 <__gethex+0x126>
 800738c:	f04f 0900 	mov.w	r9, #0
 8007390:	1cb1      	adds	r1, r6, #2
 8007392:	e7ce      	b.n	8007332 <__gethex+0xd4>
 8007394:	f04f 0901 	mov.w	r9, #1
 8007398:	e7fa      	b.n	8007390 <__gethex+0x132>
 800739a:	230a      	movs	r3, #10
 800739c:	fb03 0202 	mla	r2, r3, r2, r0
 80073a0:	3a10      	subs	r2, #16
 80073a2:	e7cf      	b.n	8007344 <__gethex+0xe6>
 80073a4:	4631      	mov	r1, r6
 80073a6:	e7da      	b.n	800735e <__gethex+0x100>
 80073a8:	1bf3      	subs	r3, r6, r7
 80073aa:	3b01      	subs	r3, #1
 80073ac:	4629      	mov	r1, r5
 80073ae:	2b07      	cmp	r3, #7
 80073b0:	dc49      	bgt.n	8007446 <__gethex+0x1e8>
 80073b2:	9802      	ldr	r0, [sp, #8]
 80073b4:	f000 fa63 	bl	800787e <_Balloc>
 80073b8:	9b01      	ldr	r3, [sp, #4]
 80073ba:	f100 0914 	add.w	r9, r0, #20
 80073be:	f04f 0b00 	mov.w	fp, #0
 80073c2:	f1c3 0301 	rsb	r3, r3, #1
 80073c6:	4605      	mov	r5, r0
 80073c8:	f8cd 9010 	str.w	r9, [sp, #16]
 80073cc:	46da      	mov	sl, fp
 80073ce:	9308      	str	r3, [sp, #32]
 80073d0:	42b7      	cmp	r7, r6
 80073d2:	d33b      	bcc.n	800744c <__gethex+0x1ee>
 80073d4:	9804      	ldr	r0, [sp, #16]
 80073d6:	f840 ab04 	str.w	sl, [r0], #4
 80073da:	eba0 0009 	sub.w	r0, r0, r9
 80073de:	1080      	asrs	r0, r0, #2
 80073e0:	6128      	str	r0, [r5, #16]
 80073e2:	0147      	lsls	r7, r0, #5
 80073e4:	4650      	mov	r0, sl
 80073e6:	f000 fb0e 	bl	8007a06 <__hi0bits>
 80073ea:	f8d8 6000 	ldr.w	r6, [r8]
 80073ee:	1a3f      	subs	r7, r7, r0
 80073f0:	42b7      	cmp	r7, r6
 80073f2:	dd64      	ble.n	80074be <__gethex+0x260>
 80073f4:	1bbf      	subs	r7, r7, r6
 80073f6:	4639      	mov	r1, r7
 80073f8:	4628      	mov	r0, r5
 80073fa:	f000 fe1d 	bl	8008038 <__any_on>
 80073fe:	4682      	mov	sl, r0
 8007400:	b178      	cbz	r0, 8007422 <__gethex+0x1c4>
 8007402:	1e7b      	subs	r3, r7, #1
 8007404:	1159      	asrs	r1, r3, #5
 8007406:	f003 021f 	and.w	r2, r3, #31
 800740a:	f04f 0a01 	mov.w	sl, #1
 800740e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007412:	fa0a f202 	lsl.w	r2, sl, r2
 8007416:	420a      	tst	r2, r1
 8007418:	d003      	beq.n	8007422 <__gethex+0x1c4>
 800741a:	4553      	cmp	r3, sl
 800741c:	dc46      	bgt.n	80074ac <__gethex+0x24e>
 800741e:	f04f 0a02 	mov.w	sl, #2
 8007422:	4639      	mov	r1, r7
 8007424:	4628      	mov	r0, r5
 8007426:	f7ff fecb 	bl	80071c0 <rshift>
 800742a:	443c      	add	r4, r7
 800742c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007430:	42a3      	cmp	r3, r4
 8007432:	da52      	bge.n	80074da <__gethex+0x27c>
 8007434:	4629      	mov	r1, r5
 8007436:	9802      	ldr	r0, [sp, #8]
 8007438:	f000 fa55 	bl	80078e6 <_Bfree>
 800743c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800743e:	2300      	movs	r3, #0
 8007440:	6013      	str	r3, [r2, #0]
 8007442:	27a3      	movs	r7, #163	; 0xa3
 8007444:	e793      	b.n	800736e <__gethex+0x110>
 8007446:	3101      	adds	r1, #1
 8007448:	105b      	asrs	r3, r3, #1
 800744a:	e7b0      	b.n	80073ae <__gethex+0x150>
 800744c:	1e73      	subs	r3, r6, #1
 800744e:	9305      	str	r3, [sp, #20]
 8007450:	9a07      	ldr	r2, [sp, #28]
 8007452:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007456:	4293      	cmp	r3, r2
 8007458:	d018      	beq.n	800748c <__gethex+0x22e>
 800745a:	f1bb 0f20 	cmp.w	fp, #32
 800745e:	d107      	bne.n	8007470 <__gethex+0x212>
 8007460:	9b04      	ldr	r3, [sp, #16]
 8007462:	f8c3 a000 	str.w	sl, [r3]
 8007466:	3304      	adds	r3, #4
 8007468:	f04f 0a00 	mov.w	sl, #0
 800746c:	9304      	str	r3, [sp, #16]
 800746e:	46d3      	mov	fp, sl
 8007470:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007474:	f7ff fede 	bl	8007234 <__hexdig_fun>
 8007478:	f000 000f 	and.w	r0, r0, #15
 800747c:	fa00 f00b 	lsl.w	r0, r0, fp
 8007480:	ea4a 0a00 	orr.w	sl, sl, r0
 8007484:	f10b 0b04 	add.w	fp, fp, #4
 8007488:	9b05      	ldr	r3, [sp, #20]
 800748a:	e00d      	b.n	80074a8 <__gethex+0x24a>
 800748c:	9b05      	ldr	r3, [sp, #20]
 800748e:	9a08      	ldr	r2, [sp, #32]
 8007490:	4413      	add	r3, r2
 8007492:	42bb      	cmp	r3, r7
 8007494:	d3e1      	bcc.n	800745a <__gethex+0x1fc>
 8007496:	4618      	mov	r0, r3
 8007498:	9a01      	ldr	r2, [sp, #4]
 800749a:	9903      	ldr	r1, [sp, #12]
 800749c:	9309      	str	r3, [sp, #36]	; 0x24
 800749e:	f001 f805 	bl	80084ac <strncmp>
 80074a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074a4:	2800      	cmp	r0, #0
 80074a6:	d1d8      	bne.n	800745a <__gethex+0x1fc>
 80074a8:	461e      	mov	r6, r3
 80074aa:	e791      	b.n	80073d0 <__gethex+0x172>
 80074ac:	1eb9      	subs	r1, r7, #2
 80074ae:	4628      	mov	r0, r5
 80074b0:	f000 fdc2 	bl	8008038 <__any_on>
 80074b4:	2800      	cmp	r0, #0
 80074b6:	d0b2      	beq.n	800741e <__gethex+0x1c0>
 80074b8:	f04f 0a03 	mov.w	sl, #3
 80074bc:	e7b1      	b.n	8007422 <__gethex+0x1c4>
 80074be:	da09      	bge.n	80074d4 <__gethex+0x276>
 80074c0:	1bf7      	subs	r7, r6, r7
 80074c2:	4629      	mov	r1, r5
 80074c4:	463a      	mov	r2, r7
 80074c6:	9802      	ldr	r0, [sp, #8]
 80074c8:	f000 fbd8 	bl	8007c7c <__lshift>
 80074cc:	1be4      	subs	r4, r4, r7
 80074ce:	4605      	mov	r5, r0
 80074d0:	f100 0914 	add.w	r9, r0, #20
 80074d4:	f04f 0a00 	mov.w	sl, #0
 80074d8:	e7a8      	b.n	800742c <__gethex+0x1ce>
 80074da:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80074de:	42a0      	cmp	r0, r4
 80074e0:	dd6a      	ble.n	80075b8 <__gethex+0x35a>
 80074e2:	1b04      	subs	r4, r0, r4
 80074e4:	42a6      	cmp	r6, r4
 80074e6:	dc2e      	bgt.n	8007546 <__gethex+0x2e8>
 80074e8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80074ec:	2b02      	cmp	r3, #2
 80074ee:	d022      	beq.n	8007536 <__gethex+0x2d8>
 80074f0:	2b03      	cmp	r3, #3
 80074f2:	d024      	beq.n	800753e <__gethex+0x2e0>
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d115      	bne.n	8007524 <__gethex+0x2c6>
 80074f8:	42a6      	cmp	r6, r4
 80074fa:	d113      	bne.n	8007524 <__gethex+0x2c6>
 80074fc:	2e01      	cmp	r6, #1
 80074fe:	dc0b      	bgt.n	8007518 <__gethex+0x2ba>
 8007500:	9a06      	ldr	r2, [sp, #24]
 8007502:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007506:	6013      	str	r3, [r2, #0]
 8007508:	2301      	movs	r3, #1
 800750a:	612b      	str	r3, [r5, #16]
 800750c:	f8c9 3000 	str.w	r3, [r9]
 8007510:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007512:	2762      	movs	r7, #98	; 0x62
 8007514:	601d      	str	r5, [r3, #0]
 8007516:	e72a      	b.n	800736e <__gethex+0x110>
 8007518:	1e71      	subs	r1, r6, #1
 800751a:	4628      	mov	r0, r5
 800751c:	f000 fd8c 	bl	8008038 <__any_on>
 8007520:	2800      	cmp	r0, #0
 8007522:	d1ed      	bne.n	8007500 <__gethex+0x2a2>
 8007524:	4629      	mov	r1, r5
 8007526:	9802      	ldr	r0, [sp, #8]
 8007528:	f000 f9dd 	bl	80078e6 <_Bfree>
 800752c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800752e:	2300      	movs	r3, #0
 8007530:	6013      	str	r3, [r2, #0]
 8007532:	2750      	movs	r7, #80	; 0x50
 8007534:	e71b      	b.n	800736e <__gethex+0x110>
 8007536:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007538:	2b00      	cmp	r3, #0
 800753a:	d0e1      	beq.n	8007500 <__gethex+0x2a2>
 800753c:	e7f2      	b.n	8007524 <__gethex+0x2c6>
 800753e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007540:	2b00      	cmp	r3, #0
 8007542:	d1dd      	bne.n	8007500 <__gethex+0x2a2>
 8007544:	e7ee      	b.n	8007524 <__gethex+0x2c6>
 8007546:	1e67      	subs	r7, r4, #1
 8007548:	f1ba 0f00 	cmp.w	sl, #0
 800754c:	d131      	bne.n	80075b2 <__gethex+0x354>
 800754e:	b127      	cbz	r7, 800755a <__gethex+0x2fc>
 8007550:	4639      	mov	r1, r7
 8007552:	4628      	mov	r0, r5
 8007554:	f000 fd70 	bl	8008038 <__any_on>
 8007558:	4682      	mov	sl, r0
 800755a:	117a      	asrs	r2, r7, #5
 800755c:	2301      	movs	r3, #1
 800755e:	f007 071f 	and.w	r7, r7, #31
 8007562:	fa03 f707 	lsl.w	r7, r3, r7
 8007566:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800756a:	4621      	mov	r1, r4
 800756c:	421f      	tst	r7, r3
 800756e:	4628      	mov	r0, r5
 8007570:	bf18      	it	ne
 8007572:	f04a 0a02 	orrne.w	sl, sl, #2
 8007576:	1b36      	subs	r6, r6, r4
 8007578:	f7ff fe22 	bl	80071c0 <rshift>
 800757c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8007580:	2702      	movs	r7, #2
 8007582:	f1ba 0f00 	cmp.w	sl, #0
 8007586:	d048      	beq.n	800761a <__gethex+0x3bc>
 8007588:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800758c:	2b02      	cmp	r3, #2
 800758e:	d015      	beq.n	80075bc <__gethex+0x35e>
 8007590:	2b03      	cmp	r3, #3
 8007592:	d017      	beq.n	80075c4 <__gethex+0x366>
 8007594:	2b01      	cmp	r3, #1
 8007596:	d109      	bne.n	80075ac <__gethex+0x34e>
 8007598:	f01a 0f02 	tst.w	sl, #2
 800759c:	d006      	beq.n	80075ac <__gethex+0x34e>
 800759e:	f8d9 3000 	ldr.w	r3, [r9]
 80075a2:	ea4a 0a03 	orr.w	sl, sl, r3
 80075a6:	f01a 0f01 	tst.w	sl, #1
 80075aa:	d10e      	bne.n	80075ca <__gethex+0x36c>
 80075ac:	f047 0710 	orr.w	r7, r7, #16
 80075b0:	e033      	b.n	800761a <__gethex+0x3bc>
 80075b2:	f04f 0a01 	mov.w	sl, #1
 80075b6:	e7d0      	b.n	800755a <__gethex+0x2fc>
 80075b8:	2701      	movs	r7, #1
 80075ba:	e7e2      	b.n	8007582 <__gethex+0x324>
 80075bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80075be:	f1c3 0301 	rsb	r3, r3, #1
 80075c2:	9315      	str	r3, [sp, #84]	; 0x54
 80075c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d0f0      	beq.n	80075ac <__gethex+0x34e>
 80075ca:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80075ce:	f105 0314 	add.w	r3, r5, #20
 80075d2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80075d6:	eb03 010a 	add.w	r1, r3, sl
 80075da:	f04f 0c00 	mov.w	ip, #0
 80075de:	4618      	mov	r0, r3
 80075e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80075e4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80075e8:	d01c      	beq.n	8007624 <__gethex+0x3c6>
 80075ea:	3201      	adds	r2, #1
 80075ec:	6002      	str	r2, [r0, #0]
 80075ee:	2f02      	cmp	r7, #2
 80075f0:	f105 0314 	add.w	r3, r5, #20
 80075f4:	d138      	bne.n	8007668 <__gethex+0x40a>
 80075f6:	f8d8 2000 	ldr.w	r2, [r8]
 80075fa:	3a01      	subs	r2, #1
 80075fc:	42b2      	cmp	r2, r6
 80075fe:	d10a      	bne.n	8007616 <__gethex+0x3b8>
 8007600:	1171      	asrs	r1, r6, #5
 8007602:	2201      	movs	r2, #1
 8007604:	f006 061f 	and.w	r6, r6, #31
 8007608:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800760c:	fa02 f606 	lsl.w	r6, r2, r6
 8007610:	421e      	tst	r6, r3
 8007612:	bf18      	it	ne
 8007614:	4617      	movne	r7, r2
 8007616:	f047 0720 	orr.w	r7, r7, #32
 800761a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800761c:	601d      	str	r5, [r3, #0]
 800761e:	9b06      	ldr	r3, [sp, #24]
 8007620:	601c      	str	r4, [r3, #0]
 8007622:	e6a4      	b.n	800736e <__gethex+0x110>
 8007624:	4299      	cmp	r1, r3
 8007626:	f843 cc04 	str.w	ip, [r3, #-4]
 800762a:	d8d8      	bhi.n	80075de <__gethex+0x380>
 800762c:	68ab      	ldr	r3, [r5, #8]
 800762e:	4599      	cmp	r9, r3
 8007630:	db12      	blt.n	8007658 <__gethex+0x3fa>
 8007632:	6869      	ldr	r1, [r5, #4]
 8007634:	9802      	ldr	r0, [sp, #8]
 8007636:	3101      	adds	r1, #1
 8007638:	f000 f921 	bl	800787e <_Balloc>
 800763c:	692a      	ldr	r2, [r5, #16]
 800763e:	3202      	adds	r2, #2
 8007640:	f105 010c 	add.w	r1, r5, #12
 8007644:	4683      	mov	fp, r0
 8007646:	0092      	lsls	r2, r2, #2
 8007648:	300c      	adds	r0, #12
 800764a:	f000 f90d 	bl	8007868 <memcpy>
 800764e:	4629      	mov	r1, r5
 8007650:	9802      	ldr	r0, [sp, #8]
 8007652:	f000 f948 	bl	80078e6 <_Bfree>
 8007656:	465d      	mov	r5, fp
 8007658:	692b      	ldr	r3, [r5, #16]
 800765a:	1c5a      	adds	r2, r3, #1
 800765c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007660:	612a      	str	r2, [r5, #16]
 8007662:	2201      	movs	r2, #1
 8007664:	615a      	str	r2, [r3, #20]
 8007666:	e7c2      	b.n	80075ee <__gethex+0x390>
 8007668:	692a      	ldr	r2, [r5, #16]
 800766a:	454a      	cmp	r2, r9
 800766c:	dd0b      	ble.n	8007686 <__gethex+0x428>
 800766e:	2101      	movs	r1, #1
 8007670:	4628      	mov	r0, r5
 8007672:	f7ff fda5 	bl	80071c0 <rshift>
 8007676:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800767a:	3401      	adds	r4, #1
 800767c:	42a3      	cmp	r3, r4
 800767e:	f6ff aed9 	blt.w	8007434 <__gethex+0x1d6>
 8007682:	2701      	movs	r7, #1
 8007684:	e7c7      	b.n	8007616 <__gethex+0x3b8>
 8007686:	f016 061f 	ands.w	r6, r6, #31
 800768a:	d0fa      	beq.n	8007682 <__gethex+0x424>
 800768c:	449a      	add	sl, r3
 800768e:	f1c6 0620 	rsb	r6, r6, #32
 8007692:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8007696:	f000 f9b6 	bl	8007a06 <__hi0bits>
 800769a:	42b0      	cmp	r0, r6
 800769c:	dbe7      	blt.n	800766e <__gethex+0x410>
 800769e:	e7f0      	b.n	8007682 <__gethex+0x424>

080076a0 <L_shift>:
 80076a0:	f1c2 0208 	rsb	r2, r2, #8
 80076a4:	0092      	lsls	r2, r2, #2
 80076a6:	b570      	push	{r4, r5, r6, lr}
 80076a8:	f1c2 0620 	rsb	r6, r2, #32
 80076ac:	6843      	ldr	r3, [r0, #4]
 80076ae:	6804      	ldr	r4, [r0, #0]
 80076b0:	fa03 f506 	lsl.w	r5, r3, r6
 80076b4:	432c      	orrs	r4, r5
 80076b6:	40d3      	lsrs	r3, r2
 80076b8:	6004      	str	r4, [r0, #0]
 80076ba:	f840 3f04 	str.w	r3, [r0, #4]!
 80076be:	4288      	cmp	r0, r1
 80076c0:	d3f4      	bcc.n	80076ac <L_shift+0xc>
 80076c2:	bd70      	pop	{r4, r5, r6, pc}

080076c4 <__match>:
 80076c4:	b530      	push	{r4, r5, lr}
 80076c6:	6803      	ldr	r3, [r0, #0]
 80076c8:	3301      	adds	r3, #1
 80076ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076ce:	b914      	cbnz	r4, 80076d6 <__match+0x12>
 80076d0:	6003      	str	r3, [r0, #0]
 80076d2:	2001      	movs	r0, #1
 80076d4:	bd30      	pop	{r4, r5, pc}
 80076d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076da:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80076de:	2d19      	cmp	r5, #25
 80076e0:	bf98      	it	ls
 80076e2:	3220      	addls	r2, #32
 80076e4:	42a2      	cmp	r2, r4
 80076e6:	d0f0      	beq.n	80076ca <__match+0x6>
 80076e8:	2000      	movs	r0, #0
 80076ea:	e7f3      	b.n	80076d4 <__match+0x10>

080076ec <__hexnan>:
 80076ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076f0:	680b      	ldr	r3, [r1, #0]
 80076f2:	6801      	ldr	r1, [r0, #0]
 80076f4:	115f      	asrs	r7, r3, #5
 80076f6:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80076fa:	f013 031f 	ands.w	r3, r3, #31
 80076fe:	b087      	sub	sp, #28
 8007700:	bf18      	it	ne
 8007702:	3704      	addne	r7, #4
 8007704:	2500      	movs	r5, #0
 8007706:	1f3e      	subs	r6, r7, #4
 8007708:	4682      	mov	sl, r0
 800770a:	4690      	mov	r8, r2
 800770c:	9301      	str	r3, [sp, #4]
 800770e:	f847 5c04 	str.w	r5, [r7, #-4]
 8007712:	46b1      	mov	r9, r6
 8007714:	4634      	mov	r4, r6
 8007716:	9502      	str	r5, [sp, #8]
 8007718:	46ab      	mov	fp, r5
 800771a:	784a      	ldrb	r2, [r1, #1]
 800771c:	1c4b      	adds	r3, r1, #1
 800771e:	9303      	str	r3, [sp, #12]
 8007720:	b342      	cbz	r2, 8007774 <__hexnan+0x88>
 8007722:	4610      	mov	r0, r2
 8007724:	9105      	str	r1, [sp, #20]
 8007726:	9204      	str	r2, [sp, #16]
 8007728:	f7ff fd84 	bl	8007234 <__hexdig_fun>
 800772c:	2800      	cmp	r0, #0
 800772e:	d143      	bne.n	80077b8 <__hexnan+0xcc>
 8007730:	9a04      	ldr	r2, [sp, #16]
 8007732:	9905      	ldr	r1, [sp, #20]
 8007734:	2a20      	cmp	r2, #32
 8007736:	d818      	bhi.n	800776a <__hexnan+0x7e>
 8007738:	9b02      	ldr	r3, [sp, #8]
 800773a:	459b      	cmp	fp, r3
 800773c:	dd13      	ble.n	8007766 <__hexnan+0x7a>
 800773e:	454c      	cmp	r4, r9
 8007740:	d206      	bcs.n	8007750 <__hexnan+0x64>
 8007742:	2d07      	cmp	r5, #7
 8007744:	dc04      	bgt.n	8007750 <__hexnan+0x64>
 8007746:	462a      	mov	r2, r5
 8007748:	4649      	mov	r1, r9
 800774a:	4620      	mov	r0, r4
 800774c:	f7ff ffa8 	bl	80076a0 <L_shift>
 8007750:	4544      	cmp	r4, r8
 8007752:	d944      	bls.n	80077de <__hexnan+0xf2>
 8007754:	2300      	movs	r3, #0
 8007756:	f1a4 0904 	sub.w	r9, r4, #4
 800775a:	f844 3c04 	str.w	r3, [r4, #-4]
 800775e:	f8cd b008 	str.w	fp, [sp, #8]
 8007762:	464c      	mov	r4, r9
 8007764:	461d      	mov	r5, r3
 8007766:	9903      	ldr	r1, [sp, #12]
 8007768:	e7d7      	b.n	800771a <__hexnan+0x2e>
 800776a:	2a29      	cmp	r2, #41	; 0x29
 800776c:	d14a      	bne.n	8007804 <__hexnan+0x118>
 800776e:	3102      	adds	r1, #2
 8007770:	f8ca 1000 	str.w	r1, [sl]
 8007774:	f1bb 0f00 	cmp.w	fp, #0
 8007778:	d044      	beq.n	8007804 <__hexnan+0x118>
 800777a:	454c      	cmp	r4, r9
 800777c:	d206      	bcs.n	800778c <__hexnan+0xa0>
 800777e:	2d07      	cmp	r5, #7
 8007780:	dc04      	bgt.n	800778c <__hexnan+0xa0>
 8007782:	462a      	mov	r2, r5
 8007784:	4649      	mov	r1, r9
 8007786:	4620      	mov	r0, r4
 8007788:	f7ff ff8a 	bl	80076a0 <L_shift>
 800778c:	4544      	cmp	r4, r8
 800778e:	d928      	bls.n	80077e2 <__hexnan+0xf6>
 8007790:	4643      	mov	r3, r8
 8007792:	f854 2b04 	ldr.w	r2, [r4], #4
 8007796:	f843 2b04 	str.w	r2, [r3], #4
 800779a:	42a6      	cmp	r6, r4
 800779c:	d2f9      	bcs.n	8007792 <__hexnan+0xa6>
 800779e:	2200      	movs	r2, #0
 80077a0:	f843 2b04 	str.w	r2, [r3], #4
 80077a4:	429e      	cmp	r6, r3
 80077a6:	d2fb      	bcs.n	80077a0 <__hexnan+0xb4>
 80077a8:	6833      	ldr	r3, [r6, #0]
 80077aa:	b91b      	cbnz	r3, 80077b4 <__hexnan+0xc8>
 80077ac:	4546      	cmp	r6, r8
 80077ae:	d127      	bne.n	8007800 <__hexnan+0x114>
 80077b0:	2301      	movs	r3, #1
 80077b2:	6033      	str	r3, [r6, #0]
 80077b4:	2005      	movs	r0, #5
 80077b6:	e026      	b.n	8007806 <__hexnan+0x11a>
 80077b8:	3501      	adds	r5, #1
 80077ba:	2d08      	cmp	r5, #8
 80077bc:	f10b 0b01 	add.w	fp, fp, #1
 80077c0:	dd06      	ble.n	80077d0 <__hexnan+0xe4>
 80077c2:	4544      	cmp	r4, r8
 80077c4:	d9cf      	bls.n	8007766 <__hexnan+0x7a>
 80077c6:	2300      	movs	r3, #0
 80077c8:	f844 3c04 	str.w	r3, [r4, #-4]
 80077cc:	2501      	movs	r5, #1
 80077ce:	3c04      	subs	r4, #4
 80077d0:	6822      	ldr	r2, [r4, #0]
 80077d2:	f000 000f 	and.w	r0, r0, #15
 80077d6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80077da:	6020      	str	r0, [r4, #0]
 80077dc:	e7c3      	b.n	8007766 <__hexnan+0x7a>
 80077de:	2508      	movs	r5, #8
 80077e0:	e7c1      	b.n	8007766 <__hexnan+0x7a>
 80077e2:	9b01      	ldr	r3, [sp, #4]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d0df      	beq.n	80077a8 <__hexnan+0xbc>
 80077e8:	f04f 32ff 	mov.w	r2, #4294967295
 80077ec:	f1c3 0320 	rsb	r3, r3, #32
 80077f0:	fa22 f303 	lsr.w	r3, r2, r3
 80077f4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80077f8:	401a      	ands	r2, r3
 80077fa:	f847 2c04 	str.w	r2, [r7, #-4]
 80077fe:	e7d3      	b.n	80077a8 <__hexnan+0xbc>
 8007800:	3e04      	subs	r6, #4
 8007802:	e7d1      	b.n	80077a8 <__hexnan+0xbc>
 8007804:	2004      	movs	r0, #4
 8007806:	b007      	add	sp, #28
 8007808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800780c <__locale_ctype_ptr_l>:
 800780c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8007810:	4770      	bx	lr

08007812 <__localeconv_l>:
 8007812:	30f0      	adds	r0, #240	; 0xf0
 8007814:	4770      	bx	lr
	...

08007818 <_localeconv_r>:
 8007818:	4b04      	ldr	r3, [pc, #16]	; (800782c <_localeconv_r+0x14>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	6a18      	ldr	r0, [r3, #32]
 800781e:	4b04      	ldr	r3, [pc, #16]	; (8007830 <_localeconv_r+0x18>)
 8007820:	2800      	cmp	r0, #0
 8007822:	bf08      	it	eq
 8007824:	4618      	moveq	r0, r3
 8007826:	30f0      	adds	r0, #240	; 0xf0
 8007828:	4770      	bx	lr
 800782a:	bf00      	nop
 800782c:	2000000c 	.word	0x2000000c
 8007830:	20000070 	.word	0x20000070

08007834 <malloc>:
 8007834:	4b02      	ldr	r3, [pc, #8]	; (8007840 <malloc+0xc>)
 8007836:	4601      	mov	r1, r0
 8007838:	6818      	ldr	r0, [r3, #0]
 800783a:	f000 bc7b 	b.w	8008134 <_malloc_r>
 800783e:	bf00      	nop
 8007840:	2000000c 	.word	0x2000000c

08007844 <__ascii_mbtowc>:
 8007844:	b082      	sub	sp, #8
 8007846:	b901      	cbnz	r1, 800784a <__ascii_mbtowc+0x6>
 8007848:	a901      	add	r1, sp, #4
 800784a:	b142      	cbz	r2, 800785e <__ascii_mbtowc+0x1a>
 800784c:	b14b      	cbz	r3, 8007862 <__ascii_mbtowc+0x1e>
 800784e:	7813      	ldrb	r3, [r2, #0]
 8007850:	600b      	str	r3, [r1, #0]
 8007852:	7812      	ldrb	r2, [r2, #0]
 8007854:	1c10      	adds	r0, r2, #0
 8007856:	bf18      	it	ne
 8007858:	2001      	movne	r0, #1
 800785a:	b002      	add	sp, #8
 800785c:	4770      	bx	lr
 800785e:	4610      	mov	r0, r2
 8007860:	e7fb      	b.n	800785a <__ascii_mbtowc+0x16>
 8007862:	f06f 0001 	mvn.w	r0, #1
 8007866:	e7f8      	b.n	800785a <__ascii_mbtowc+0x16>

08007868 <memcpy>:
 8007868:	b510      	push	{r4, lr}
 800786a:	1e43      	subs	r3, r0, #1
 800786c:	440a      	add	r2, r1
 800786e:	4291      	cmp	r1, r2
 8007870:	d100      	bne.n	8007874 <memcpy+0xc>
 8007872:	bd10      	pop	{r4, pc}
 8007874:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007878:	f803 4f01 	strb.w	r4, [r3, #1]!
 800787c:	e7f7      	b.n	800786e <memcpy+0x6>

0800787e <_Balloc>:
 800787e:	b570      	push	{r4, r5, r6, lr}
 8007880:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007882:	4604      	mov	r4, r0
 8007884:	460e      	mov	r6, r1
 8007886:	b93d      	cbnz	r5, 8007898 <_Balloc+0x1a>
 8007888:	2010      	movs	r0, #16
 800788a:	f7ff ffd3 	bl	8007834 <malloc>
 800788e:	6260      	str	r0, [r4, #36]	; 0x24
 8007890:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007894:	6005      	str	r5, [r0, #0]
 8007896:	60c5      	str	r5, [r0, #12]
 8007898:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800789a:	68eb      	ldr	r3, [r5, #12]
 800789c:	b183      	cbz	r3, 80078c0 <_Balloc+0x42>
 800789e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078a0:	68db      	ldr	r3, [r3, #12]
 80078a2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80078a6:	b9b8      	cbnz	r0, 80078d8 <_Balloc+0x5a>
 80078a8:	2101      	movs	r1, #1
 80078aa:	fa01 f506 	lsl.w	r5, r1, r6
 80078ae:	1d6a      	adds	r2, r5, #5
 80078b0:	0092      	lsls	r2, r2, #2
 80078b2:	4620      	mov	r0, r4
 80078b4:	f000 fbe1 	bl	800807a <_calloc_r>
 80078b8:	b160      	cbz	r0, 80078d4 <_Balloc+0x56>
 80078ba:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80078be:	e00e      	b.n	80078de <_Balloc+0x60>
 80078c0:	2221      	movs	r2, #33	; 0x21
 80078c2:	2104      	movs	r1, #4
 80078c4:	4620      	mov	r0, r4
 80078c6:	f000 fbd8 	bl	800807a <_calloc_r>
 80078ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078cc:	60e8      	str	r0, [r5, #12]
 80078ce:	68db      	ldr	r3, [r3, #12]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d1e4      	bne.n	800789e <_Balloc+0x20>
 80078d4:	2000      	movs	r0, #0
 80078d6:	bd70      	pop	{r4, r5, r6, pc}
 80078d8:	6802      	ldr	r2, [r0, #0]
 80078da:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80078de:	2300      	movs	r3, #0
 80078e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80078e4:	e7f7      	b.n	80078d6 <_Balloc+0x58>

080078e6 <_Bfree>:
 80078e6:	b570      	push	{r4, r5, r6, lr}
 80078e8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80078ea:	4606      	mov	r6, r0
 80078ec:	460d      	mov	r5, r1
 80078ee:	b93c      	cbnz	r4, 8007900 <_Bfree+0x1a>
 80078f0:	2010      	movs	r0, #16
 80078f2:	f7ff ff9f 	bl	8007834 <malloc>
 80078f6:	6270      	str	r0, [r6, #36]	; 0x24
 80078f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80078fc:	6004      	str	r4, [r0, #0]
 80078fe:	60c4      	str	r4, [r0, #12]
 8007900:	b13d      	cbz	r5, 8007912 <_Bfree+0x2c>
 8007902:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007904:	686a      	ldr	r2, [r5, #4]
 8007906:	68db      	ldr	r3, [r3, #12]
 8007908:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800790c:	6029      	str	r1, [r5, #0]
 800790e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007912:	bd70      	pop	{r4, r5, r6, pc}

08007914 <__multadd>:
 8007914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007918:	690d      	ldr	r5, [r1, #16]
 800791a:	461f      	mov	r7, r3
 800791c:	4606      	mov	r6, r0
 800791e:	460c      	mov	r4, r1
 8007920:	f101 0c14 	add.w	ip, r1, #20
 8007924:	2300      	movs	r3, #0
 8007926:	f8dc 0000 	ldr.w	r0, [ip]
 800792a:	b281      	uxth	r1, r0
 800792c:	fb02 7101 	mla	r1, r2, r1, r7
 8007930:	0c0f      	lsrs	r7, r1, #16
 8007932:	0c00      	lsrs	r0, r0, #16
 8007934:	fb02 7000 	mla	r0, r2, r0, r7
 8007938:	b289      	uxth	r1, r1
 800793a:	3301      	adds	r3, #1
 800793c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007940:	429d      	cmp	r5, r3
 8007942:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007946:	f84c 1b04 	str.w	r1, [ip], #4
 800794a:	dcec      	bgt.n	8007926 <__multadd+0x12>
 800794c:	b1d7      	cbz	r7, 8007984 <__multadd+0x70>
 800794e:	68a3      	ldr	r3, [r4, #8]
 8007950:	42ab      	cmp	r3, r5
 8007952:	dc12      	bgt.n	800797a <__multadd+0x66>
 8007954:	6861      	ldr	r1, [r4, #4]
 8007956:	4630      	mov	r0, r6
 8007958:	3101      	adds	r1, #1
 800795a:	f7ff ff90 	bl	800787e <_Balloc>
 800795e:	6922      	ldr	r2, [r4, #16]
 8007960:	3202      	adds	r2, #2
 8007962:	f104 010c 	add.w	r1, r4, #12
 8007966:	4680      	mov	r8, r0
 8007968:	0092      	lsls	r2, r2, #2
 800796a:	300c      	adds	r0, #12
 800796c:	f7ff ff7c 	bl	8007868 <memcpy>
 8007970:	4621      	mov	r1, r4
 8007972:	4630      	mov	r0, r6
 8007974:	f7ff ffb7 	bl	80078e6 <_Bfree>
 8007978:	4644      	mov	r4, r8
 800797a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800797e:	3501      	adds	r5, #1
 8007980:	615f      	str	r7, [r3, #20]
 8007982:	6125      	str	r5, [r4, #16]
 8007984:	4620      	mov	r0, r4
 8007986:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800798a <__s2b>:
 800798a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800798e:	460c      	mov	r4, r1
 8007990:	4615      	mov	r5, r2
 8007992:	461f      	mov	r7, r3
 8007994:	2209      	movs	r2, #9
 8007996:	3308      	adds	r3, #8
 8007998:	4606      	mov	r6, r0
 800799a:	fb93 f3f2 	sdiv	r3, r3, r2
 800799e:	2100      	movs	r1, #0
 80079a0:	2201      	movs	r2, #1
 80079a2:	429a      	cmp	r2, r3
 80079a4:	db20      	blt.n	80079e8 <__s2b+0x5e>
 80079a6:	4630      	mov	r0, r6
 80079a8:	f7ff ff69 	bl	800787e <_Balloc>
 80079ac:	9b08      	ldr	r3, [sp, #32]
 80079ae:	6143      	str	r3, [r0, #20]
 80079b0:	2d09      	cmp	r5, #9
 80079b2:	f04f 0301 	mov.w	r3, #1
 80079b6:	6103      	str	r3, [r0, #16]
 80079b8:	dd19      	ble.n	80079ee <__s2b+0x64>
 80079ba:	f104 0809 	add.w	r8, r4, #9
 80079be:	46c1      	mov	r9, r8
 80079c0:	442c      	add	r4, r5
 80079c2:	f819 3b01 	ldrb.w	r3, [r9], #1
 80079c6:	4601      	mov	r1, r0
 80079c8:	3b30      	subs	r3, #48	; 0x30
 80079ca:	220a      	movs	r2, #10
 80079cc:	4630      	mov	r0, r6
 80079ce:	f7ff ffa1 	bl	8007914 <__multadd>
 80079d2:	45a1      	cmp	r9, r4
 80079d4:	d1f5      	bne.n	80079c2 <__s2b+0x38>
 80079d6:	eb08 0405 	add.w	r4, r8, r5
 80079da:	3c08      	subs	r4, #8
 80079dc:	1b2d      	subs	r5, r5, r4
 80079de:	1963      	adds	r3, r4, r5
 80079e0:	42bb      	cmp	r3, r7
 80079e2:	db07      	blt.n	80079f4 <__s2b+0x6a>
 80079e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079e8:	0052      	lsls	r2, r2, #1
 80079ea:	3101      	adds	r1, #1
 80079ec:	e7d9      	b.n	80079a2 <__s2b+0x18>
 80079ee:	340a      	adds	r4, #10
 80079f0:	2509      	movs	r5, #9
 80079f2:	e7f3      	b.n	80079dc <__s2b+0x52>
 80079f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80079f8:	4601      	mov	r1, r0
 80079fa:	3b30      	subs	r3, #48	; 0x30
 80079fc:	220a      	movs	r2, #10
 80079fe:	4630      	mov	r0, r6
 8007a00:	f7ff ff88 	bl	8007914 <__multadd>
 8007a04:	e7eb      	b.n	80079de <__s2b+0x54>

08007a06 <__hi0bits>:
 8007a06:	0c02      	lsrs	r2, r0, #16
 8007a08:	0412      	lsls	r2, r2, #16
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	b9b2      	cbnz	r2, 8007a3c <__hi0bits+0x36>
 8007a0e:	0403      	lsls	r3, r0, #16
 8007a10:	2010      	movs	r0, #16
 8007a12:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007a16:	bf04      	itt	eq
 8007a18:	021b      	lsleq	r3, r3, #8
 8007a1a:	3008      	addeq	r0, #8
 8007a1c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007a20:	bf04      	itt	eq
 8007a22:	011b      	lsleq	r3, r3, #4
 8007a24:	3004      	addeq	r0, #4
 8007a26:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007a2a:	bf04      	itt	eq
 8007a2c:	009b      	lsleq	r3, r3, #2
 8007a2e:	3002      	addeq	r0, #2
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	db06      	blt.n	8007a42 <__hi0bits+0x3c>
 8007a34:	005b      	lsls	r3, r3, #1
 8007a36:	d503      	bpl.n	8007a40 <__hi0bits+0x3a>
 8007a38:	3001      	adds	r0, #1
 8007a3a:	4770      	bx	lr
 8007a3c:	2000      	movs	r0, #0
 8007a3e:	e7e8      	b.n	8007a12 <__hi0bits+0xc>
 8007a40:	2020      	movs	r0, #32
 8007a42:	4770      	bx	lr

08007a44 <__lo0bits>:
 8007a44:	6803      	ldr	r3, [r0, #0]
 8007a46:	f013 0207 	ands.w	r2, r3, #7
 8007a4a:	4601      	mov	r1, r0
 8007a4c:	d00b      	beq.n	8007a66 <__lo0bits+0x22>
 8007a4e:	07da      	lsls	r2, r3, #31
 8007a50:	d423      	bmi.n	8007a9a <__lo0bits+0x56>
 8007a52:	0798      	lsls	r0, r3, #30
 8007a54:	bf49      	itett	mi
 8007a56:	085b      	lsrmi	r3, r3, #1
 8007a58:	089b      	lsrpl	r3, r3, #2
 8007a5a:	2001      	movmi	r0, #1
 8007a5c:	600b      	strmi	r3, [r1, #0]
 8007a5e:	bf5c      	itt	pl
 8007a60:	600b      	strpl	r3, [r1, #0]
 8007a62:	2002      	movpl	r0, #2
 8007a64:	4770      	bx	lr
 8007a66:	b298      	uxth	r0, r3
 8007a68:	b9a8      	cbnz	r0, 8007a96 <__lo0bits+0x52>
 8007a6a:	0c1b      	lsrs	r3, r3, #16
 8007a6c:	2010      	movs	r0, #16
 8007a6e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007a72:	bf04      	itt	eq
 8007a74:	0a1b      	lsreq	r3, r3, #8
 8007a76:	3008      	addeq	r0, #8
 8007a78:	071a      	lsls	r2, r3, #28
 8007a7a:	bf04      	itt	eq
 8007a7c:	091b      	lsreq	r3, r3, #4
 8007a7e:	3004      	addeq	r0, #4
 8007a80:	079a      	lsls	r2, r3, #30
 8007a82:	bf04      	itt	eq
 8007a84:	089b      	lsreq	r3, r3, #2
 8007a86:	3002      	addeq	r0, #2
 8007a88:	07da      	lsls	r2, r3, #31
 8007a8a:	d402      	bmi.n	8007a92 <__lo0bits+0x4e>
 8007a8c:	085b      	lsrs	r3, r3, #1
 8007a8e:	d006      	beq.n	8007a9e <__lo0bits+0x5a>
 8007a90:	3001      	adds	r0, #1
 8007a92:	600b      	str	r3, [r1, #0]
 8007a94:	4770      	bx	lr
 8007a96:	4610      	mov	r0, r2
 8007a98:	e7e9      	b.n	8007a6e <__lo0bits+0x2a>
 8007a9a:	2000      	movs	r0, #0
 8007a9c:	4770      	bx	lr
 8007a9e:	2020      	movs	r0, #32
 8007aa0:	4770      	bx	lr

08007aa2 <__i2b>:
 8007aa2:	b510      	push	{r4, lr}
 8007aa4:	460c      	mov	r4, r1
 8007aa6:	2101      	movs	r1, #1
 8007aa8:	f7ff fee9 	bl	800787e <_Balloc>
 8007aac:	2201      	movs	r2, #1
 8007aae:	6144      	str	r4, [r0, #20]
 8007ab0:	6102      	str	r2, [r0, #16]
 8007ab2:	bd10      	pop	{r4, pc}

08007ab4 <__multiply>:
 8007ab4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ab8:	4614      	mov	r4, r2
 8007aba:	690a      	ldr	r2, [r1, #16]
 8007abc:	6923      	ldr	r3, [r4, #16]
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	bfb8      	it	lt
 8007ac2:	460b      	movlt	r3, r1
 8007ac4:	4688      	mov	r8, r1
 8007ac6:	bfbc      	itt	lt
 8007ac8:	46a0      	movlt	r8, r4
 8007aca:	461c      	movlt	r4, r3
 8007acc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007ad0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007ad4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007ad8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007adc:	eb07 0609 	add.w	r6, r7, r9
 8007ae0:	42b3      	cmp	r3, r6
 8007ae2:	bfb8      	it	lt
 8007ae4:	3101      	addlt	r1, #1
 8007ae6:	f7ff feca 	bl	800787e <_Balloc>
 8007aea:	f100 0514 	add.w	r5, r0, #20
 8007aee:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007af2:	462b      	mov	r3, r5
 8007af4:	2200      	movs	r2, #0
 8007af6:	4573      	cmp	r3, lr
 8007af8:	d316      	bcc.n	8007b28 <__multiply+0x74>
 8007afa:	f104 0214 	add.w	r2, r4, #20
 8007afe:	f108 0114 	add.w	r1, r8, #20
 8007b02:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007b06:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007b0a:	9300      	str	r3, [sp, #0]
 8007b0c:	9b00      	ldr	r3, [sp, #0]
 8007b0e:	9201      	str	r2, [sp, #4]
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d80c      	bhi.n	8007b2e <__multiply+0x7a>
 8007b14:	2e00      	cmp	r6, #0
 8007b16:	dd03      	ble.n	8007b20 <__multiply+0x6c>
 8007b18:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d05d      	beq.n	8007bdc <__multiply+0x128>
 8007b20:	6106      	str	r6, [r0, #16]
 8007b22:	b003      	add	sp, #12
 8007b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b28:	f843 2b04 	str.w	r2, [r3], #4
 8007b2c:	e7e3      	b.n	8007af6 <__multiply+0x42>
 8007b2e:	f8b2 b000 	ldrh.w	fp, [r2]
 8007b32:	f1bb 0f00 	cmp.w	fp, #0
 8007b36:	d023      	beq.n	8007b80 <__multiply+0xcc>
 8007b38:	4689      	mov	r9, r1
 8007b3a:	46ac      	mov	ip, r5
 8007b3c:	f04f 0800 	mov.w	r8, #0
 8007b40:	f859 4b04 	ldr.w	r4, [r9], #4
 8007b44:	f8dc a000 	ldr.w	sl, [ip]
 8007b48:	b2a3      	uxth	r3, r4
 8007b4a:	fa1f fa8a 	uxth.w	sl, sl
 8007b4e:	fb0b a303 	mla	r3, fp, r3, sl
 8007b52:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007b56:	f8dc 4000 	ldr.w	r4, [ip]
 8007b5a:	4443      	add	r3, r8
 8007b5c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007b60:	fb0b 840a 	mla	r4, fp, sl, r8
 8007b64:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007b68:	46e2      	mov	sl, ip
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007b70:	454f      	cmp	r7, r9
 8007b72:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007b76:	f84a 3b04 	str.w	r3, [sl], #4
 8007b7a:	d82b      	bhi.n	8007bd4 <__multiply+0x120>
 8007b7c:	f8cc 8004 	str.w	r8, [ip, #4]
 8007b80:	9b01      	ldr	r3, [sp, #4]
 8007b82:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007b86:	3204      	adds	r2, #4
 8007b88:	f1ba 0f00 	cmp.w	sl, #0
 8007b8c:	d020      	beq.n	8007bd0 <__multiply+0x11c>
 8007b8e:	682b      	ldr	r3, [r5, #0]
 8007b90:	4689      	mov	r9, r1
 8007b92:	46a8      	mov	r8, r5
 8007b94:	f04f 0b00 	mov.w	fp, #0
 8007b98:	f8b9 c000 	ldrh.w	ip, [r9]
 8007b9c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007ba0:	fb0a 440c 	mla	r4, sl, ip, r4
 8007ba4:	445c      	add	r4, fp
 8007ba6:	46c4      	mov	ip, r8
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007bae:	f84c 3b04 	str.w	r3, [ip], #4
 8007bb2:	f859 3b04 	ldr.w	r3, [r9], #4
 8007bb6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007bba:	0c1b      	lsrs	r3, r3, #16
 8007bbc:	fb0a b303 	mla	r3, sl, r3, fp
 8007bc0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007bc4:	454f      	cmp	r7, r9
 8007bc6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007bca:	d805      	bhi.n	8007bd8 <__multiply+0x124>
 8007bcc:	f8c8 3004 	str.w	r3, [r8, #4]
 8007bd0:	3504      	adds	r5, #4
 8007bd2:	e79b      	b.n	8007b0c <__multiply+0x58>
 8007bd4:	46d4      	mov	ip, sl
 8007bd6:	e7b3      	b.n	8007b40 <__multiply+0x8c>
 8007bd8:	46e0      	mov	r8, ip
 8007bda:	e7dd      	b.n	8007b98 <__multiply+0xe4>
 8007bdc:	3e01      	subs	r6, #1
 8007bde:	e799      	b.n	8007b14 <__multiply+0x60>

08007be0 <__pow5mult>:
 8007be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007be4:	4615      	mov	r5, r2
 8007be6:	f012 0203 	ands.w	r2, r2, #3
 8007bea:	4606      	mov	r6, r0
 8007bec:	460f      	mov	r7, r1
 8007bee:	d007      	beq.n	8007c00 <__pow5mult+0x20>
 8007bf0:	3a01      	subs	r2, #1
 8007bf2:	4c21      	ldr	r4, [pc, #132]	; (8007c78 <__pow5mult+0x98>)
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007bfa:	f7ff fe8b 	bl	8007914 <__multadd>
 8007bfe:	4607      	mov	r7, r0
 8007c00:	10ad      	asrs	r5, r5, #2
 8007c02:	d035      	beq.n	8007c70 <__pow5mult+0x90>
 8007c04:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007c06:	b93c      	cbnz	r4, 8007c18 <__pow5mult+0x38>
 8007c08:	2010      	movs	r0, #16
 8007c0a:	f7ff fe13 	bl	8007834 <malloc>
 8007c0e:	6270      	str	r0, [r6, #36]	; 0x24
 8007c10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007c14:	6004      	str	r4, [r0, #0]
 8007c16:	60c4      	str	r4, [r0, #12]
 8007c18:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007c1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007c20:	b94c      	cbnz	r4, 8007c36 <__pow5mult+0x56>
 8007c22:	f240 2171 	movw	r1, #625	; 0x271
 8007c26:	4630      	mov	r0, r6
 8007c28:	f7ff ff3b 	bl	8007aa2 <__i2b>
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007c32:	4604      	mov	r4, r0
 8007c34:	6003      	str	r3, [r0, #0]
 8007c36:	f04f 0800 	mov.w	r8, #0
 8007c3a:	07eb      	lsls	r3, r5, #31
 8007c3c:	d50a      	bpl.n	8007c54 <__pow5mult+0x74>
 8007c3e:	4639      	mov	r1, r7
 8007c40:	4622      	mov	r2, r4
 8007c42:	4630      	mov	r0, r6
 8007c44:	f7ff ff36 	bl	8007ab4 <__multiply>
 8007c48:	4639      	mov	r1, r7
 8007c4a:	4681      	mov	r9, r0
 8007c4c:	4630      	mov	r0, r6
 8007c4e:	f7ff fe4a 	bl	80078e6 <_Bfree>
 8007c52:	464f      	mov	r7, r9
 8007c54:	106d      	asrs	r5, r5, #1
 8007c56:	d00b      	beq.n	8007c70 <__pow5mult+0x90>
 8007c58:	6820      	ldr	r0, [r4, #0]
 8007c5a:	b938      	cbnz	r0, 8007c6c <__pow5mult+0x8c>
 8007c5c:	4622      	mov	r2, r4
 8007c5e:	4621      	mov	r1, r4
 8007c60:	4630      	mov	r0, r6
 8007c62:	f7ff ff27 	bl	8007ab4 <__multiply>
 8007c66:	6020      	str	r0, [r4, #0]
 8007c68:	f8c0 8000 	str.w	r8, [r0]
 8007c6c:	4604      	mov	r4, r0
 8007c6e:	e7e4      	b.n	8007c3a <__pow5mult+0x5a>
 8007c70:	4638      	mov	r0, r7
 8007c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c76:	bf00      	nop
 8007c78:	08009d30 	.word	0x08009d30

08007c7c <__lshift>:
 8007c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c80:	460c      	mov	r4, r1
 8007c82:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007c86:	6923      	ldr	r3, [r4, #16]
 8007c88:	6849      	ldr	r1, [r1, #4]
 8007c8a:	eb0a 0903 	add.w	r9, sl, r3
 8007c8e:	68a3      	ldr	r3, [r4, #8]
 8007c90:	4607      	mov	r7, r0
 8007c92:	4616      	mov	r6, r2
 8007c94:	f109 0501 	add.w	r5, r9, #1
 8007c98:	42ab      	cmp	r3, r5
 8007c9a:	db32      	blt.n	8007d02 <__lshift+0x86>
 8007c9c:	4638      	mov	r0, r7
 8007c9e:	f7ff fdee 	bl	800787e <_Balloc>
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	4680      	mov	r8, r0
 8007ca6:	f100 0114 	add.w	r1, r0, #20
 8007caa:	461a      	mov	r2, r3
 8007cac:	4553      	cmp	r3, sl
 8007cae:	db2b      	blt.n	8007d08 <__lshift+0x8c>
 8007cb0:	6920      	ldr	r0, [r4, #16]
 8007cb2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007cb6:	f104 0314 	add.w	r3, r4, #20
 8007cba:	f016 021f 	ands.w	r2, r6, #31
 8007cbe:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007cc2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007cc6:	d025      	beq.n	8007d14 <__lshift+0x98>
 8007cc8:	f1c2 0e20 	rsb	lr, r2, #32
 8007ccc:	2000      	movs	r0, #0
 8007cce:	681e      	ldr	r6, [r3, #0]
 8007cd0:	468a      	mov	sl, r1
 8007cd2:	4096      	lsls	r6, r2
 8007cd4:	4330      	orrs	r0, r6
 8007cd6:	f84a 0b04 	str.w	r0, [sl], #4
 8007cda:	f853 0b04 	ldr.w	r0, [r3], #4
 8007cde:	459c      	cmp	ip, r3
 8007ce0:	fa20 f00e 	lsr.w	r0, r0, lr
 8007ce4:	d814      	bhi.n	8007d10 <__lshift+0x94>
 8007ce6:	6048      	str	r0, [r1, #4]
 8007ce8:	b108      	cbz	r0, 8007cee <__lshift+0x72>
 8007cea:	f109 0502 	add.w	r5, r9, #2
 8007cee:	3d01      	subs	r5, #1
 8007cf0:	4638      	mov	r0, r7
 8007cf2:	f8c8 5010 	str.w	r5, [r8, #16]
 8007cf6:	4621      	mov	r1, r4
 8007cf8:	f7ff fdf5 	bl	80078e6 <_Bfree>
 8007cfc:	4640      	mov	r0, r8
 8007cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d02:	3101      	adds	r1, #1
 8007d04:	005b      	lsls	r3, r3, #1
 8007d06:	e7c7      	b.n	8007c98 <__lshift+0x1c>
 8007d08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	e7cd      	b.n	8007cac <__lshift+0x30>
 8007d10:	4651      	mov	r1, sl
 8007d12:	e7dc      	b.n	8007cce <__lshift+0x52>
 8007d14:	3904      	subs	r1, #4
 8007d16:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d1a:	f841 2f04 	str.w	r2, [r1, #4]!
 8007d1e:	459c      	cmp	ip, r3
 8007d20:	d8f9      	bhi.n	8007d16 <__lshift+0x9a>
 8007d22:	e7e4      	b.n	8007cee <__lshift+0x72>

08007d24 <__mcmp>:
 8007d24:	6903      	ldr	r3, [r0, #16]
 8007d26:	690a      	ldr	r2, [r1, #16]
 8007d28:	1a9b      	subs	r3, r3, r2
 8007d2a:	b530      	push	{r4, r5, lr}
 8007d2c:	d10c      	bne.n	8007d48 <__mcmp+0x24>
 8007d2e:	0092      	lsls	r2, r2, #2
 8007d30:	3014      	adds	r0, #20
 8007d32:	3114      	adds	r1, #20
 8007d34:	1884      	adds	r4, r0, r2
 8007d36:	4411      	add	r1, r2
 8007d38:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007d3c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007d40:	4295      	cmp	r5, r2
 8007d42:	d003      	beq.n	8007d4c <__mcmp+0x28>
 8007d44:	d305      	bcc.n	8007d52 <__mcmp+0x2e>
 8007d46:	2301      	movs	r3, #1
 8007d48:	4618      	mov	r0, r3
 8007d4a:	bd30      	pop	{r4, r5, pc}
 8007d4c:	42a0      	cmp	r0, r4
 8007d4e:	d3f3      	bcc.n	8007d38 <__mcmp+0x14>
 8007d50:	e7fa      	b.n	8007d48 <__mcmp+0x24>
 8007d52:	f04f 33ff 	mov.w	r3, #4294967295
 8007d56:	e7f7      	b.n	8007d48 <__mcmp+0x24>

08007d58 <__mdiff>:
 8007d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d5c:	460d      	mov	r5, r1
 8007d5e:	4607      	mov	r7, r0
 8007d60:	4611      	mov	r1, r2
 8007d62:	4628      	mov	r0, r5
 8007d64:	4614      	mov	r4, r2
 8007d66:	f7ff ffdd 	bl	8007d24 <__mcmp>
 8007d6a:	1e06      	subs	r6, r0, #0
 8007d6c:	d108      	bne.n	8007d80 <__mdiff+0x28>
 8007d6e:	4631      	mov	r1, r6
 8007d70:	4638      	mov	r0, r7
 8007d72:	f7ff fd84 	bl	800787e <_Balloc>
 8007d76:	2301      	movs	r3, #1
 8007d78:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d80:	bfa4      	itt	ge
 8007d82:	4623      	movge	r3, r4
 8007d84:	462c      	movge	r4, r5
 8007d86:	4638      	mov	r0, r7
 8007d88:	6861      	ldr	r1, [r4, #4]
 8007d8a:	bfa6      	itte	ge
 8007d8c:	461d      	movge	r5, r3
 8007d8e:	2600      	movge	r6, #0
 8007d90:	2601      	movlt	r6, #1
 8007d92:	f7ff fd74 	bl	800787e <_Balloc>
 8007d96:	692b      	ldr	r3, [r5, #16]
 8007d98:	60c6      	str	r6, [r0, #12]
 8007d9a:	6926      	ldr	r6, [r4, #16]
 8007d9c:	f105 0914 	add.w	r9, r5, #20
 8007da0:	f104 0214 	add.w	r2, r4, #20
 8007da4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007da8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007dac:	f100 0514 	add.w	r5, r0, #20
 8007db0:	f04f 0e00 	mov.w	lr, #0
 8007db4:	f852 ab04 	ldr.w	sl, [r2], #4
 8007db8:	f859 4b04 	ldr.w	r4, [r9], #4
 8007dbc:	fa1e f18a 	uxtah	r1, lr, sl
 8007dc0:	b2a3      	uxth	r3, r4
 8007dc2:	1ac9      	subs	r1, r1, r3
 8007dc4:	0c23      	lsrs	r3, r4, #16
 8007dc6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8007dca:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007dce:	b289      	uxth	r1, r1
 8007dd0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007dd4:	45c8      	cmp	r8, r9
 8007dd6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007dda:	4694      	mov	ip, r2
 8007ddc:	f845 3b04 	str.w	r3, [r5], #4
 8007de0:	d8e8      	bhi.n	8007db4 <__mdiff+0x5c>
 8007de2:	45bc      	cmp	ip, r7
 8007de4:	d304      	bcc.n	8007df0 <__mdiff+0x98>
 8007de6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007dea:	b183      	cbz	r3, 8007e0e <__mdiff+0xb6>
 8007dec:	6106      	str	r6, [r0, #16]
 8007dee:	e7c5      	b.n	8007d7c <__mdiff+0x24>
 8007df0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007df4:	fa1e f381 	uxtah	r3, lr, r1
 8007df8:	141a      	asrs	r2, r3, #16
 8007dfa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e04:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8007e08:	f845 3b04 	str.w	r3, [r5], #4
 8007e0c:	e7e9      	b.n	8007de2 <__mdiff+0x8a>
 8007e0e:	3e01      	subs	r6, #1
 8007e10:	e7e9      	b.n	8007de6 <__mdiff+0x8e>
	...

08007e14 <__ulp>:
 8007e14:	4b12      	ldr	r3, [pc, #72]	; (8007e60 <__ulp+0x4c>)
 8007e16:	ee10 2a90 	vmov	r2, s1
 8007e1a:	401a      	ands	r2, r3
 8007e1c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	dd04      	ble.n	8007e2e <__ulp+0x1a>
 8007e24:	2000      	movs	r0, #0
 8007e26:	4619      	mov	r1, r3
 8007e28:	ec41 0b10 	vmov	d0, r0, r1
 8007e2c:	4770      	bx	lr
 8007e2e:	425b      	negs	r3, r3
 8007e30:	151b      	asrs	r3, r3, #20
 8007e32:	2b13      	cmp	r3, #19
 8007e34:	f04f 0000 	mov.w	r0, #0
 8007e38:	f04f 0100 	mov.w	r1, #0
 8007e3c:	dc04      	bgt.n	8007e48 <__ulp+0x34>
 8007e3e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007e42:	fa42 f103 	asr.w	r1, r2, r3
 8007e46:	e7ef      	b.n	8007e28 <__ulp+0x14>
 8007e48:	3b14      	subs	r3, #20
 8007e4a:	2b1e      	cmp	r3, #30
 8007e4c:	f04f 0201 	mov.w	r2, #1
 8007e50:	bfda      	itte	le
 8007e52:	f1c3 031f 	rsble	r3, r3, #31
 8007e56:	fa02 f303 	lslle.w	r3, r2, r3
 8007e5a:	4613      	movgt	r3, r2
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	e7e3      	b.n	8007e28 <__ulp+0x14>
 8007e60:	7ff00000 	.word	0x7ff00000

08007e64 <__b2d>:
 8007e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e66:	6905      	ldr	r5, [r0, #16]
 8007e68:	f100 0714 	add.w	r7, r0, #20
 8007e6c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007e70:	1f2e      	subs	r6, r5, #4
 8007e72:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007e76:	4620      	mov	r0, r4
 8007e78:	f7ff fdc5 	bl	8007a06 <__hi0bits>
 8007e7c:	f1c0 0320 	rsb	r3, r0, #32
 8007e80:	280a      	cmp	r0, #10
 8007e82:	600b      	str	r3, [r1, #0]
 8007e84:	f8df c074 	ldr.w	ip, [pc, #116]	; 8007efc <__b2d+0x98>
 8007e88:	dc14      	bgt.n	8007eb4 <__b2d+0x50>
 8007e8a:	f1c0 0e0b 	rsb	lr, r0, #11
 8007e8e:	fa24 f10e 	lsr.w	r1, r4, lr
 8007e92:	42b7      	cmp	r7, r6
 8007e94:	ea41 030c 	orr.w	r3, r1, ip
 8007e98:	bf34      	ite	cc
 8007e9a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007e9e:	2100      	movcs	r1, #0
 8007ea0:	3015      	adds	r0, #21
 8007ea2:	fa04 f000 	lsl.w	r0, r4, r0
 8007ea6:	fa21 f10e 	lsr.w	r1, r1, lr
 8007eaa:	ea40 0201 	orr.w	r2, r0, r1
 8007eae:	ec43 2b10 	vmov	d0, r2, r3
 8007eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007eb4:	42b7      	cmp	r7, r6
 8007eb6:	bf3a      	itte	cc
 8007eb8:	f1a5 0608 	subcc.w	r6, r5, #8
 8007ebc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007ec0:	2100      	movcs	r1, #0
 8007ec2:	380b      	subs	r0, #11
 8007ec4:	d015      	beq.n	8007ef2 <__b2d+0x8e>
 8007ec6:	4084      	lsls	r4, r0
 8007ec8:	f1c0 0520 	rsb	r5, r0, #32
 8007ecc:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8007ed0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8007ed4:	42be      	cmp	r6, r7
 8007ed6:	fa21 fc05 	lsr.w	ip, r1, r5
 8007eda:	ea44 030c 	orr.w	r3, r4, ip
 8007ede:	bf8c      	ite	hi
 8007ee0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007ee4:	2400      	movls	r4, #0
 8007ee6:	fa01 f000 	lsl.w	r0, r1, r0
 8007eea:	40ec      	lsrs	r4, r5
 8007eec:	ea40 0204 	orr.w	r2, r0, r4
 8007ef0:	e7dd      	b.n	8007eae <__b2d+0x4a>
 8007ef2:	ea44 030c 	orr.w	r3, r4, ip
 8007ef6:	460a      	mov	r2, r1
 8007ef8:	e7d9      	b.n	8007eae <__b2d+0x4a>
 8007efa:	bf00      	nop
 8007efc:	3ff00000 	.word	0x3ff00000

08007f00 <__d2b>:
 8007f00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007f04:	460e      	mov	r6, r1
 8007f06:	2101      	movs	r1, #1
 8007f08:	ec59 8b10 	vmov	r8, r9, d0
 8007f0c:	4615      	mov	r5, r2
 8007f0e:	f7ff fcb6 	bl	800787e <_Balloc>
 8007f12:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007f16:	4607      	mov	r7, r0
 8007f18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007f1c:	bb34      	cbnz	r4, 8007f6c <__d2b+0x6c>
 8007f1e:	9301      	str	r3, [sp, #4]
 8007f20:	f1b8 0300 	subs.w	r3, r8, #0
 8007f24:	d027      	beq.n	8007f76 <__d2b+0x76>
 8007f26:	a802      	add	r0, sp, #8
 8007f28:	f840 3d08 	str.w	r3, [r0, #-8]!
 8007f2c:	f7ff fd8a 	bl	8007a44 <__lo0bits>
 8007f30:	9900      	ldr	r1, [sp, #0]
 8007f32:	b1f0      	cbz	r0, 8007f72 <__d2b+0x72>
 8007f34:	9a01      	ldr	r2, [sp, #4]
 8007f36:	f1c0 0320 	rsb	r3, r0, #32
 8007f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f3e:	430b      	orrs	r3, r1
 8007f40:	40c2      	lsrs	r2, r0
 8007f42:	617b      	str	r3, [r7, #20]
 8007f44:	9201      	str	r2, [sp, #4]
 8007f46:	9b01      	ldr	r3, [sp, #4]
 8007f48:	61bb      	str	r3, [r7, #24]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	bf14      	ite	ne
 8007f4e:	2102      	movne	r1, #2
 8007f50:	2101      	moveq	r1, #1
 8007f52:	6139      	str	r1, [r7, #16]
 8007f54:	b1c4      	cbz	r4, 8007f88 <__d2b+0x88>
 8007f56:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007f5a:	4404      	add	r4, r0
 8007f5c:	6034      	str	r4, [r6, #0]
 8007f5e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007f62:	6028      	str	r0, [r5, #0]
 8007f64:	4638      	mov	r0, r7
 8007f66:	b003      	add	sp, #12
 8007f68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f70:	e7d5      	b.n	8007f1e <__d2b+0x1e>
 8007f72:	6179      	str	r1, [r7, #20]
 8007f74:	e7e7      	b.n	8007f46 <__d2b+0x46>
 8007f76:	a801      	add	r0, sp, #4
 8007f78:	f7ff fd64 	bl	8007a44 <__lo0bits>
 8007f7c:	9b01      	ldr	r3, [sp, #4]
 8007f7e:	617b      	str	r3, [r7, #20]
 8007f80:	2101      	movs	r1, #1
 8007f82:	6139      	str	r1, [r7, #16]
 8007f84:	3020      	adds	r0, #32
 8007f86:	e7e5      	b.n	8007f54 <__d2b+0x54>
 8007f88:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007f8c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007f90:	6030      	str	r0, [r6, #0]
 8007f92:	6918      	ldr	r0, [r3, #16]
 8007f94:	f7ff fd37 	bl	8007a06 <__hi0bits>
 8007f98:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007f9c:	e7e1      	b.n	8007f62 <__d2b+0x62>

08007f9e <__ratio>:
 8007f9e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fa2:	4688      	mov	r8, r1
 8007fa4:	4669      	mov	r1, sp
 8007fa6:	4681      	mov	r9, r0
 8007fa8:	f7ff ff5c 	bl	8007e64 <__b2d>
 8007fac:	a901      	add	r1, sp, #4
 8007fae:	4640      	mov	r0, r8
 8007fb0:	ec57 6b10 	vmov	r6, r7, d0
 8007fb4:	f7ff ff56 	bl	8007e64 <__b2d>
 8007fb8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007fbc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007fc0:	eba3 0c02 	sub.w	ip, r3, r2
 8007fc4:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007fc8:	1a9b      	subs	r3, r3, r2
 8007fca:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007fce:	ec5b ab10 	vmov	sl, fp, d0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	bfce      	itee	gt
 8007fd6:	463a      	movgt	r2, r7
 8007fd8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007fdc:	465a      	movle	r2, fp
 8007fde:	4659      	mov	r1, fp
 8007fe0:	463d      	mov	r5, r7
 8007fe2:	bfd4      	ite	le
 8007fe4:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8007fe8:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8007fec:	4630      	mov	r0, r6
 8007fee:	ee10 2a10 	vmov	r2, s0
 8007ff2:	460b      	mov	r3, r1
 8007ff4:	4629      	mov	r1, r5
 8007ff6:	f7f8 fc29 	bl	800084c <__aeabi_ddiv>
 8007ffa:	ec41 0b10 	vmov	d0, r0, r1
 8007ffe:	b003      	add	sp, #12
 8008000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008004 <__copybits>:
 8008004:	3901      	subs	r1, #1
 8008006:	b510      	push	{r4, lr}
 8008008:	1149      	asrs	r1, r1, #5
 800800a:	6914      	ldr	r4, [r2, #16]
 800800c:	3101      	adds	r1, #1
 800800e:	f102 0314 	add.w	r3, r2, #20
 8008012:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008016:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800801a:	42a3      	cmp	r3, r4
 800801c:	4602      	mov	r2, r0
 800801e:	d303      	bcc.n	8008028 <__copybits+0x24>
 8008020:	2300      	movs	r3, #0
 8008022:	428a      	cmp	r2, r1
 8008024:	d305      	bcc.n	8008032 <__copybits+0x2e>
 8008026:	bd10      	pop	{r4, pc}
 8008028:	f853 2b04 	ldr.w	r2, [r3], #4
 800802c:	f840 2b04 	str.w	r2, [r0], #4
 8008030:	e7f3      	b.n	800801a <__copybits+0x16>
 8008032:	f842 3b04 	str.w	r3, [r2], #4
 8008036:	e7f4      	b.n	8008022 <__copybits+0x1e>

08008038 <__any_on>:
 8008038:	f100 0214 	add.w	r2, r0, #20
 800803c:	6900      	ldr	r0, [r0, #16]
 800803e:	114b      	asrs	r3, r1, #5
 8008040:	4298      	cmp	r0, r3
 8008042:	b510      	push	{r4, lr}
 8008044:	db11      	blt.n	800806a <__any_on+0x32>
 8008046:	dd0a      	ble.n	800805e <__any_on+0x26>
 8008048:	f011 011f 	ands.w	r1, r1, #31
 800804c:	d007      	beq.n	800805e <__any_on+0x26>
 800804e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008052:	fa24 f001 	lsr.w	r0, r4, r1
 8008056:	fa00 f101 	lsl.w	r1, r0, r1
 800805a:	428c      	cmp	r4, r1
 800805c:	d10b      	bne.n	8008076 <__any_on+0x3e>
 800805e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008062:	4293      	cmp	r3, r2
 8008064:	d803      	bhi.n	800806e <__any_on+0x36>
 8008066:	2000      	movs	r0, #0
 8008068:	bd10      	pop	{r4, pc}
 800806a:	4603      	mov	r3, r0
 800806c:	e7f7      	b.n	800805e <__any_on+0x26>
 800806e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008072:	2900      	cmp	r1, #0
 8008074:	d0f5      	beq.n	8008062 <__any_on+0x2a>
 8008076:	2001      	movs	r0, #1
 8008078:	e7f6      	b.n	8008068 <__any_on+0x30>

0800807a <_calloc_r>:
 800807a:	b538      	push	{r3, r4, r5, lr}
 800807c:	fb02 f401 	mul.w	r4, r2, r1
 8008080:	4621      	mov	r1, r4
 8008082:	f000 f857 	bl	8008134 <_malloc_r>
 8008086:	4605      	mov	r5, r0
 8008088:	b118      	cbz	r0, 8008092 <_calloc_r+0x18>
 800808a:	4622      	mov	r2, r4
 800808c:	2100      	movs	r1, #0
 800808e:	f7fc fd03 	bl	8004a98 <memset>
 8008092:	4628      	mov	r0, r5
 8008094:	bd38      	pop	{r3, r4, r5, pc}
	...

08008098 <_free_r>:
 8008098:	b538      	push	{r3, r4, r5, lr}
 800809a:	4605      	mov	r5, r0
 800809c:	2900      	cmp	r1, #0
 800809e:	d045      	beq.n	800812c <_free_r+0x94>
 80080a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080a4:	1f0c      	subs	r4, r1, #4
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	bfb8      	it	lt
 80080aa:	18e4      	addlt	r4, r4, r3
 80080ac:	f000 fa36 	bl	800851c <__malloc_lock>
 80080b0:	4a1f      	ldr	r2, [pc, #124]	; (8008130 <_free_r+0x98>)
 80080b2:	6813      	ldr	r3, [r2, #0]
 80080b4:	4610      	mov	r0, r2
 80080b6:	b933      	cbnz	r3, 80080c6 <_free_r+0x2e>
 80080b8:	6063      	str	r3, [r4, #4]
 80080ba:	6014      	str	r4, [r2, #0]
 80080bc:	4628      	mov	r0, r5
 80080be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080c2:	f000 ba2c 	b.w	800851e <__malloc_unlock>
 80080c6:	42a3      	cmp	r3, r4
 80080c8:	d90c      	bls.n	80080e4 <_free_r+0x4c>
 80080ca:	6821      	ldr	r1, [r4, #0]
 80080cc:	1862      	adds	r2, r4, r1
 80080ce:	4293      	cmp	r3, r2
 80080d0:	bf04      	itt	eq
 80080d2:	681a      	ldreq	r2, [r3, #0]
 80080d4:	685b      	ldreq	r3, [r3, #4]
 80080d6:	6063      	str	r3, [r4, #4]
 80080d8:	bf04      	itt	eq
 80080da:	1852      	addeq	r2, r2, r1
 80080dc:	6022      	streq	r2, [r4, #0]
 80080de:	6004      	str	r4, [r0, #0]
 80080e0:	e7ec      	b.n	80080bc <_free_r+0x24>
 80080e2:	4613      	mov	r3, r2
 80080e4:	685a      	ldr	r2, [r3, #4]
 80080e6:	b10a      	cbz	r2, 80080ec <_free_r+0x54>
 80080e8:	42a2      	cmp	r2, r4
 80080ea:	d9fa      	bls.n	80080e2 <_free_r+0x4a>
 80080ec:	6819      	ldr	r1, [r3, #0]
 80080ee:	1858      	adds	r0, r3, r1
 80080f0:	42a0      	cmp	r0, r4
 80080f2:	d10b      	bne.n	800810c <_free_r+0x74>
 80080f4:	6820      	ldr	r0, [r4, #0]
 80080f6:	4401      	add	r1, r0
 80080f8:	1858      	adds	r0, r3, r1
 80080fa:	4282      	cmp	r2, r0
 80080fc:	6019      	str	r1, [r3, #0]
 80080fe:	d1dd      	bne.n	80080bc <_free_r+0x24>
 8008100:	6810      	ldr	r0, [r2, #0]
 8008102:	6852      	ldr	r2, [r2, #4]
 8008104:	605a      	str	r2, [r3, #4]
 8008106:	4401      	add	r1, r0
 8008108:	6019      	str	r1, [r3, #0]
 800810a:	e7d7      	b.n	80080bc <_free_r+0x24>
 800810c:	d902      	bls.n	8008114 <_free_r+0x7c>
 800810e:	230c      	movs	r3, #12
 8008110:	602b      	str	r3, [r5, #0]
 8008112:	e7d3      	b.n	80080bc <_free_r+0x24>
 8008114:	6820      	ldr	r0, [r4, #0]
 8008116:	1821      	adds	r1, r4, r0
 8008118:	428a      	cmp	r2, r1
 800811a:	bf04      	itt	eq
 800811c:	6811      	ldreq	r1, [r2, #0]
 800811e:	6852      	ldreq	r2, [r2, #4]
 8008120:	6062      	str	r2, [r4, #4]
 8008122:	bf04      	itt	eq
 8008124:	1809      	addeq	r1, r1, r0
 8008126:	6021      	streq	r1, [r4, #0]
 8008128:	605c      	str	r4, [r3, #4]
 800812a:	e7c7      	b.n	80080bc <_free_r+0x24>
 800812c:	bd38      	pop	{r3, r4, r5, pc}
 800812e:	bf00      	nop
 8008130:	20000220 	.word	0x20000220

08008134 <_malloc_r>:
 8008134:	b570      	push	{r4, r5, r6, lr}
 8008136:	1ccd      	adds	r5, r1, #3
 8008138:	f025 0503 	bic.w	r5, r5, #3
 800813c:	3508      	adds	r5, #8
 800813e:	2d0c      	cmp	r5, #12
 8008140:	bf38      	it	cc
 8008142:	250c      	movcc	r5, #12
 8008144:	2d00      	cmp	r5, #0
 8008146:	4606      	mov	r6, r0
 8008148:	db01      	blt.n	800814e <_malloc_r+0x1a>
 800814a:	42a9      	cmp	r1, r5
 800814c:	d903      	bls.n	8008156 <_malloc_r+0x22>
 800814e:	230c      	movs	r3, #12
 8008150:	6033      	str	r3, [r6, #0]
 8008152:	2000      	movs	r0, #0
 8008154:	bd70      	pop	{r4, r5, r6, pc}
 8008156:	f000 f9e1 	bl	800851c <__malloc_lock>
 800815a:	4a21      	ldr	r2, [pc, #132]	; (80081e0 <_malloc_r+0xac>)
 800815c:	6814      	ldr	r4, [r2, #0]
 800815e:	4621      	mov	r1, r4
 8008160:	b991      	cbnz	r1, 8008188 <_malloc_r+0x54>
 8008162:	4c20      	ldr	r4, [pc, #128]	; (80081e4 <_malloc_r+0xb0>)
 8008164:	6823      	ldr	r3, [r4, #0]
 8008166:	b91b      	cbnz	r3, 8008170 <_malloc_r+0x3c>
 8008168:	4630      	mov	r0, r6
 800816a:	f000 f98f 	bl	800848c <_sbrk_r>
 800816e:	6020      	str	r0, [r4, #0]
 8008170:	4629      	mov	r1, r5
 8008172:	4630      	mov	r0, r6
 8008174:	f000 f98a 	bl	800848c <_sbrk_r>
 8008178:	1c43      	adds	r3, r0, #1
 800817a:	d124      	bne.n	80081c6 <_malloc_r+0x92>
 800817c:	230c      	movs	r3, #12
 800817e:	6033      	str	r3, [r6, #0]
 8008180:	4630      	mov	r0, r6
 8008182:	f000 f9cc 	bl	800851e <__malloc_unlock>
 8008186:	e7e4      	b.n	8008152 <_malloc_r+0x1e>
 8008188:	680b      	ldr	r3, [r1, #0]
 800818a:	1b5b      	subs	r3, r3, r5
 800818c:	d418      	bmi.n	80081c0 <_malloc_r+0x8c>
 800818e:	2b0b      	cmp	r3, #11
 8008190:	d90f      	bls.n	80081b2 <_malloc_r+0x7e>
 8008192:	600b      	str	r3, [r1, #0]
 8008194:	50cd      	str	r5, [r1, r3]
 8008196:	18cc      	adds	r4, r1, r3
 8008198:	4630      	mov	r0, r6
 800819a:	f000 f9c0 	bl	800851e <__malloc_unlock>
 800819e:	f104 000b 	add.w	r0, r4, #11
 80081a2:	1d23      	adds	r3, r4, #4
 80081a4:	f020 0007 	bic.w	r0, r0, #7
 80081a8:	1ac3      	subs	r3, r0, r3
 80081aa:	d0d3      	beq.n	8008154 <_malloc_r+0x20>
 80081ac:	425a      	negs	r2, r3
 80081ae:	50e2      	str	r2, [r4, r3]
 80081b0:	e7d0      	b.n	8008154 <_malloc_r+0x20>
 80081b2:	428c      	cmp	r4, r1
 80081b4:	684b      	ldr	r3, [r1, #4]
 80081b6:	bf16      	itet	ne
 80081b8:	6063      	strne	r3, [r4, #4]
 80081ba:	6013      	streq	r3, [r2, #0]
 80081bc:	460c      	movne	r4, r1
 80081be:	e7eb      	b.n	8008198 <_malloc_r+0x64>
 80081c0:	460c      	mov	r4, r1
 80081c2:	6849      	ldr	r1, [r1, #4]
 80081c4:	e7cc      	b.n	8008160 <_malloc_r+0x2c>
 80081c6:	1cc4      	adds	r4, r0, #3
 80081c8:	f024 0403 	bic.w	r4, r4, #3
 80081cc:	42a0      	cmp	r0, r4
 80081ce:	d005      	beq.n	80081dc <_malloc_r+0xa8>
 80081d0:	1a21      	subs	r1, r4, r0
 80081d2:	4630      	mov	r0, r6
 80081d4:	f000 f95a 	bl	800848c <_sbrk_r>
 80081d8:	3001      	adds	r0, #1
 80081da:	d0cf      	beq.n	800817c <_malloc_r+0x48>
 80081dc:	6025      	str	r5, [r4, #0]
 80081de:	e7db      	b.n	8008198 <_malloc_r+0x64>
 80081e0:	20000220 	.word	0x20000220
 80081e4:	20000224 	.word	0x20000224

080081e8 <__ssputs_r>:
 80081e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081ec:	688e      	ldr	r6, [r1, #8]
 80081ee:	429e      	cmp	r6, r3
 80081f0:	4682      	mov	sl, r0
 80081f2:	460c      	mov	r4, r1
 80081f4:	4690      	mov	r8, r2
 80081f6:	4699      	mov	r9, r3
 80081f8:	d837      	bhi.n	800826a <__ssputs_r+0x82>
 80081fa:	898a      	ldrh	r2, [r1, #12]
 80081fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008200:	d031      	beq.n	8008266 <__ssputs_r+0x7e>
 8008202:	6825      	ldr	r5, [r4, #0]
 8008204:	6909      	ldr	r1, [r1, #16]
 8008206:	1a6f      	subs	r7, r5, r1
 8008208:	6965      	ldr	r5, [r4, #20]
 800820a:	2302      	movs	r3, #2
 800820c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008210:	fb95 f5f3 	sdiv	r5, r5, r3
 8008214:	f109 0301 	add.w	r3, r9, #1
 8008218:	443b      	add	r3, r7
 800821a:	429d      	cmp	r5, r3
 800821c:	bf38      	it	cc
 800821e:	461d      	movcc	r5, r3
 8008220:	0553      	lsls	r3, r2, #21
 8008222:	d530      	bpl.n	8008286 <__ssputs_r+0x9e>
 8008224:	4629      	mov	r1, r5
 8008226:	f7ff ff85 	bl	8008134 <_malloc_r>
 800822a:	4606      	mov	r6, r0
 800822c:	b950      	cbnz	r0, 8008244 <__ssputs_r+0x5c>
 800822e:	230c      	movs	r3, #12
 8008230:	f8ca 3000 	str.w	r3, [sl]
 8008234:	89a3      	ldrh	r3, [r4, #12]
 8008236:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800823a:	81a3      	strh	r3, [r4, #12]
 800823c:	f04f 30ff 	mov.w	r0, #4294967295
 8008240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008244:	463a      	mov	r2, r7
 8008246:	6921      	ldr	r1, [r4, #16]
 8008248:	f7ff fb0e 	bl	8007868 <memcpy>
 800824c:	89a3      	ldrh	r3, [r4, #12]
 800824e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008256:	81a3      	strh	r3, [r4, #12]
 8008258:	6126      	str	r6, [r4, #16]
 800825a:	6165      	str	r5, [r4, #20]
 800825c:	443e      	add	r6, r7
 800825e:	1bed      	subs	r5, r5, r7
 8008260:	6026      	str	r6, [r4, #0]
 8008262:	60a5      	str	r5, [r4, #8]
 8008264:	464e      	mov	r6, r9
 8008266:	454e      	cmp	r6, r9
 8008268:	d900      	bls.n	800826c <__ssputs_r+0x84>
 800826a:	464e      	mov	r6, r9
 800826c:	4632      	mov	r2, r6
 800826e:	4641      	mov	r1, r8
 8008270:	6820      	ldr	r0, [r4, #0]
 8008272:	f000 f93a 	bl	80084ea <memmove>
 8008276:	68a3      	ldr	r3, [r4, #8]
 8008278:	1b9b      	subs	r3, r3, r6
 800827a:	60a3      	str	r3, [r4, #8]
 800827c:	6823      	ldr	r3, [r4, #0]
 800827e:	441e      	add	r6, r3
 8008280:	6026      	str	r6, [r4, #0]
 8008282:	2000      	movs	r0, #0
 8008284:	e7dc      	b.n	8008240 <__ssputs_r+0x58>
 8008286:	462a      	mov	r2, r5
 8008288:	f000 f94a 	bl	8008520 <_realloc_r>
 800828c:	4606      	mov	r6, r0
 800828e:	2800      	cmp	r0, #0
 8008290:	d1e2      	bne.n	8008258 <__ssputs_r+0x70>
 8008292:	6921      	ldr	r1, [r4, #16]
 8008294:	4650      	mov	r0, sl
 8008296:	f7ff feff 	bl	8008098 <_free_r>
 800829a:	e7c8      	b.n	800822e <__ssputs_r+0x46>

0800829c <_svfiprintf_r>:
 800829c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082a0:	461d      	mov	r5, r3
 80082a2:	898b      	ldrh	r3, [r1, #12]
 80082a4:	061f      	lsls	r7, r3, #24
 80082a6:	b09d      	sub	sp, #116	; 0x74
 80082a8:	4680      	mov	r8, r0
 80082aa:	460c      	mov	r4, r1
 80082ac:	4616      	mov	r6, r2
 80082ae:	d50f      	bpl.n	80082d0 <_svfiprintf_r+0x34>
 80082b0:	690b      	ldr	r3, [r1, #16]
 80082b2:	b96b      	cbnz	r3, 80082d0 <_svfiprintf_r+0x34>
 80082b4:	2140      	movs	r1, #64	; 0x40
 80082b6:	f7ff ff3d 	bl	8008134 <_malloc_r>
 80082ba:	6020      	str	r0, [r4, #0]
 80082bc:	6120      	str	r0, [r4, #16]
 80082be:	b928      	cbnz	r0, 80082cc <_svfiprintf_r+0x30>
 80082c0:	230c      	movs	r3, #12
 80082c2:	f8c8 3000 	str.w	r3, [r8]
 80082c6:	f04f 30ff 	mov.w	r0, #4294967295
 80082ca:	e0c8      	b.n	800845e <_svfiprintf_r+0x1c2>
 80082cc:	2340      	movs	r3, #64	; 0x40
 80082ce:	6163      	str	r3, [r4, #20]
 80082d0:	2300      	movs	r3, #0
 80082d2:	9309      	str	r3, [sp, #36]	; 0x24
 80082d4:	2320      	movs	r3, #32
 80082d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80082da:	2330      	movs	r3, #48	; 0x30
 80082dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80082e0:	9503      	str	r5, [sp, #12]
 80082e2:	f04f 0b01 	mov.w	fp, #1
 80082e6:	4637      	mov	r7, r6
 80082e8:	463d      	mov	r5, r7
 80082ea:	f815 3b01 	ldrb.w	r3, [r5], #1
 80082ee:	b10b      	cbz	r3, 80082f4 <_svfiprintf_r+0x58>
 80082f0:	2b25      	cmp	r3, #37	; 0x25
 80082f2:	d13e      	bne.n	8008372 <_svfiprintf_r+0xd6>
 80082f4:	ebb7 0a06 	subs.w	sl, r7, r6
 80082f8:	d00b      	beq.n	8008312 <_svfiprintf_r+0x76>
 80082fa:	4653      	mov	r3, sl
 80082fc:	4632      	mov	r2, r6
 80082fe:	4621      	mov	r1, r4
 8008300:	4640      	mov	r0, r8
 8008302:	f7ff ff71 	bl	80081e8 <__ssputs_r>
 8008306:	3001      	adds	r0, #1
 8008308:	f000 80a4 	beq.w	8008454 <_svfiprintf_r+0x1b8>
 800830c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800830e:	4453      	add	r3, sl
 8008310:	9309      	str	r3, [sp, #36]	; 0x24
 8008312:	783b      	ldrb	r3, [r7, #0]
 8008314:	2b00      	cmp	r3, #0
 8008316:	f000 809d 	beq.w	8008454 <_svfiprintf_r+0x1b8>
 800831a:	2300      	movs	r3, #0
 800831c:	f04f 32ff 	mov.w	r2, #4294967295
 8008320:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008324:	9304      	str	r3, [sp, #16]
 8008326:	9307      	str	r3, [sp, #28]
 8008328:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800832c:	931a      	str	r3, [sp, #104]	; 0x68
 800832e:	462f      	mov	r7, r5
 8008330:	2205      	movs	r2, #5
 8008332:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008336:	4850      	ldr	r0, [pc, #320]	; (8008478 <_svfiprintf_r+0x1dc>)
 8008338:	f7f7 ff52 	bl	80001e0 <memchr>
 800833c:	9b04      	ldr	r3, [sp, #16]
 800833e:	b9d0      	cbnz	r0, 8008376 <_svfiprintf_r+0xda>
 8008340:	06d9      	lsls	r1, r3, #27
 8008342:	bf44      	itt	mi
 8008344:	2220      	movmi	r2, #32
 8008346:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800834a:	071a      	lsls	r2, r3, #28
 800834c:	bf44      	itt	mi
 800834e:	222b      	movmi	r2, #43	; 0x2b
 8008350:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008354:	782a      	ldrb	r2, [r5, #0]
 8008356:	2a2a      	cmp	r2, #42	; 0x2a
 8008358:	d015      	beq.n	8008386 <_svfiprintf_r+0xea>
 800835a:	9a07      	ldr	r2, [sp, #28]
 800835c:	462f      	mov	r7, r5
 800835e:	2000      	movs	r0, #0
 8008360:	250a      	movs	r5, #10
 8008362:	4639      	mov	r1, r7
 8008364:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008368:	3b30      	subs	r3, #48	; 0x30
 800836a:	2b09      	cmp	r3, #9
 800836c:	d94d      	bls.n	800840a <_svfiprintf_r+0x16e>
 800836e:	b1b8      	cbz	r0, 80083a0 <_svfiprintf_r+0x104>
 8008370:	e00f      	b.n	8008392 <_svfiprintf_r+0xf6>
 8008372:	462f      	mov	r7, r5
 8008374:	e7b8      	b.n	80082e8 <_svfiprintf_r+0x4c>
 8008376:	4a40      	ldr	r2, [pc, #256]	; (8008478 <_svfiprintf_r+0x1dc>)
 8008378:	1a80      	subs	r0, r0, r2
 800837a:	fa0b f000 	lsl.w	r0, fp, r0
 800837e:	4318      	orrs	r0, r3
 8008380:	9004      	str	r0, [sp, #16]
 8008382:	463d      	mov	r5, r7
 8008384:	e7d3      	b.n	800832e <_svfiprintf_r+0x92>
 8008386:	9a03      	ldr	r2, [sp, #12]
 8008388:	1d11      	adds	r1, r2, #4
 800838a:	6812      	ldr	r2, [r2, #0]
 800838c:	9103      	str	r1, [sp, #12]
 800838e:	2a00      	cmp	r2, #0
 8008390:	db01      	blt.n	8008396 <_svfiprintf_r+0xfa>
 8008392:	9207      	str	r2, [sp, #28]
 8008394:	e004      	b.n	80083a0 <_svfiprintf_r+0x104>
 8008396:	4252      	negs	r2, r2
 8008398:	f043 0302 	orr.w	r3, r3, #2
 800839c:	9207      	str	r2, [sp, #28]
 800839e:	9304      	str	r3, [sp, #16]
 80083a0:	783b      	ldrb	r3, [r7, #0]
 80083a2:	2b2e      	cmp	r3, #46	; 0x2e
 80083a4:	d10c      	bne.n	80083c0 <_svfiprintf_r+0x124>
 80083a6:	787b      	ldrb	r3, [r7, #1]
 80083a8:	2b2a      	cmp	r3, #42	; 0x2a
 80083aa:	d133      	bne.n	8008414 <_svfiprintf_r+0x178>
 80083ac:	9b03      	ldr	r3, [sp, #12]
 80083ae:	1d1a      	adds	r2, r3, #4
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	9203      	str	r2, [sp, #12]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	bfb8      	it	lt
 80083b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80083bc:	3702      	adds	r7, #2
 80083be:	9305      	str	r3, [sp, #20]
 80083c0:	4d2e      	ldr	r5, [pc, #184]	; (800847c <_svfiprintf_r+0x1e0>)
 80083c2:	7839      	ldrb	r1, [r7, #0]
 80083c4:	2203      	movs	r2, #3
 80083c6:	4628      	mov	r0, r5
 80083c8:	f7f7 ff0a 	bl	80001e0 <memchr>
 80083cc:	b138      	cbz	r0, 80083de <_svfiprintf_r+0x142>
 80083ce:	2340      	movs	r3, #64	; 0x40
 80083d0:	1b40      	subs	r0, r0, r5
 80083d2:	fa03 f000 	lsl.w	r0, r3, r0
 80083d6:	9b04      	ldr	r3, [sp, #16]
 80083d8:	4303      	orrs	r3, r0
 80083da:	3701      	adds	r7, #1
 80083dc:	9304      	str	r3, [sp, #16]
 80083de:	7839      	ldrb	r1, [r7, #0]
 80083e0:	4827      	ldr	r0, [pc, #156]	; (8008480 <_svfiprintf_r+0x1e4>)
 80083e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80083e6:	2206      	movs	r2, #6
 80083e8:	1c7e      	adds	r6, r7, #1
 80083ea:	f7f7 fef9 	bl	80001e0 <memchr>
 80083ee:	2800      	cmp	r0, #0
 80083f0:	d038      	beq.n	8008464 <_svfiprintf_r+0x1c8>
 80083f2:	4b24      	ldr	r3, [pc, #144]	; (8008484 <_svfiprintf_r+0x1e8>)
 80083f4:	bb13      	cbnz	r3, 800843c <_svfiprintf_r+0x1a0>
 80083f6:	9b03      	ldr	r3, [sp, #12]
 80083f8:	3307      	adds	r3, #7
 80083fa:	f023 0307 	bic.w	r3, r3, #7
 80083fe:	3308      	adds	r3, #8
 8008400:	9303      	str	r3, [sp, #12]
 8008402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008404:	444b      	add	r3, r9
 8008406:	9309      	str	r3, [sp, #36]	; 0x24
 8008408:	e76d      	b.n	80082e6 <_svfiprintf_r+0x4a>
 800840a:	fb05 3202 	mla	r2, r5, r2, r3
 800840e:	2001      	movs	r0, #1
 8008410:	460f      	mov	r7, r1
 8008412:	e7a6      	b.n	8008362 <_svfiprintf_r+0xc6>
 8008414:	2300      	movs	r3, #0
 8008416:	3701      	adds	r7, #1
 8008418:	9305      	str	r3, [sp, #20]
 800841a:	4619      	mov	r1, r3
 800841c:	250a      	movs	r5, #10
 800841e:	4638      	mov	r0, r7
 8008420:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008424:	3a30      	subs	r2, #48	; 0x30
 8008426:	2a09      	cmp	r2, #9
 8008428:	d903      	bls.n	8008432 <_svfiprintf_r+0x196>
 800842a:	2b00      	cmp	r3, #0
 800842c:	d0c8      	beq.n	80083c0 <_svfiprintf_r+0x124>
 800842e:	9105      	str	r1, [sp, #20]
 8008430:	e7c6      	b.n	80083c0 <_svfiprintf_r+0x124>
 8008432:	fb05 2101 	mla	r1, r5, r1, r2
 8008436:	2301      	movs	r3, #1
 8008438:	4607      	mov	r7, r0
 800843a:	e7f0      	b.n	800841e <_svfiprintf_r+0x182>
 800843c:	ab03      	add	r3, sp, #12
 800843e:	9300      	str	r3, [sp, #0]
 8008440:	4622      	mov	r2, r4
 8008442:	4b11      	ldr	r3, [pc, #68]	; (8008488 <_svfiprintf_r+0x1ec>)
 8008444:	a904      	add	r1, sp, #16
 8008446:	4640      	mov	r0, r8
 8008448:	f7fc fbc2 	bl	8004bd0 <_printf_float>
 800844c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008450:	4681      	mov	r9, r0
 8008452:	d1d6      	bne.n	8008402 <_svfiprintf_r+0x166>
 8008454:	89a3      	ldrh	r3, [r4, #12]
 8008456:	065b      	lsls	r3, r3, #25
 8008458:	f53f af35 	bmi.w	80082c6 <_svfiprintf_r+0x2a>
 800845c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800845e:	b01d      	add	sp, #116	; 0x74
 8008460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008464:	ab03      	add	r3, sp, #12
 8008466:	9300      	str	r3, [sp, #0]
 8008468:	4622      	mov	r2, r4
 800846a:	4b07      	ldr	r3, [pc, #28]	; (8008488 <_svfiprintf_r+0x1ec>)
 800846c:	a904      	add	r1, sp, #16
 800846e:	4640      	mov	r0, r8
 8008470:	f7fc fe64 	bl	800513c <_printf_i>
 8008474:	e7ea      	b.n	800844c <_svfiprintf_r+0x1b0>
 8008476:	bf00      	nop
 8008478:	08009d3c 	.word	0x08009d3c
 800847c:	08009d42 	.word	0x08009d42
 8008480:	08009d46 	.word	0x08009d46
 8008484:	08004bd1 	.word	0x08004bd1
 8008488:	080081e9 	.word	0x080081e9

0800848c <_sbrk_r>:
 800848c:	b538      	push	{r3, r4, r5, lr}
 800848e:	4c06      	ldr	r4, [pc, #24]	; (80084a8 <_sbrk_r+0x1c>)
 8008490:	2300      	movs	r3, #0
 8008492:	4605      	mov	r5, r0
 8008494:	4608      	mov	r0, r1
 8008496:	6023      	str	r3, [r4, #0]
 8008498:	f7fb fdaa 	bl	8003ff0 <_sbrk>
 800849c:	1c43      	adds	r3, r0, #1
 800849e:	d102      	bne.n	80084a6 <_sbrk_r+0x1a>
 80084a0:	6823      	ldr	r3, [r4, #0]
 80084a2:	b103      	cbz	r3, 80084a6 <_sbrk_r+0x1a>
 80084a4:	602b      	str	r3, [r5, #0]
 80084a6:	bd38      	pop	{r3, r4, r5, pc}
 80084a8:	2000026c 	.word	0x2000026c

080084ac <strncmp>:
 80084ac:	b510      	push	{r4, lr}
 80084ae:	b16a      	cbz	r2, 80084cc <strncmp+0x20>
 80084b0:	3901      	subs	r1, #1
 80084b2:	1884      	adds	r4, r0, r2
 80084b4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80084b8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80084bc:	4293      	cmp	r3, r2
 80084be:	d103      	bne.n	80084c8 <strncmp+0x1c>
 80084c0:	42a0      	cmp	r0, r4
 80084c2:	d001      	beq.n	80084c8 <strncmp+0x1c>
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d1f5      	bne.n	80084b4 <strncmp+0x8>
 80084c8:	1a98      	subs	r0, r3, r2
 80084ca:	bd10      	pop	{r4, pc}
 80084cc:	4610      	mov	r0, r2
 80084ce:	e7fc      	b.n	80084ca <strncmp+0x1e>

080084d0 <__ascii_wctomb>:
 80084d0:	b149      	cbz	r1, 80084e6 <__ascii_wctomb+0x16>
 80084d2:	2aff      	cmp	r2, #255	; 0xff
 80084d4:	bf85      	ittet	hi
 80084d6:	238a      	movhi	r3, #138	; 0x8a
 80084d8:	6003      	strhi	r3, [r0, #0]
 80084da:	700a      	strbls	r2, [r1, #0]
 80084dc:	f04f 30ff 	movhi.w	r0, #4294967295
 80084e0:	bf98      	it	ls
 80084e2:	2001      	movls	r0, #1
 80084e4:	4770      	bx	lr
 80084e6:	4608      	mov	r0, r1
 80084e8:	4770      	bx	lr

080084ea <memmove>:
 80084ea:	4288      	cmp	r0, r1
 80084ec:	b510      	push	{r4, lr}
 80084ee:	eb01 0302 	add.w	r3, r1, r2
 80084f2:	d807      	bhi.n	8008504 <memmove+0x1a>
 80084f4:	1e42      	subs	r2, r0, #1
 80084f6:	4299      	cmp	r1, r3
 80084f8:	d00a      	beq.n	8008510 <memmove+0x26>
 80084fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084fe:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008502:	e7f8      	b.n	80084f6 <memmove+0xc>
 8008504:	4283      	cmp	r3, r0
 8008506:	d9f5      	bls.n	80084f4 <memmove+0xa>
 8008508:	1881      	adds	r1, r0, r2
 800850a:	1ad2      	subs	r2, r2, r3
 800850c:	42d3      	cmn	r3, r2
 800850e:	d100      	bne.n	8008512 <memmove+0x28>
 8008510:	bd10      	pop	{r4, pc}
 8008512:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008516:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800851a:	e7f7      	b.n	800850c <memmove+0x22>

0800851c <__malloc_lock>:
 800851c:	4770      	bx	lr

0800851e <__malloc_unlock>:
 800851e:	4770      	bx	lr

08008520 <_realloc_r>:
 8008520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008522:	4607      	mov	r7, r0
 8008524:	4614      	mov	r4, r2
 8008526:	460e      	mov	r6, r1
 8008528:	b921      	cbnz	r1, 8008534 <_realloc_r+0x14>
 800852a:	4611      	mov	r1, r2
 800852c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008530:	f7ff be00 	b.w	8008134 <_malloc_r>
 8008534:	b922      	cbnz	r2, 8008540 <_realloc_r+0x20>
 8008536:	f7ff fdaf 	bl	8008098 <_free_r>
 800853a:	4625      	mov	r5, r4
 800853c:	4628      	mov	r0, r5
 800853e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008540:	f000 f814 	bl	800856c <_malloc_usable_size_r>
 8008544:	42a0      	cmp	r0, r4
 8008546:	d20f      	bcs.n	8008568 <_realloc_r+0x48>
 8008548:	4621      	mov	r1, r4
 800854a:	4638      	mov	r0, r7
 800854c:	f7ff fdf2 	bl	8008134 <_malloc_r>
 8008550:	4605      	mov	r5, r0
 8008552:	2800      	cmp	r0, #0
 8008554:	d0f2      	beq.n	800853c <_realloc_r+0x1c>
 8008556:	4631      	mov	r1, r6
 8008558:	4622      	mov	r2, r4
 800855a:	f7ff f985 	bl	8007868 <memcpy>
 800855e:	4631      	mov	r1, r6
 8008560:	4638      	mov	r0, r7
 8008562:	f7ff fd99 	bl	8008098 <_free_r>
 8008566:	e7e9      	b.n	800853c <_realloc_r+0x1c>
 8008568:	4635      	mov	r5, r6
 800856a:	e7e7      	b.n	800853c <_realloc_r+0x1c>

0800856c <_malloc_usable_size_r>:
 800856c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008570:	1f18      	subs	r0, r3, #4
 8008572:	2b00      	cmp	r3, #0
 8008574:	bfbc      	itt	lt
 8008576:	580b      	ldrlt	r3, [r1, r0]
 8008578:	18c0      	addlt	r0, r0, r3
 800857a:	4770      	bx	lr

0800857c <atan2>:
 800857c:	f000 b970 	b.w	8008860 <__ieee754_atan2>

08008580 <pow>:
 8008580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008584:	ed2d 8b04 	vpush	{d8-d9}
 8008588:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800885c <pow+0x2dc>
 800858c:	b08d      	sub	sp, #52	; 0x34
 800858e:	ec57 6b10 	vmov	r6, r7, d0
 8008592:	ec55 4b11 	vmov	r4, r5, d1
 8008596:	f000 fa43 	bl	8008a20 <__ieee754_pow>
 800859a:	f999 3000 	ldrsb.w	r3, [r9]
 800859e:	9300      	str	r3, [sp, #0]
 80085a0:	3301      	adds	r3, #1
 80085a2:	eeb0 8a40 	vmov.f32	s16, s0
 80085a6:	eef0 8a60 	vmov.f32	s17, s1
 80085aa:	46c8      	mov	r8, r9
 80085ac:	d05f      	beq.n	800866e <pow+0xee>
 80085ae:	4622      	mov	r2, r4
 80085b0:	462b      	mov	r3, r5
 80085b2:	4620      	mov	r0, r4
 80085b4:	4629      	mov	r1, r5
 80085b6:	f7f8 fab9 	bl	8000b2c <__aeabi_dcmpun>
 80085ba:	4683      	mov	fp, r0
 80085bc:	2800      	cmp	r0, #0
 80085be:	d156      	bne.n	800866e <pow+0xee>
 80085c0:	4632      	mov	r2, r6
 80085c2:	463b      	mov	r3, r7
 80085c4:	4630      	mov	r0, r6
 80085c6:	4639      	mov	r1, r7
 80085c8:	f7f8 fab0 	bl	8000b2c <__aeabi_dcmpun>
 80085cc:	9001      	str	r0, [sp, #4]
 80085ce:	b1e8      	cbz	r0, 800860c <pow+0x8c>
 80085d0:	2200      	movs	r2, #0
 80085d2:	2300      	movs	r3, #0
 80085d4:	4620      	mov	r0, r4
 80085d6:	4629      	mov	r1, r5
 80085d8:	f7f8 fa76 	bl	8000ac8 <__aeabi_dcmpeq>
 80085dc:	2800      	cmp	r0, #0
 80085de:	d046      	beq.n	800866e <pow+0xee>
 80085e0:	2301      	movs	r3, #1
 80085e2:	9302      	str	r3, [sp, #8]
 80085e4:	4b96      	ldr	r3, [pc, #600]	; (8008840 <pow+0x2c0>)
 80085e6:	9303      	str	r3, [sp, #12]
 80085e8:	4b96      	ldr	r3, [pc, #600]	; (8008844 <pow+0x2c4>)
 80085ea:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80085ee:	2200      	movs	r2, #0
 80085f0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80085f4:	9b00      	ldr	r3, [sp, #0]
 80085f6:	2b02      	cmp	r3, #2
 80085f8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80085fc:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008600:	d033      	beq.n	800866a <pow+0xea>
 8008602:	a802      	add	r0, sp, #8
 8008604:	f001 f97d 	bl	8009902 <matherr>
 8008608:	bb48      	cbnz	r0, 800865e <pow+0xde>
 800860a:	e05d      	b.n	80086c8 <pow+0x148>
 800860c:	f04f 0a00 	mov.w	sl, #0
 8008610:	f04f 0b00 	mov.w	fp, #0
 8008614:	4652      	mov	r2, sl
 8008616:	465b      	mov	r3, fp
 8008618:	4630      	mov	r0, r6
 800861a:	4639      	mov	r1, r7
 800861c:	f7f8 fa54 	bl	8000ac8 <__aeabi_dcmpeq>
 8008620:	ec4b ab19 	vmov	d9, sl, fp
 8008624:	2800      	cmp	r0, #0
 8008626:	d054      	beq.n	80086d2 <pow+0x152>
 8008628:	4652      	mov	r2, sl
 800862a:	465b      	mov	r3, fp
 800862c:	4620      	mov	r0, r4
 800862e:	4629      	mov	r1, r5
 8008630:	f7f8 fa4a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008634:	4680      	mov	r8, r0
 8008636:	b318      	cbz	r0, 8008680 <pow+0x100>
 8008638:	2301      	movs	r3, #1
 800863a:	9302      	str	r3, [sp, #8]
 800863c:	4b80      	ldr	r3, [pc, #512]	; (8008840 <pow+0x2c0>)
 800863e:	9303      	str	r3, [sp, #12]
 8008640:	9b01      	ldr	r3, [sp, #4]
 8008642:	930a      	str	r3, [sp, #40]	; 0x28
 8008644:	9b00      	ldr	r3, [sp, #0]
 8008646:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800864a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800864e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d0d5      	beq.n	8008602 <pow+0x82>
 8008656:	4b7b      	ldr	r3, [pc, #492]	; (8008844 <pow+0x2c4>)
 8008658:	2200      	movs	r2, #0
 800865a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800865e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008660:	b11b      	cbz	r3, 800866a <pow+0xea>
 8008662:	f7fc f9ef 	bl	8004a44 <__errno>
 8008666:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008668:	6003      	str	r3, [r0, #0]
 800866a:	ed9d 8b08 	vldr	d8, [sp, #32]
 800866e:	eeb0 0a48 	vmov.f32	s0, s16
 8008672:	eef0 0a68 	vmov.f32	s1, s17
 8008676:	b00d      	add	sp, #52	; 0x34
 8008678:	ecbd 8b04 	vpop	{d8-d9}
 800867c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008680:	ec45 4b10 	vmov	d0, r4, r5
 8008684:	f001 f935 	bl	80098f2 <finite>
 8008688:	2800      	cmp	r0, #0
 800868a:	d0f0      	beq.n	800866e <pow+0xee>
 800868c:	4652      	mov	r2, sl
 800868e:	465b      	mov	r3, fp
 8008690:	4620      	mov	r0, r4
 8008692:	4629      	mov	r1, r5
 8008694:	f7f8 fa22 	bl	8000adc <__aeabi_dcmplt>
 8008698:	2800      	cmp	r0, #0
 800869a:	d0e8      	beq.n	800866e <pow+0xee>
 800869c:	2301      	movs	r3, #1
 800869e:	9302      	str	r3, [sp, #8]
 80086a0:	4b67      	ldr	r3, [pc, #412]	; (8008840 <pow+0x2c0>)
 80086a2:	9303      	str	r3, [sp, #12]
 80086a4:	f999 3000 	ldrsb.w	r3, [r9]
 80086a8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80086ac:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80086b0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80086b4:	b913      	cbnz	r3, 80086bc <pow+0x13c>
 80086b6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80086ba:	e7a2      	b.n	8008602 <pow+0x82>
 80086bc:	4962      	ldr	r1, [pc, #392]	; (8008848 <pow+0x2c8>)
 80086be:	2000      	movs	r0, #0
 80086c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80086c4:	2b02      	cmp	r3, #2
 80086c6:	d19c      	bne.n	8008602 <pow+0x82>
 80086c8:	f7fc f9bc 	bl	8004a44 <__errno>
 80086cc:	2321      	movs	r3, #33	; 0x21
 80086ce:	6003      	str	r3, [r0, #0]
 80086d0:	e7c5      	b.n	800865e <pow+0xde>
 80086d2:	eeb0 0a48 	vmov.f32	s0, s16
 80086d6:	eef0 0a68 	vmov.f32	s1, s17
 80086da:	f001 f90a 	bl	80098f2 <finite>
 80086de:	9000      	str	r0, [sp, #0]
 80086e0:	2800      	cmp	r0, #0
 80086e2:	f040 8081 	bne.w	80087e8 <pow+0x268>
 80086e6:	ec47 6b10 	vmov	d0, r6, r7
 80086ea:	f001 f902 	bl	80098f2 <finite>
 80086ee:	2800      	cmp	r0, #0
 80086f0:	d07a      	beq.n	80087e8 <pow+0x268>
 80086f2:	ec45 4b10 	vmov	d0, r4, r5
 80086f6:	f001 f8fc 	bl	80098f2 <finite>
 80086fa:	2800      	cmp	r0, #0
 80086fc:	d074      	beq.n	80087e8 <pow+0x268>
 80086fe:	ec53 2b18 	vmov	r2, r3, d8
 8008702:	ee18 0a10 	vmov	r0, s16
 8008706:	4619      	mov	r1, r3
 8008708:	f7f8 fa10 	bl	8000b2c <__aeabi_dcmpun>
 800870c:	f999 9000 	ldrsb.w	r9, [r9]
 8008710:	4b4b      	ldr	r3, [pc, #300]	; (8008840 <pow+0x2c0>)
 8008712:	b1b0      	cbz	r0, 8008742 <pow+0x1c2>
 8008714:	2201      	movs	r2, #1
 8008716:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800871a:	9b00      	ldr	r3, [sp, #0]
 800871c:	930a      	str	r3, [sp, #40]	; 0x28
 800871e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008722:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008726:	f1b9 0f00 	cmp.w	r9, #0
 800872a:	d0c4      	beq.n	80086b6 <pow+0x136>
 800872c:	4652      	mov	r2, sl
 800872e:	465b      	mov	r3, fp
 8008730:	4650      	mov	r0, sl
 8008732:	4659      	mov	r1, fp
 8008734:	f7f8 f88a 	bl	800084c <__aeabi_ddiv>
 8008738:	f1b9 0f02 	cmp.w	r9, #2
 800873c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008740:	e7c1      	b.n	80086c6 <pow+0x146>
 8008742:	2203      	movs	r2, #3
 8008744:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008748:	900a      	str	r0, [sp, #40]	; 0x28
 800874a:	4629      	mov	r1, r5
 800874c:	4620      	mov	r0, r4
 800874e:	2200      	movs	r2, #0
 8008750:	4b3e      	ldr	r3, [pc, #248]	; (800884c <pow+0x2cc>)
 8008752:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008756:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800875a:	f7f7 ff4d 	bl	80005f8 <__aeabi_dmul>
 800875e:	4604      	mov	r4, r0
 8008760:	460d      	mov	r5, r1
 8008762:	f1b9 0f00 	cmp.w	r9, #0
 8008766:	d124      	bne.n	80087b2 <pow+0x232>
 8008768:	4b39      	ldr	r3, [pc, #228]	; (8008850 <pow+0x2d0>)
 800876a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800876e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008772:	4630      	mov	r0, r6
 8008774:	4652      	mov	r2, sl
 8008776:	465b      	mov	r3, fp
 8008778:	4639      	mov	r1, r7
 800877a:	f7f8 f9af 	bl	8000adc <__aeabi_dcmplt>
 800877e:	2800      	cmp	r0, #0
 8008780:	d056      	beq.n	8008830 <pow+0x2b0>
 8008782:	ec45 4b10 	vmov	d0, r4, r5
 8008786:	f001 f8c7 	bl	8009918 <rint>
 800878a:	4622      	mov	r2, r4
 800878c:	462b      	mov	r3, r5
 800878e:	ec51 0b10 	vmov	r0, r1, d0
 8008792:	f7f8 f999 	bl	8000ac8 <__aeabi_dcmpeq>
 8008796:	b920      	cbnz	r0, 80087a2 <pow+0x222>
 8008798:	4b2e      	ldr	r3, [pc, #184]	; (8008854 <pow+0x2d4>)
 800879a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800879e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80087a2:	f998 3000 	ldrsb.w	r3, [r8]
 80087a6:	2b02      	cmp	r3, #2
 80087a8:	d142      	bne.n	8008830 <pow+0x2b0>
 80087aa:	f7fc f94b 	bl	8004a44 <__errno>
 80087ae:	2322      	movs	r3, #34	; 0x22
 80087b0:	e78d      	b.n	80086ce <pow+0x14e>
 80087b2:	4b29      	ldr	r3, [pc, #164]	; (8008858 <pow+0x2d8>)
 80087b4:	2200      	movs	r2, #0
 80087b6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80087ba:	4630      	mov	r0, r6
 80087bc:	4652      	mov	r2, sl
 80087be:	465b      	mov	r3, fp
 80087c0:	4639      	mov	r1, r7
 80087c2:	f7f8 f98b 	bl	8000adc <__aeabi_dcmplt>
 80087c6:	2800      	cmp	r0, #0
 80087c8:	d0eb      	beq.n	80087a2 <pow+0x222>
 80087ca:	ec45 4b10 	vmov	d0, r4, r5
 80087ce:	f001 f8a3 	bl	8009918 <rint>
 80087d2:	4622      	mov	r2, r4
 80087d4:	462b      	mov	r3, r5
 80087d6:	ec51 0b10 	vmov	r0, r1, d0
 80087da:	f7f8 f975 	bl	8000ac8 <__aeabi_dcmpeq>
 80087de:	2800      	cmp	r0, #0
 80087e0:	d1df      	bne.n	80087a2 <pow+0x222>
 80087e2:	2200      	movs	r2, #0
 80087e4:	4b18      	ldr	r3, [pc, #96]	; (8008848 <pow+0x2c8>)
 80087e6:	e7da      	b.n	800879e <pow+0x21e>
 80087e8:	2200      	movs	r2, #0
 80087ea:	2300      	movs	r3, #0
 80087ec:	ec51 0b18 	vmov	r0, r1, d8
 80087f0:	f7f8 f96a 	bl	8000ac8 <__aeabi_dcmpeq>
 80087f4:	2800      	cmp	r0, #0
 80087f6:	f43f af3a 	beq.w	800866e <pow+0xee>
 80087fa:	ec47 6b10 	vmov	d0, r6, r7
 80087fe:	f001 f878 	bl	80098f2 <finite>
 8008802:	2800      	cmp	r0, #0
 8008804:	f43f af33 	beq.w	800866e <pow+0xee>
 8008808:	ec45 4b10 	vmov	d0, r4, r5
 800880c:	f001 f871 	bl	80098f2 <finite>
 8008810:	2800      	cmp	r0, #0
 8008812:	f43f af2c 	beq.w	800866e <pow+0xee>
 8008816:	2304      	movs	r3, #4
 8008818:	9302      	str	r3, [sp, #8]
 800881a:	4b09      	ldr	r3, [pc, #36]	; (8008840 <pow+0x2c0>)
 800881c:	9303      	str	r3, [sp, #12]
 800881e:	2300      	movs	r3, #0
 8008820:	930a      	str	r3, [sp, #40]	; 0x28
 8008822:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008826:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800882a:	ed8d 9b08 	vstr	d9, [sp, #32]
 800882e:	e7b8      	b.n	80087a2 <pow+0x222>
 8008830:	a802      	add	r0, sp, #8
 8008832:	f001 f866 	bl	8009902 <matherr>
 8008836:	2800      	cmp	r0, #0
 8008838:	f47f af11 	bne.w	800865e <pow+0xde>
 800883c:	e7b5      	b.n	80087aa <pow+0x22a>
 800883e:	bf00      	nop
 8008840:	08009e4e 	.word	0x08009e4e
 8008844:	3ff00000 	.word	0x3ff00000
 8008848:	fff00000 	.word	0xfff00000
 800884c:	3fe00000 	.word	0x3fe00000
 8008850:	47efffff 	.word	0x47efffff
 8008854:	c7efffff 	.word	0xc7efffff
 8008858:	7ff00000 	.word	0x7ff00000
 800885c:	200001dc 	.word	0x200001dc

08008860 <__ieee754_atan2>:
 8008860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008864:	ec57 6b11 	vmov	r6, r7, d1
 8008868:	4273      	negs	r3, r6
 800886a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800886e:	4333      	orrs	r3, r6
 8008870:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8008a18 <__ieee754_atan2+0x1b8>
 8008874:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008878:	4573      	cmp	r3, lr
 800887a:	ec51 0b10 	vmov	r0, r1, d0
 800887e:	ee11 8a10 	vmov	r8, s2
 8008882:	d80a      	bhi.n	800889a <__ieee754_atan2+0x3a>
 8008884:	4244      	negs	r4, r0
 8008886:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800888a:	4304      	orrs	r4, r0
 800888c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008890:	4574      	cmp	r4, lr
 8008892:	468c      	mov	ip, r1
 8008894:	ee10 9a10 	vmov	r9, s0
 8008898:	d907      	bls.n	80088aa <__ieee754_atan2+0x4a>
 800889a:	4632      	mov	r2, r6
 800889c:	463b      	mov	r3, r7
 800889e:	f7f7 fcf5 	bl	800028c <__adddf3>
 80088a2:	ec41 0b10 	vmov	d0, r0, r1
 80088a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088aa:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80088ae:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80088b2:	4334      	orrs	r4, r6
 80088b4:	d103      	bne.n	80088be <__ieee754_atan2+0x5e>
 80088b6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088ba:	f000 be71 	b.w	80095a0 <atan>
 80088be:	17bc      	asrs	r4, r7, #30
 80088c0:	f004 0402 	and.w	r4, r4, #2
 80088c4:	ea53 0909 	orrs.w	r9, r3, r9
 80088c8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80088cc:	d107      	bne.n	80088de <__ieee754_atan2+0x7e>
 80088ce:	2c02      	cmp	r4, #2
 80088d0:	d073      	beq.n	80089ba <__ieee754_atan2+0x15a>
 80088d2:	2c03      	cmp	r4, #3
 80088d4:	d1e5      	bne.n	80088a2 <__ieee754_atan2+0x42>
 80088d6:	a13e      	add	r1, pc, #248	; (adr r1, 80089d0 <__ieee754_atan2+0x170>)
 80088d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088dc:	e7e1      	b.n	80088a2 <__ieee754_atan2+0x42>
 80088de:	ea52 0808 	orrs.w	r8, r2, r8
 80088e2:	d106      	bne.n	80088f2 <__ieee754_atan2+0x92>
 80088e4:	f1bc 0f00 	cmp.w	ip, #0
 80088e8:	da6b      	bge.n	80089c2 <__ieee754_atan2+0x162>
 80088ea:	a13b      	add	r1, pc, #236	; (adr r1, 80089d8 <__ieee754_atan2+0x178>)
 80088ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088f0:	e7d7      	b.n	80088a2 <__ieee754_atan2+0x42>
 80088f2:	4572      	cmp	r2, lr
 80088f4:	d120      	bne.n	8008938 <__ieee754_atan2+0xd8>
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d111      	bne.n	800891e <__ieee754_atan2+0xbe>
 80088fa:	2c02      	cmp	r4, #2
 80088fc:	d007      	beq.n	800890e <__ieee754_atan2+0xae>
 80088fe:	2c03      	cmp	r4, #3
 8008900:	d009      	beq.n	8008916 <__ieee754_atan2+0xb6>
 8008902:	2c01      	cmp	r4, #1
 8008904:	d155      	bne.n	80089b2 <__ieee754_atan2+0x152>
 8008906:	a136      	add	r1, pc, #216	; (adr r1, 80089e0 <__ieee754_atan2+0x180>)
 8008908:	e9d1 0100 	ldrd	r0, r1, [r1]
 800890c:	e7c9      	b.n	80088a2 <__ieee754_atan2+0x42>
 800890e:	a136      	add	r1, pc, #216	; (adr r1, 80089e8 <__ieee754_atan2+0x188>)
 8008910:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008914:	e7c5      	b.n	80088a2 <__ieee754_atan2+0x42>
 8008916:	a136      	add	r1, pc, #216	; (adr r1, 80089f0 <__ieee754_atan2+0x190>)
 8008918:	e9d1 0100 	ldrd	r0, r1, [r1]
 800891c:	e7c1      	b.n	80088a2 <__ieee754_atan2+0x42>
 800891e:	2c02      	cmp	r4, #2
 8008920:	d04b      	beq.n	80089ba <__ieee754_atan2+0x15a>
 8008922:	2c03      	cmp	r4, #3
 8008924:	d0d7      	beq.n	80088d6 <__ieee754_atan2+0x76>
 8008926:	2c01      	cmp	r4, #1
 8008928:	f04f 0000 	mov.w	r0, #0
 800892c:	d102      	bne.n	8008934 <__ieee754_atan2+0xd4>
 800892e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008932:	e7b6      	b.n	80088a2 <__ieee754_atan2+0x42>
 8008934:	2100      	movs	r1, #0
 8008936:	e7b4      	b.n	80088a2 <__ieee754_atan2+0x42>
 8008938:	4573      	cmp	r3, lr
 800893a:	d0d3      	beq.n	80088e4 <__ieee754_atan2+0x84>
 800893c:	1a9b      	subs	r3, r3, r2
 800893e:	151b      	asrs	r3, r3, #20
 8008940:	2b3c      	cmp	r3, #60	; 0x3c
 8008942:	dc1e      	bgt.n	8008982 <__ieee754_atan2+0x122>
 8008944:	2f00      	cmp	r7, #0
 8008946:	da01      	bge.n	800894c <__ieee754_atan2+0xec>
 8008948:	333c      	adds	r3, #60	; 0x3c
 800894a:	db1e      	blt.n	800898a <__ieee754_atan2+0x12a>
 800894c:	4632      	mov	r2, r6
 800894e:	463b      	mov	r3, r7
 8008950:	f7f7 ff7c 	bl	800084c <__aeabi_ddiv>
 8008954:	ec41 0b10 	vmov	d0, r0, r1
 8008958:	f000 ffc2 	bl	80098e0 <fabs>
 800895c:	f000 fe20 	bl	80095a0 <atan>
 8008960:	ec51 0b10 	vmov	r0, r1, d0
 8008964:	2c01      	cmp	r4, #1
 8008966:	d013      	beq.n	8008990 <__ieee754_atan2+0x130>
 8008968:	2c02      	cmp	r4, #2
 800896a:	d015      	beq.n	8008998 <__ieee754_atan2+0x138>
 800896c:	2c00      	cmp	r4, #0
 800896e:	d098      	beq.n	80088a2 <__ieee754_atan2+0x42>
 8008970:	a321      	add	r3, pc, #132	; (adr r3, 80089f8 <__ieee754_atan2+0x198>)
 8008972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008976:	f7f7 fc87 	bl	8000288 <__aeabi_dsub>
 800897a:	a321      	add	r3, pc, #132	; (adr r3, 8008a00 <__ieee754_atan2+0x1a0>)
 800897c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008980:	e014      	b.n	80089ac <__ieee754_atan2+0x14c>
 8008982:	a121      	add	r1, pc, #132	; (adr r1, 8008a08 <__ieee754_atan2+0x1a8>)
 8008984:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008988:	e7ec      	b.n	8008964 <__ieee754_atan2+0x104>
 800898a:	2000      	movs	r0, #0
 800898c:	2100      	movs	r1, #0
 800898e:	e7e9      	b.n	8008964 <__ieee754_atan2+0x104>
 8008990:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008994:	4619      	mov	r1, r3
 8008996:	e784      	b.n	80088a2 <__ieee754_atan2+0x42>
 8008998:	a317      	add	r3, pc, #92	; (adr r3, 80089f8 <__ieee754_atan2+0x198>)
 800899a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800899e:	f7f7 fc73 	bl	8000288 <__aeabi_dsub>
 80089a2:	4602      	mov	r2, r0
 80089a4:	460b      	mov	r3, r1
 80089a6:	a116      	add	r1, pc, #88	; (adr r1, 8008a00 <__ieee754_atan2+0x1a0>)
 80089a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089ac:	f7f7 fc6c 	bl	8000288 <__aeabi_dsub>
 80089b0:	e777      	b.n	80088a2 <__ieee754_atan2+0x42>
 80089b2:	a117      	add	r1, pc, #92	; (adr r1, 8008a10 <__ieee754_atan2+0x1b0>)
 80089b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089b8:	e773      	b.n	80088a2 <__ieee754_atan2+0x42>
 80089ba:	a111      	add	r1, pc, #68	; (adr r1, 8008a00 <__ieee754_atan2+0x1a0>)
 80089bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089c0:	e76f      	b.n	80088a2 <__ieee754_atan2+0x42>
 80089c2:	a111      	add	r1, pc, #68	; (adr r1, 8008a08 <__ieee754_atan2+0x1a8>)
 80089c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089c8:	e76b      	b.n	80088a2 <__ieee754_atan2+0x42>
 80089ca:	bf00      	nop
 80089cc:	f3af 8000 	nop.w
 80089d0:	54442d18 	.word	0x54442d18
 80089d4:	c00921fb 	.word	0xc00921fb
 80089d8:	54442d18 	.word	0x54442d18
 80089dc:	bff921fb 	.word	0xbff921fb
 80089e0:	54442d18 	.word	0x54442d18
 80089e4:	bfe921fb 	.word	0xbfe921fb
 80089e8:	7f3321d2 	.word	0x7f3321d2
 80089ec:	4002d97c 	.word	0x4002d97c
 80089f0:	7f3321d2 	.word	0x7f3321d2
 80089f4:	c002d97c 	.word	0xc002d97c
 80089f8:	33145c07 	.word	0x33145c07
 80089fc:	3ca1a626 	.word	0x3ca1a626
 8008a00:	54442d18 	.word	0x54442d18
 8008a04:	400921fb 	.word	0x400921fb
 8008a08:	54442d18 	.word	0x54442d18
 8008a0c:	3ff921fb 	.word	0x3ff921fb
 8008a10:	54442d18 	.word	0x54442d18
 8008a14:	3fe921fb 	.word	0x3fe921fb
 8008a18:	7ff00000 	.word	0x7ff00000
 8008a1c:	00000000 	.word	0x00000000

08008a20 <__ieee754_pow>:
 8008a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a24:	b091      	sub	sp, #68	; 0x44
 8008a26:	ed8d 1b00 	vstr	d1, [sp]
 8008a2a:	e9dd 2900 	ldrd	r2, r9, [sp]
 8008a2e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8008a32:	ea58 0302 	orrs.w	r3, r8, r2
 8008a36:	ec57 6b10 	vmov	r6, r7, d0
 8008a3a:	f000 84be 	beq.w	80093ba <__ieee754_pow+0x99a>
 8008a3e:	4b7a      	ldr	r3, [pc, #488]	; (8008c28 <__ieee754_pow+0x208>)
 8008a40:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8008a44:	429c      	cmp	r4, r3
 8008a46:	463d      	mov	r5, r7
 8008a48:	ee10 aa10 	vmov	sl, s0
 8008a4c:	dc09      	bgt.n	8008a62 <__ieee754_pow+0x42>
 8008a4e:	d103      	bne.n	8008a58 <__ieee754_pow+0x38>
 8008a50:	b93e      	cbnz	r6, 8008a62 <__ieee754_pow+0x42>
 8008a52:	45a0      	cmp	r8, r4
 8008a54:	dc0d      	bgt.n	8008a72 <__ieee754_pow+0x52>
 8008a56:	e001      	b.n	8008a5c <__ieee754_pow+0x3c>
 8008a58:	4598      	cmp	r8, r3
 8008a5a:	dc02      	bgt.n	8008a62 <__ieee754_pow+0x42>
 8008a5c:	4598      	cmp	r8, r3
 8008a5e:	d10e      	bne.n	8008a7e <__ieee754_pow+0x5e>
 8008a60:	b16a      	cbz	r2, 8008a7e <__ieee754_pow+0x5e>
 8008a62:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008a66:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008a6a:	ea54 030a 	orrs.w	r3, r4, sl
 8008a6e:	f000 84a4 	beq.w	80093ba <__ieee754_pow+0x99a>
 8008a72:	486e      	ldr	r0, [pc, #440]	; (8008c2c <__ieee754_pow+0x20c>)
 8008a74:	b011      	add	sp, #68	; 0x44
 8008a76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a7a:	f000 bf45 	b.w	8009908 <nan>
 8008a7e:	2d00      	cmp	r5, #0
 8008a80:	da53      	bge.n	8008b2a <__ieee754_pow+0x10a>
 8008a82:	4b6b      	ldr	r3, [pc, #428]	; (8008c30 <__ieee754_pow+0x210>)
 8008a84:	4598      	cmp	r8, r3
 8008a86:	dc4d      	bgt.n	8008b24 <__ieee754_pow+0x104>
 8008a88:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008a8c:	4598      	cmp	r8, r3
 8008a8e:	dd4c      	ble.n	8008b2a <__ieee754_pow+0x10a>
 8008a90:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008a94:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008a98:	2b14      	cmp	r3, #20
 8008a9a:	dd26      	ble.n	8008aea <__ieee754_pow+0xca>
 8008a9c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008aa0:	fa22 f103 	lsr.w	r1, r2, r3
 8008aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d13e      	bne.n	8008b2a <__ieee754_pow+0x10a>
 8008aac:	f001 0101 	and.w	r1, r1, #1
 8008ab0:	f1c1 0b02 	rsb	fp, r1, #2
 8008ab4:	2a00      	cmp	r2, #0
 8008ab6:	d15b      	bne.n	8008b70 <__ieee754_pow+0x150>
 8008ab8:	4b5b      	ldr	r3, [pc, #364]	; (8008c28 <__ieee754_pow+0x208>)
 8008aba:	4598      	cmp	r8, r3
 8008abc:	d124      	bne.n	8008b08 <__ieee754_pow+0xe8>
 8008abe:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008ac2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008ac6:	ea53 030a 	orrs.w	r3, r3, sl
 8008aca:	f000 8476 	beq.w	80093ba <__ieee754_pow+0x99a>
 8008ace:	4b59      	ldr	r3, [pc, #356]	; (8008c34 <__ieee754_pow+0x214>)
 8008ad0:	429c      	cmp	r4, r3
 8008ad2:	dd2d      	ble.n	8008b30 <__ieee754_pow+0x110>
 8008ad4:	f1b9 0f00 	cmp.w	r9, #0
 8008ad8:	f280 8473 	bge.w	80093c2 <__ieee754_pow+0x9a2>
 8008adc:	2000      	movs	r0, #0
 8008ade:	2100      	movs	r1, #0
 8008ae0:	ec41 0b10 	vmov	d0, r0, r1
 8008ae4:	b011      	add	sp, #68	; 0x44
 8008ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aea:	2a00      	cmp	r2, #0
 8008aec:	d13e      	bne.n	8008b6c <__ieee754_pow+0x14c>
 8008aee:	f1c3 0314 	rsb	r3, r3, #20
 8008af2:	fa48 f103 	asr.w	r1, r8, r3
 8008af6:	fa01 f303 	lsl.w	r3, r1, r3
 8008afa:	4543      	cmp	r3, r8
 8008afc:	f040 8469 	bne.w	80093d2 <__ieee754_pow+0x9b2>
 8008b00:	f001 0101 	and.w	r1, r1, #1
 8008b04:	f1c1 0b02 	rsb	fp, r1, #2
 8008b08:	4b4b      	ldr	r3, [pc, #300]	; (8008c38 <__ieee754_pow+0x218>)
 8008b0a:	4598      	cmp	r8, r3
 8008b0c:	d118      	bne.n	8008b40 <__ieee754_pow+0x120>
 8008b0e:	f1b9 0f00 	cmp.w	r9, #0
 8008b12:	f280 845a 	bge.w	80093ca <__ieee754_pow+0x9aa>
 8008b16:	4948      	ldr	r1, [pc, #288]	; (8008c38 <__ieee754_pow+0x218>)
 8008b18:	4632      	mov	r2, r6
 8008b1a:	463b      	mov	r3, r7
 8008b1c:	2000      	movs	r0, #0
 8008b1e:	f7f7 fe95 	bl	800084c <__aeabi_ddiv>
 8008b22:	e7dd      	b.n	8008ae0 <__ieee754_pow+0xc0>
 8008b24:	f04f 0b02 	mov.w	fp, #2
 8008b28:	e7c4      	b.n	8008ab4 <__ieee754_pow+0x94>
 8008b2a:	f04f 0b00 	mov.w	fp, #0
 8008b2e:	e7c1      	b.n	8008ab4 <__ieee754_pow+0x94>
 8008b30:	f1b9 0f00 	cmp.w	r9, #0
 8008b34:	dad2      	bge.n	8008adc <__ieee754_pow+0xbc>
 8008b36:	e9dd 0300 	ldrd	r0, r3, [sp]
 8008b3a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008b3e:	e7cf      	b.n	8008ae0 <__ieee754_pow+0xc0>
 8008b40:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8008b44:	d106      	bne.n	8008b54 <__ieee754_pow+0x134>
 8008b46:	4632      	mov	r2, r6
 8008b48:	463b      	mov	r3, r7
 8008b4a:	4610      	mov	r0, r2
 8008b4c:	4619      	mov	r1, r3
 8008b4e:	f7f7 fd53 	bl	80005f8 <__aeabi_dmul>
 8008b52:	e7c5      	b.n	8008ae0 <__ieee754_pow+0xc0>
 8008b54:	4b39      	ldr	r3, [pc, #228]	; (8008c3c <__ieee754_pow+0x21c>)
 8008b56:	4599      	cmp	r9, r3
 8008b58:	d10a      	bne.n	8008b70 <__ieee754_pow+0x150>
 8008b5a:	2d00      	cmp	r5, #0
 8008b5c:	db08      	blt.n	8008b70 <__ieee754_pow+0x150>
 8008b5e:	ec47 6b10 	vmov	d0, r6, r7
 8008b62:	b011      	add	sp, #68	; 0x44
 8008b64:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b68:	f000 bc68 	b.w	800943c <__ieee754_sqrt>
 8008b6c:	f04f 0b00 	mov.w	fp, #0
 8008b70:	ec47 6b10 	vmov	d0, r6, r7
 8008b74:	f000 feb4 	bl	80098e0 <fabs>
 8008b78:	ec51 0b10 	vmov	r0, r1, d0
 8008b7c:	f1ba 0f00 	cmp.w	sl, #0
 8008b80:	d127      	bne.n	8008bd2 <__ieee754_pow+0x1b2>
 8008b82:	b124      	cbz	r4, 8008b8e <__ieee754_pow+0x16e>
 8008b84:	4b2c      	ldr	r3, [pc, #176]	; (8008c38 <__ieee754_pow+0x218>)
 8008b86:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d121      	bne.n	8008bd2 <__ieee754_pow+0x1b2>
 8008b8e:	f1b9 0f00 	cmp.w	r9, #0
 8008b92:	da05      	bge.n	8008ba0 <__ieee754_pow+0x180>
 8008b94:	4602      	mov	r2, r0
 8008b96:	460b      	mov	r3, r1
 8008b98:	2000      	movs	r0, #0
 8008b9a:	4927      	ldr	r1, [pc, #156]	; (8008c38 <__ieee754_pow+0x218>)
 8008b9c:	f7f7 fe56 	bl	800084c <__aeabi_ddiv>
 8008ba0:	2d00      	cmp	r5, #0
 8008ba2:	da9d      	bge.n	8008ae0 <__ieee754_pow+0xc0>
 8008ba4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008ba8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008bac:	ea54 030b 	orrs.w	r3, r4, fp
 8008bb0:	d108      	bne.n	8008bc4 <__ieee754_pow+0x1a4>
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	4610      	mov	r0, r2
 8008bb8:	4619      	mov	r1, r3
 8008bba:	f7f7 fb65 	bl	8000288 <__aeabi_dsub>
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	e7ac      	b.n	8008b1e <__ieee754_pow+0xfe>
 8008bc4:	f1bb 0f01 	cmp.w	fp, #1
 8008bc8:	d18a      	bne.n	8008ae0 <__ieee754_pow+0xc0>
 8008bca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008bce:	4619      	mov	r1, r3
 8008bd0:	e786      	b.n	8008ae0 <__ieee754_pow+0xc0>
 8008bd2:	0fed      	lsrs	r5, r5, #31
 8008bd4:	1e6b      	subs	r3, r5, #1
 8008bd6:	930d      	str	r3, [sp, #52]	; 0x34
 8008bd8:	ea5b 0303 	orrs.w	r3, fp, r3
 8008bdc:	d102      	bne.n	8008be4 <__ieee754_pow+0x1c4>
 8008bde:	4632      	mov	r2, r6
 8008be0:	463b      	mov	r3, r7
 8008be2:	e7e8      	b.n	8008bb6 <__ieee754_pow+0x196>
 8008be4:	4b16      	ldr	r3, [pc, #88]	; (8008c40 <__ieee754_pow+0x220>)
 8008be6:	4598      	cmp	r8, r3
 8008be8:	f340 80fe 	ble.w	8008de8 <__ieee754_pow+0x3c8>
 8008bec:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008bf0:	4598      	cmp	r8, r3
 8008bf2:	dd0a      	ble.n	8008c0a <__ieee754_pow+0x1ea>
 8008bf4:	4b0f      	ldr	r3, [pc, #60]	; (8008c34 <__ieee754_pow+0x214>)
 8008bf6:	429c      	cmp	r4, r3
 8008bf8:	dc0d      	bgt.n	8008c16 <__ieee754_pow+0x1f6>
 8008bfa:	f1b9 0f00 	cmp.w	r9, #0
 8008bfe:	f6bf af6d 	bge.w	8008adc <__ieee754_pow+0xbc>
 8008c02:	a307      	add	r3, pc, #28	; (adr r3, 8008c20 <__ieee754_pow+0x200>)
 8008c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c08:	e79f      	b.n	8008b4a <__ieee754_pow+0x12a>
 8008c0a:	4b0e      	ldr	r3, [pc, #56]	; (8008c44 <__ieee754_pow+0x224>)
 8008c0c:	429c      	cmp	r4, r3
 8008c0e:	ddf4      	ble.n	8008bfa <__ieee754_pow+0x1da>
 8008c10:	4b09      	ldr	r3, [pc, #36]	; (8008c38 <__ieee754_pow+0x218>)
 8008c12:	429c      	cmp	r4, r3
 8008c14:	dd18      	ble.n	8008c48 <__ieee754_pow+0x228>
 8008c16:	f1b9 0f00 	cmp.w	r9, #0
 8008c1a:	dcf2      	bgt.n	8008c02 <__ieee754_pow+0x1e2>
 8008c1c:	e75e      	b.n	8008adc <__ieee754_pow+0xbc>
 8008c1e:	bf00      	nop
 8008c20:	8800759c 	.word	0x8800759c
 8008c24:	7e37e43c 	.word	0x7e37e43c
 8008c28:	7ff00000 	.word	0x7ff00000
 8008c2c:	08009d41 	.word	0x08009d41
 8008c30:	433fffff 	.word	0x433fffff
 8008c34:	3fefffff 	.word	0x3fefffff
 8008c38:	3ff00000 	.word	0x3ff00000
 8008c3c:	3fe00000 	.word	0x3fe00000
 8008c40:	41e00000 	.word	0x41e00000
 8008c44:	3feffffe 	.word	0x3feffffe
 8008c48:	2200      	movs	r2, #0
 8008c4a:	4b63      	ldr	r3, [pc, #396]	; (8008dd8 <__ieee754_pow+0x3b8>)
 8008c4c:	f7f7 fb1c 	bl	8000288 <__aeabi_dsub>
 8008c50:	a355      	add	r3, pc, #340	; (adr r3, 8008da8 <__ieee754_pow+0x388>)
 8008c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c56:	4604      	mov	r4, r0
 8008c58:	460d      	mov	r5, r1
 8008c5a:	f7f7 fccd 	bl	80005f8 <__aeabi_dmul>
 8008c5e:	a354      	add	r3, pc, #336	; (adr r3, 8008db0 <__ieee754_pow+0x390>)
 8008c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c64:	4606      	mov	r6, r0
 8008c66:	460f      	mov	r7, r1
 8008c68:	4620      	mov	r0, r4
 8008c6a:	4629      	mov	r1, r5
 8008c6c:	f7f7 fcc4 	bl	80005f8 <__aeabi_dmul>
 8008c70:	2200      	movs	r2, #0
 8008c72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c76:	4b59      	ldr	r3, [pc, #356]	; (8008ddc <__ieee754_pow+0x3bc>)
 8008c78:	4620      	mov	r0, r4
 8008c7a:	4629      	mov	r1, r5
 8008c7c:	f7f7 fcbc 	bl	80005f8 <__aeabi_dmul>
 8008c80:	4602      	mov	r2, r0
 8008c82:	460b      	mov	r3, r1
 8008c84:	a14c      	add	r1, pc, #304	; (adr r1, 8008db8 <__ieee754_pow+0x398>)
 8008c86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c8a:	f7f7 fafd 	bl	8000288 <__aeabi_dsub>
 8008c8e:	4622      	mov	r2, r4
 8008c90:	462b      	mov	r3, r5
 8008c92:	f7f7 fcb1 	bl	80005f8 <__aeabi_dmul>
 8008c96:	4602      	mov	r2, r0
 8008c98:	460b      	mov	r3, r1
 8008c9a:	2000      	movs	r0, #0
 8008c9c:	4950      	ldr	r1, [pc, #320]	; (8008de0 <__ieee754_pow+0x3c0>)
 8008c9e:	f7f7 faf3 	bl	8000288 <__aeabi_dsub>
 8008ca2:	4622      	mov	r2, r4
 8008ca4:	462b      	mov	r3, r5
 8008ca6:	4680      	mov	r8, r0
 8008ca8:	4689      	mov	r9, r1
 8008caa:	4620      	mov	r0, r4
 8008cac:	4629      	mov	r1, r5
 8008cae:	f7f7 fca3 	bl	80005f8 <__aeabi_dmul>
 8008cb2:	4602      	mov	r2, r0
 8008cb4:	460b      	mov	r3, r1
 8008cb6:	4640      	mov	r0, r8
 8008cb8:	4649      	mov	r1, r9
 8008cba:	f7f7 fc9d 	bl	80005f8 <__aeabi_dmul>
 8008cbe:	a340      	add	r3, pc, #256	; (adr r3, 8008dc0 <__ieee754_pow+0x3a0>)
 8008cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc4:	f7f7 fc98 	bl	80005f8 <__aeabi_dmul>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	460b      	mov	r3, r1
 8008ccc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cd0:	f7f7 fada 	bl	8000288 <__aeabi_dsub>
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	460b      	mov	r3, r1
 8008cd8:	4604      	mov	r4, r0
 8008cda:	460d      	mov	r5, r1
 8008cdc:	4630      	mov	r0, r6
 8008cde:	4639      	mov	r1, r7
 8008ce0:	f7f7 fad4 	bl	800028c <__adddf3>
 8008ce4:	2000      	movs	r0, #0
 8008ce6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008cea:	4632      	mov	r2, r6
 8008cec:	463b      	mov	r3, r7
 8008cee:	f7f7 facb 	bl	8000288 <__aeabi_dsub>
 8008cf2:	4602      	mov	r2, r0
 8008cf4:	460b      	mov	r3, r1
 8008cf6:	4620      	mov	r0, r4
 8008cf8:	4629      	mov	r1, r5
 8008cfa:	f7f7 fac5 	bl	8000288 <__aeabi_dsub>
 8008cfe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008d00:	f10b 33ff 	add.w	r3, fp, #4294967295
 8008d04:	4313      	orrs	r3, r2
 8008d06:	4606      	mov	r6, r0
 8008d08:	460f      	mov	r7, r1
 8008d0a:	f040 81eb 	bne.w	80090e4 <__ieee754_pow+0x6c4>
 8008d0e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8008dc8 <__ieee754_pow+0x3a8>
 8008d12:	e9dd 4500 	ldrd	r4, r5, [sp]
 8008d16:	2400      	movs	r4, #0
 8008d18:	4622      	mov	r2, r4
 8008d1a:	462b      	mov	r3, r5
 8008d1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d20:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008d24:	f7f7 fab0 	bl	8000288 <__aeabi_dsub>
 8008d28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d2c:	f7f7 fc64 	bl	80005f8 <__aeabi_dmul>
 8008d30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d34:	4680      	mov	r8, r0
 8008d36:	4689      	mov	r9, r1
 8008d38:	4630      	mov	r0, r6
 8008d3a:	4639      	mov	r1, r7
 8008d3c:	f7f7 fc5c 	bl	80005f8 <__aeabi_dmul>
 8008d40:	4602      	mov	r2, r0
 8008d42:	460b      	mov	r3, r1
 8008d44:	4640      	mov	r0, r8
 8008d46:	4649      	mov	r1, r9
 8008d48:	f7f7 faa0 	bl	800028c <__adddf3>
 8008d4c:	4622      	mov	r2, r4
 8008d4e:	462b      	mov	r3, r5
 8008d50:	4680      	mov	r8, r0
 8008d52:	4689      	mov	r9, r1
 8008d54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d58:	f7f7 fc4e 	bl	80005f8 <__aeabi_dmul>
 8008d5c:	460b      	mov	r3, r1
 8008d5e:	4604      	mov	r4, r0
 8008d60:	460d      	mov	r5, r1
 8008d62:	4602      	mov	r2, r0
 8008d64:	4649      	mov	r1, r9
 8008d66:	4640      	mov	r0, r8
 8008d68:	e9cd 4500 	strd	r4, r5, [sp]
 8008d6c:	f7f7 fa8e 	bl	800028c <__adddf3>
 8008d70:	4b1c      	ldr	r3, [pc, #112]	; (8008de4 <__ieee754_pow+0x3c4>)
 8008d72:	4299      	cmp	r1, r3
 8008d74:	4606      	mov	r6, r0
 8008d76:	460f      	mov	r7, r1
 8008d78:	468b      	mov	fp, r1
 8008d7a:	f340 82f7 	ble.w	800936c <__ieee754_pow+0x94c>
 8008d7e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008d82:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008d86:	4303      	orrs	r3, r0
 8008d88:	f000 81ea 	beq.w	8009160 <__ieee754_pow+0x740>
 8008d8c:	a310      	add	r3, pc, #64	; (adr r3, 8008dd0 <__ieee754_pow+0x3b0>)
 8008d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d96:	f7f7 fc2f 	bl	80005f8 <__aeabi_dmul>
 8008d9a:	a30d      	add	r3, pc, #52	; (adr r3, 8008dd0 <__ieee754_pow+0x3b0>)
 8008d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da0:	e6d5      	b.n	8008b4e <__ieee754_pow+0x12e>
 8008da2:	bf00      	nop
 8008da4:	f3af 8000 	nop.w
 8008da8:	60000000 	.word	0x60000000
 8008dac:	3ff71547 	.word	0x3ff71547
 8008db0:	f85ddf44 	.word	0xf85ddf44
 8008db4:	3e54ae0b 	.word	0x3e54ae0b
 8008db8:	55555555 	.word	0x55555555
 8008dbc:	3fd55555 	.word	0x3fd55555
 8008dc0:	652b82fe 	.word	0x652b82fe
 8008dc4:	3ff71547 	.word	0x3ff71547
 8008dc8:	00000000 	.word	0x00000000
 8008dcc:	bff00000 	.word	0xbff00000
 8008dd0:	8800759c 	.word	0x8800759c
 8008dd4:	7e37e43c 	.word	0x7e37e43c
 8008dd8:	3ff00000 	.word	0x3ff00000
 8008ddc:	3fd00000 	.word	0x3fd00000
 8008de0:	3fe00000 	.word	0x3fe00000
 8008de4:	408fffff 	.word	0x408fffff
 8008de8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008dec:	f04f 0200 	mov.w	r2, #0
 8008df0:	da05      	bge.n	8008dfe <__ieee754_pow+0x3de>
 8008df2:	4bd3      	ldr	r3, [pc, #844]	; (8009140 <__ieee754_pow+0x720>)
 8008df4:	f7f7 fc00 	bl	80005f8 <__aeabi_dmul>
 8008df8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008dfc:	460c      	mov	r4, r1
 8008dfe:	1523      	asrs	r3, r4, #20
 8008e00:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008e04:	4413      	add	r3, r2
 8008e06:	9309      	str	r3, [sp, #36]	; 0x24
 8008e08:	4bce      	ldr	r3, [pc, #824]	; (8009144 <__ieee754_pow+0x724>)
 8008e0a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008e0e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008e12:	429c      	cmp	r4, r3
 8008e14:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008e18:	dd08      	ble.n	8008e2c <__ieee754_pow+0x40c>
 8008e1a:	4bcb      	ldr	r3, [pc, #812]	; (8009148 <__ieee754_pow+0x728>)
 8008e1c:	429c      	cmp	r4, r3
 8008e1e:	f340 815e 	ble.w	80090de <__ieee754_pow+0x6be>
 8008e22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e24:	3301      	adds	r3, #1
 8008e26:	9309      	str	r3, [sp, #36]	; 0x24
 8008e28:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008e2c:	f04f 0a00 	mov.w	sl, #0
 8008e30:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8008e34:	930c      	str	r3, [sp, #48]	; 0x30
 8008e36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e38:	4bc4      	ldr	r3, [pc, #784]	; (800914c <__ieee754_pow+0x72c>)
 8008e3a:	4413      	add	r3, r2
 8008e3c:	ed93 7b00 	vldr	d7, [r3]
 8008e40:	4629      	mov	r1, r5
 8008e42:	ec53 2b17 	vmov	r2, r3, d7
 8008e46:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008e4a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008e4e:	f7f7 fa1b 	bl	8000288 <__aeabi_dsub>
 8008e52:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008e56:	4606      	mov	r6, r0
 8008e58:	460f      	mov	r7, r1
 8008e5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e5e:	f7f7 fa15 	bl	800028c <__adddf3>
 8008e62:	4602      	mov	r2, r0
 8008e64:	460b      	mov	r3, r1
 8008e66:	2000      	movs	r0, #0
 8008e68:	49b9      	ldr	r1, [pc, #740]	; (8009150 <__ieee754_pow+0x730>)
 8008e6a:	f7f7 fcef 	bl	800084c <__aeabi_ddiv>
 8008e6e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008e72:	4602      	mov	r2, r0
 8008e74:	460b      	mov	r3, r1
 8008e76:	4630      	mov	r0, r6
 8008e78:	4639      	mov	r1, r7
 8008e7a:	f7f7 fbbd 	bl	80005f8 <__aeabi_dmul>
 8008e7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e82:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008e86:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	9302      	str	r3, [sp, #8]
 8008e8e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008e92:	106d      	asrs	r5, r5, #1
 8008e94:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008e98:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8008ea2:	4640      	mov	r0, r8
 8008ea4:	4649      	mov	r1, r9
 8008ea6:	4614      	mov	r4, r2
 8008ea8:	461d      	mov	r5, r3
 8008eaa:	f7f7 fba5 	bl	80005f8 <__aeabi_dmul>
 8008eae:	4602      	mov	r2, r0
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	4630      	mov	r0, r6
 8008eb4:	4639      	mov	r1, r7
 8008eb6:	f7f7 f9e7 	bl	8000288 <__aeabi_dsub>
 8008eba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008ebe:	4606      	mov	r6, r0
 8008ec0:	460f      	mov	r7, r1
 8008ec2:	4620      	mov	r0, r4
 8008ec4:	4629      	mov	r1, r5
 8008ec6:	f7f7 f9df 	bl	8000288 <__aeabi_dsub>
 8008eca:	4602      	mov	r2, r0
 8008ecc:	460b      	mov	r3, r1
 8008ece:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008ed2:	f7f7 f9d9 	bl	8000288 <__aeabi_dsub>
 8008ed6:	4642      	mov	r2, r8
 8008ed8:	464b      	mov	r3, r9
 8008eda:	f7f7 fb8d 	bl	80005f8 <__aeabi_dmul>
 8008ede:	4602      	mov	r2, r0
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	4630      	mov	r0, r6
 8008ee4:	4639      	mov	r1, r7
 8008ee6:	f7f7 f9cf 	bl	8000288 <__aeabi_dsub>
 8008eea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008eee:	f7f7 fb83 	bl	80005f8 <__aeabi_dmul>
 8008ef2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ef6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008efa:	4610      	mov	r0, r2
 8008efc:	4619      	mov	r1, r3
 8008efe:	f7f7 fb7b 	bl	80005f8 <__aeabi_dmul>
 8008f02:	a37b      	add	r3, pc, #492	; (adr r3, 80090f0 <__ieee754_pow+0x6d0>)
 8008f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f08:	4604      	mov	r4, r0
 8008f0a:	460d      	mov	r5, r1
 8008f0c:	f7f7 fb74 	bl	80005f8 <__aeabi_dmul>
 8008f10:	a379      	add	r3, pc, #484	; (adr r3, 80090f8 <__ieee754_pow+0x6d8>)
 8008f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f16:	f7f7 f9b9 	bl	800028c <__adddf3>
 8008f1a:	4622      	mov	r2, r4
 8008f1c:	462b      	mov	r3, r5
 8008f1e:	f7f7 fb6b 	bl	80005f8 <__aeabi_dmul>
 8008f22:	a377      	add	r3, pc, #476	; (adr r3, 8009100 <__ieee754_pow+0x6e0>)
 8008f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f28:	f7f7 f9b0 	bl	800028c <__adddf3>
 8008f2c:	4622      	mov	r2, r4
 8008f2e:	462b      	mov	r3, r5
 8008f30:	f7f7 fb62 	bl	80005f8 <__aeabi_dmul>
 8008f34:	a374      	add	r3, pc, #464	; (adr r3, 8009108 <__ieee754_pow+0x6e8>)
 8008f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f3a:	f7f7 f9a7 	bl	800028c <__adddf3>
 8008f3e:	4622      	mov	r2, r4
 8008f40:	462b      	mov	r3, r5
 8008f42:	f7f7 fb59 	bl	80005f8 <__aeabi_dmul>
 8008f46:	a372      	add	r3, pc, #456	; (adr r3, 8009110 <__ieee754_pow+0x6f0>)
 8008f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4c:	f7f7 f99e 	bl	800028c <__adddf3>
 8008f50:	4622      	mov	r2, r4
 8008f52:	462b      	mov	r3, r5
 8008f54:	f7f7 fb50 	bl	80005f8 <__aeabi_dmul>
 8008f58:	a36f      	add	r3, pc, #444	; (adr r3, 8009118 <__ieee754_pow+0x6f8>)
 8008f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f5e:	f7f7 f995 	bl	800028c <__adddf3>
 8008f62:	4622      	mov	r2, r4
 8008f64:	4606      	mov	r6, r0
 8008f66:	460f      	mov	r7, r1
 8008f68:	462b      	mov	r3, r5
 8008f6a:	4620      	mov	r0, r4
 8008f6c:	4629      	mov	r1, r5
 8008f6e:	f7f7 fb43 	bl	80005f8 <__aeabi_dmul>
 8008f72:	4602      	mov	r2, r0
 8008f74:	460b      	mov	r3, r1
 8008f76:	4630      	mov	r0, r6
 8008f78:	4639      	mov	r1, r7
 8008f7a:	f7f7 fb3d 	bl	80005f8 <__aeabi_dmul>
 8008f7e:	4642      	mov	r2, r8
 8008f80:	4604      	mov	r4, r0
 8008f82:	460d      	mov	r5, r1
 8008f84:	464b      	mov	r3, r9
 8008f86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f8a:	f7f7 f97f 	bl	800028c <__adddf3>
 8008f8e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008f92:	f7f7 fb31 	bl	80005f8 <__aeabi_dmul>
 8008f96:	4622      	mov	r2, r4
 8008f98:	462b      	mov	r3, r5
 8008f9a:	f7f7 f977 	bl	800028c <__adddf3>
 8008f9e:	4642      	mov	r2, r8
 8008fa0:	4606      	mov	r6, r0
 8008fa2:	460f      	mov	r7, r1
 8008fa4:	464b      	mov	r3, r9
 8008fa6:	4640      	mov	r0, r8
 8008fa8:	4649      	mov	r1, r9
 8008faa:	f7f7 fb25 	bl	80005f8 <__aeabi_dmul>
 8008fae:	2200      	movs	r2, #0
 8008fb0:	4b68      	ldr	r3, [pc, #416]	; (8009154 <__ieee754_pow+0x734>)
 8008fb2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008fb6:	f7f7 f969 	bl	800028c <__adddf3>
 8008fba:	4632      	mov	r2, r6
 8008fbc:	463b      	mov	r3, r7
 8008fbe:	f7f7 f965 	bl	800028c <__adddf3>
 8008fc2:	9802      	ldr	r0, [sp, #8]
 8008fc4:	460d      	mov	r5, r1
 8008fc6:	4604      	mov	r4, r0
 8008fc8:	4602      	mov	r2, r0
 8008fca:	460b      	mov	r3, r1
 8008fcc:	4640      	mov	r0, r8
 8008fce:	4649      	mov	r1, r9
 8008fd0:	f7f7 fb12 	bl	80005f8 <__aeabi_dmul>
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	4680      	mov	r8, r0
 8008fd8:	4689      	mov	r9, r1
 8008fda:	4b5e      	ldr	r3, [pc, #376]	; (8009154 <__ieee754_pow+0x734>)
 8008fdc:	4620      	mov	r0, r4
 8008fde:	4629      	mov	r1, r5
 8008fe0:	f7f7 f952 	bl	8000288 <__aeabi_dsub>
 8008fe4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008fe8:	f7f7 f94e 	bl	8000288 <__aeabi_dsub>
 8008fec:	4602      	mov	r2, r0
 8008fee:	460b      	mov	r3, r1
 8008ff0:	4630      	mov	r0, r6
 8008ff2:	4639      	mov	r1, r7
 8008ff4:	f7f7 f948 	bl	8000288 <__aeabi_dsub>
 8008ff8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ffc:	f7f7 fafc 	bl	80005f8 <__aeabi_dmul>
 8009000:	4622      	mov	r2, r4
 8009002:	4606      	mov	r6, r0
 8009004:	460f      	mov	r7, r1
 8009006:	462b      	mov	r3, r5
 8009008:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800900c:	f7f7 faf4 	bl	80005f8 <__aeabi_dmul>
 8009010:	4602      	mov	r2, r0
 8009012:	460b      	mov	r3, r1
 8009014:	4630      	mov	r0, r6
 8009016:	4639      	mov	r1, r7
 8009018:	f7f7 f938 	bl	800028c <__adddf3>
 800901c:	4606      	mov	r6, r0
 800901e:	460f      	mov	r7, r1
 8009020:	4602      	mov	r2, r0
 8009022:	460b      	mov	r3, r1
 8009024:	4640      	mov	r0, r8
 8009026:	4649      	mov	r1, r9
 8009028:	f7f7 f930 	bl	800028c <__adddf3>
 800902c:	9802      	ldr	r0, [sp, #8]
 800902e:	a33c      	add	r3, pc, #240	; (adr r3, 8009120 <__ieee754_pow+0x700>)
 8009030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009034:	4604      	mov	r4, r0
 8009036:	460d      	mov	r5, r1
 8009038:	f7f7 fade 	bl	80005f8 <__aeabi_dmul>
 800903c:	4642      	mov	r2, r8
 800903e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009042:	464b      	mov	r3, r9
 8009044:	4620      	mov	r0, r4
 8009046:	4629      	mov	r1, r5
 8009048:	f7f7 f91e 	bl	8000288 <__aeabi_dsub>
 800904c:	4602      	mov	r2, r0
 800904e:	460b      	mov	r3, r1
 8009050:	4630      	mov	r0, r6
 8009052:	4639      	mov	r1, r7
 8009054:	f7f7 f918 	bl	8000288 <__aeabi_dsub>
 8009058:	a333      	add	r3, pc, #204	; (adr r3, 8009128 <__ieee754_pow+0x708>)
 800905a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800905e:	f7f7 facb 	bl	80005f8 <__aeabi_dmul>
 8009062:	a333      	add	r3, pc, #204	; (adr r3, 8009130 <__ieee754_pow+0x710>)
 8009064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009068:	4606      	mov	r6, r0
 800906a:	460f      	mov	r7, r1
 800906c:	4620      	mov	r0, r4
 800906e:	4629      	mov	r1, r5
 8009070:	f7f7 fac2 	bl	80005f8 <__aeabi_dmul>
 8009074:	4602      	mov	r2, r0
 8009076:	460b      	mov	r3, r1
 8009078:	4630      	mov	r0, r6
 800907a:	4639      	mov	r1, r7
 800907c:	f7f7 f906 	bl	800028c <__adddf3>
 8009080:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009082:	4b35      	ldr	r3, [pc, #212]	; (8009158 <__ieee754_pow+0x738>)
 8009084:	4413      	add	r3, r2
 8009086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800908a:	f7f7 f8ff 	bl	800028c <__adddf3>
 800908e:	4604      	mov	r4, r0
 8009090:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009092:	460d      	mov	r5, r1
 8009094:	f7f7 fa46 	bl	8000524 <__aeabi_i2d>
 8009098:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800909a:	4b30      	ldr	r3, [pc, #192]	; (800915c <__ieee754_pow+0x73c>)
 800909c:	4413      	add	r3, r2
 800909e:	e9d3 8900 	ldrd	r8, r9, [r3]
 80090a2:	4606      	mov	r6, r0
 80090a4:	460f      	mov	r7, r1
 80090a6:	4622      	mov	r2, r4
 80090a8:	462b      	mov	r3, r5
 80090aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80090ae:	f7f7 f8ed 	bl	800028c <__adddf3>
 80090b2:	4642      	mov	r2, r8
 80090b4:	464b      	mov	r3, r9
 80090b6:	f7f7 f8e9 	bl	800028c <__adddf3>
 80090ba:	4632      	mov	r2, r6
 80090bc:	463b      	mov	r3, r7
 80090be:	f7f7 f8e5 	bl	800028c <__adddf3>
 80090c2:	9802      	ldr	r0, [sp, #8]
 80090c4:	4632      	mov	r2, r6
 80090c6:	463b      	mov	r3, r7
 80090c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80090cc:	f7f7 f8dc 	bl	8000288 <__aeabi_dsub>
 80090d0:	4642      	mov	r2, r8
 80090d2:	464b      	mov	r3, r9
 80090d4:	f7f7 f8d8 	bl	8000288 <__aeabi_dsub>
 80090d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80090dc:	e607      	b.n	8008cee <__ieee754_pow+0x2ce>
 80090de:	f04f 0a01 	mov.w	sl, #1
 80090e2:	e6a5      	b.n	8008e30 <__ieee754_pow+0x410>
 80090e4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8009138 <__ieee754_pow+0x718>
 80090e8:	e613      	b.n	8008d12 <__ieee754_pow+0x2f2>
 80090ea:	bf00      	nop
 80090ec:	f3af 8000 	nop.w
 80090f0:	4a454eef 	.word	0x4a454eef
 80090f4:	3fca7e28 	.word	0x3fca7e28
 80090f8:	93c9db65 	.word	0x93c9db65
 80090fc:	3fcd864a 	.word	0x3fcd864a
 8009100:	a91d4101 	.word	0xa91d4101
 8009104:	3fd17460 	.word	0x3fd17460
 8009108:	518f264d 	.word	0x518f264d
 800910c:	3fd55555 	.word	0x3fd55555
 8009110:	db6fabff 	.word	0xdb6fabff
 8009114:	3fdb6db6 	.word	0x3fdb6db6
 8009118:	33333303 	.word	0x33333303
 800911c:	3fe33333 	.word	0x3fe33333
 8009120:	e0000000 	.word	0xe0000000
 8009124:	3feec709 	.word	0x3feec709
 8009128:	dc3a03fd 	.word	0xdc3a03fd
 800912c:	3feec709 	.word	0x3feec709
 8009130:	145b01f5 	.word	0x145b01f5
 8009134:	be3e2fe0 	.word	0xbe3e2fe0
 8009138:	00000000 	.word	0x00000000
 800913c:	3ff00000 	.word	0x3ff00000
 8009140:	43400000 	.word	0x43400000
 8009144:	0003988e 	.word	0x0003988e
 8009148:	000bb679 	.word	0x000bb679
 800914c:	08009e58 	.word	0x08009e58
 8009150:	3ff00000 	.word	0x3ff00000
 8009154:	40080000 	.word	0x40080000
 8009158:	08009e78 	.word	0x08009e78
 800915c:	08009e68 	.word	0x08009e68
 8009160:	a3b4      	add	r3, pc, #720	; (adr r3, 8009434 <__ieee754_pow+0xa14>)
 8009162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009166:	4640      	mov	r0, r8
 8009168:	4649      	mov	r1, r9
 800916a:	f7f7 f88f 	bl	800028c <__adddf3>
 800916e:	4622      	mov	r2, r4
 8009170:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009174:	462b      	mov	r3, r5
 8009176:	4630      	mov	r0, r6
 8009178:	4639      	mov	r1, r7
 800917a:	f7f7 f885 	bl	8000288 <__aeabi_dsub>
 800917e:	4602      	mov	r2, r0
 8009180:	460b      	mov	r3, r1
 8009182:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009186:	f7f7 fcc7 	bl	8000b18 <__aeabi_dcmpgt>
 800918a:	2800      	cmp	r0, #0
 800918c:	f47f adfe 	bne.w	8008d8c <__ieee754_pow+0x36c>
 8009190:	4aa3      	ldr	r2, [pc, #652]	; (8009420 <__ieee754_pow+0xa00>)
 8009192:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009196:	4293      	cmp	r3, r2
 8009198:	f340 810a 	ble.w	80093b0 <__ieee754_pow+0x990>
 800919c:	151b      	asrs	r3, r3, #20
 800919e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80091a2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80091a6:	fa4a f303 	asr.w	r3, sl, r3
 80091aa:	445b      	add	r3, fp
 80091ac:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80091b0:	4e9c      	ldr	r6, [pc, #624]	; (8009424 <__ieee754_pow+0xa04>)
 80091b2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80091b6:	4116      	asrs	r6, r2
 80091b8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80091bc:	2000      	movs	r0, #0
 80091be:	ea23 0106 	bic.w	r1, r3, r6
 80091c2:	f1c2 0214 	rsb	r2, r2, #20
 80091c6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80091ca:	fa4a fa02 	asr.w	sl, sl, r2
 80091ce:	f1bb 0f00 	cmp.w	fp, #0
 80091d2:	4602      	mov	r2, r0
 80091d4:	460b      	mov	r3, r1
 80091d6:	4620      	mov	r0, r4
 80091d8:	4629      	mov	r1, r5
 80091da:	bfb8      	it	lt
 80091dc:	f1ca 0a00 	rsblt	sl, sl, #0
 80091e0:	f7f7 f852 	bl	8000288 <__aeabi_dsub>
 80091e4:	e9cd 0100 	strd	r0, r1, [sp]
 80091e8:	4642      	mov	r2, r8
 80091ea:	464b      	mov	r3, r9
 80091ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80091f0:	f7f7 f84c 	bl	800028c <__adddf3>
 80091f4:	2000      	movs	r0, #0
 80091f6:	a378      	add	r3, pc, #480	; (adr r3, 80093d8 <__ieee754_pow+0x9b8>)
 80091f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091fc:	4604      	mov	r4, r0
 80091fe:	460d      	mov	r5, r1
 8009200:	f7f7 f9fa 	bl	80005f8 <__aeabi_dmul>
 8009204:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009208:	4606      	mov	r6, r0
 800920a:	460f      	mov	r7, r1
 800920c:	4620      	mov	r0, r4
 800920e:	4629      	mov	r1, r5
 8009210:	f7f7 f83a 	bl	8000288 <__aeabi_dsub>
 8009214:	4602      	mov	r2, r0
 8009216:	460b      	mov	r3, r1
 8009218:	4640      	mov	r0, r8
 800921a:	4649      	mov	r1, r9
 800921c:	f7f7 f834 	bl	8000288 <__aeabi_dsub>
 8009220:	a36f      	add	r3, pc, #444	; (adr r3, 80093e0 <__ieee754_pow+0x9c0>)
 8009222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009226:	f7f7 f9e7 	bl	80005f8 <__aeabi_dmul>
 800922a:	a36f      	add	r3, pc, #444	; (adr r3, 80093e8 <__ieee754_pow+0x9c8>)
 800922c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009230:	4680      	mov	r8, r0
 8009232:	4689      	mov	r9, r1
 8009234:	4620      	mov	r0, r4
 8009236:	4629      	mov	r1, r5
 8009238:	f7f7 f9de 	bl	80005f8 <__aeabi_dmul>
 800923c:	4602      	mov	r2, r0
 800923e:	460b      	mov	r3, r1
 8009240:	4640      	mov	r0, r8
 8009242:	4649      	mov	r1, r9
 8009244:	f7f7 f822 	bl	800028c <__adddf3>
 8009248:	4604      	mov	r4, r0
 800924a:	460d      	mov	r5, r1
 800924c:	4602      	mov	r2, r0
 800924e:	460b      	mov	r3, r1
 8009250:	4630      	mov	r0, r6
 8009252:	4639      	mov	r1, r7
 8009254:	f7f7 f81a 	bl	800028c <__adddf3>
 8009258:	4632      	mov	r2, r6
 800925a:	463b      	mov	r3, r7
 800925c:	4680      	mov	r8, r0
 800925e:	4689      	mov	r9, r1
 8009260:	f7f7 f812 	bl	8000288 <__aeabi_dsub>
 8009264:	4602      	mov	r2, r0
 8009266:	460b      	mov	r3, r1
 8009268:	4620      	mov	r0, r4
 800926a:	4629      	mov	r1, r5
 800926c:	f7f7 f80c 	bl	8000288 <__aeabi_dsub>
 8009270:	4642      	mov	r2, r8
 8009272:	4606      	mov	r6, r0
 8009274:	460f      	mov	r7, r1
 8009276:	464b      	mov	r3, r9
 8009278:	4640      	mov	r0, r8
 800927a:	4649      	mov	r1, r9
 800927c:	f7f7 f9bc 	bl	80005f8 <__aeabi_dmul>
 8009280:	a35b      	add	r3, pc, #364	; (adr r3, 80093f0 <__ieee754_pow+0x9d0>)
 8009282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009286:	4604      	mov	r4, r0
 8009288:	460d      	mov	r5, r1
 800928a:	f7f7 f9b5 	bl	80005f8 <__aeabi_dmul>
 800928e:	a35a      	add	r3, pc, #360	; (adr r3, 80093f8 <__ieee754_pow+0x9d8>)
 8009290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009294:	f7f6 fff8 	bl	8000288 <__aeabi_dsub>
 8009298:	4622      	mov	r2, r4
 800929a:	462b      	mov	r3, r5
 800929c:	f7f7 f9ac 	bl	80005f8 <__aeabi_dmul>
 80092a0:	a357      	add	r3, pc, #348	; (adr r3, 8009400 <__ieee754_pow+0x9e0>)
 80092a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a6:	f7f6 fff1 	bl	800028c <__adddf3>
 80092aa:	4622      	mov	r2, r4
 80092ac:	462b      	mov	r3, r5
 80092ae:	f7f7 f9a3 	bl	80005f8 <__aeabi_dmul>
 80092b2:	a355      	add	r3, pc, #340	; (adr r3, 8009408 <__ieee754_pow+0x9e8>)
 80092b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b8:	f7f6 ffe6 	bl	8000288 <__aeabi_dsub>
 80092bc:	4622      	mov	r2, r4
 80092be:	462b      	mov	r3, r5
 80092c0:	f7f7 f99a 	bl	80005f8 <__aeabi_dmul>
 80092c4:	a352      	add	r3, pc, #328	; (adr r3, 8009410 <__ieee754_pow+0x9f0>)
 80092c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ca:	f7f6 ffdf 	bl	800028c <__adddf3>
 80092ce:	4622      	mov	r2, r4
 80092d0:	462b      	mov	r3, r5
 80092d2:	f7f7 f991 	bl	80005f8 <__aeabi_dmul>
 80092d6:	4602      	mov	r2, r0
 80092d8:	460b      	mov	r3, r1
 80092da:	4640      	mov	r0, r8
 80092dc:	4649      	mov	r1, r9
 80092de:	f7f6 ffd3 	bl	8000288 <__aeabi_dsub>
 80092e2:	4604      	mov	r4, r0
 80092e4:	460d      	mov	r5, r1
 80092e6:	4602      	mov	r2, r0
 80092e8:	460b      	mov	r3, r1
 80092ea:	4640      	mov	r0, r8
 80092ec:	4649      	mov	r1, r9
 80092ee:	f7f7 f983 	bl	80005f8 <__aeabi_dmul>
 80092f2:	2200      	movs	r2, #0
 80092f4:	e9cd 0100 	strd	r0, r1, [sp]
 80092f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80092fc:	4620      	mov	r0, r4
 80092fe:	4629      	mov	r1, r5
 8009300:	f7f6 ffc2 	bl	8000288 <__aeabi_dsub>
 8009304:	4602      	mov	r2, r0
 8009306:	460b      	mov	r3, r1
 8009308:	e9dd 0100 	ldrd	r0, r1, [sp]
 800930c:	f7f7 fa9e 	bl	800084c <__aeabi_ddiv>
 8009310:	4632      	mov	r2, r6
 8009312:	4604      	mov	r4, r0
 8009314:	460d      	mov	r5, r1
 8009316:	463b      	mov	r3, r7
 8009318:	4640      	mov	r0, r8
 800931a:	4649      	mov	r1, r9
 800931c:	f7f7 f96c 	bl	80005f8 <__aeabi_dmul>
 8009320:	4632      	mov	r2, r6
 8009322:	463b      	mov	r3, r7
 8009324:	f7f6 ffb2 	bl	800028c <__adddf3>
 8009328:	4602      	mov	r2, r0
 800932a:	460b      	mov	r3, r1
 800932c:	4620      	mov	r0, r4
 800932e:	4629      	mov	r1, r5
 8009330:	f7f6 ffaa 	bl	8000288 <__aeabi_dsub>
 8009334:	4642      	mov	r2, r8
 8009336:	464b      	mov	r3, r9
 8009338:	f7f6 ffa6 	bl	8000288 <__aeabi_dsub>
 800933c:	4602      	mov	r2, r0
 800933e:	460b      	mov	r3, r1
 8009340:	2000      	movs	r0, #0
 8009342:	4939      	ldr	r1, [pc, #228]	; (8009428 <__ieee754_pow+0xa08>)
 8009344:	f7f6 ffa0 	bl	8000288 <__aeabi_dsub>
 8009348:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800934c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009350:	4602      	mov	r2, r0
 8009352:	460b      	mov	r3, r1
 8009354:	da2f      	bge.n	80093b6 <__ieee754_pow+0x996>
 8009356:	4650      	mov	r0, sl
 8009358:	ec43 2b10 	vmov	d0, r2, r3
 800935c:	f000 fb60 	bl	8009a20 <scalbn>
 8009360:	ec51 0b10 	vmov	r0, r1, d0
 8009364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009368:	f7ff bbf1 	b.w	8008b4e <__ieee754_pow+0x12e>
 800936c:	4b2f      	ldr	r3, [pc, #188]	; (800942c <__ieee754_pow+0xa0c>)
 800936e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009372:	429e      	cmp	r6, r3
 8009374:	f77f af0c 	ble.w	8009190 <__ieee754_pow+0x770>
 8009378:	4b2d      	ldr	r3, [pc, #180]	; (8009430 <__ieee754_pow+0xa10>)
 800937a:	440b      	add	r3, r1
 800937c:	4303      	orrs	r3, r0
 800937e:	d00b      	beq.n	8009398 <__ieee754_pow+0x978>
 8009380:	a325      	add	r3, pc, #148	; (adr r3, 8009418 <__ieee754_pow+0x9f8>)
 8009382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009386:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800938a:	f7f7 f935 	bl	80005f8 <__aeabi_dmul>
 800938e:	a322      	add	r3, pc, #136	; (adr r3, 8009418 <__ieee754_pow+0x9f8>)
 8009390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009394:	f7ff bbdb 	b.w	8008b4e <__ieee754_pow+0x12e>
 8009398:	4622      	mov	r2, r4
 800939a:	462b      	mov	r3, r5
 800939c:	f7f6 ff74 	bl	8000288 <__aeabi_dsub>
 80093a0:	4642      	mov	r2, r8
 80093a2:	464b      	mov	r3, r9
 80093a4:	f7f7 fbae 	bl	8000b04 <__aeabi_dcmpge>
 80093a8:	2800      	cmp	r0, #0
 80093aa:	f43f aef1 	beq.w	8009190 <__ieee754_pow+0x770>
 80093ae:	e7e7      	b.n	8009380 <__ieee754_pow+0x960>
 80093b0:	f04f 0a00 	mov.w	sl, #0
 80093b4:	e718      	b.n	80091e8 <__ieee754_pow+0x7c8>
 80093b6:	4621      	mov	r1, r4
 80093b8:	e7d4      	b.n	8009364 <__ieee754_pow+0x944>
 80093ba:	2000      	movs	r0, #0
 80093bc:	491a      	ldr	r1, [pc, #104]	; (8009428 <__ieee754_pow+0xa08>)
 80093be:	f7ff bb8f 	b.w	8008ae0 <__ieee754_pow+0xc0>
 80093c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80093c6:	f7ff bb8b 	b.w	8008ae0 <__ieee754_pow+0xc0>
 80093ca:	4630      	mov	r0, r6
 80093cc:	4639      	mov	r1, r7
 80093ce:	f7ff bb87 	b.w	8008ae0 <__ieee754_pow+0xc0>
 80093d2:	4693      	mov	fp, r2
 80093d4:	f7ff bb98 	b.w	8008b08 <__ieee754_pow+0xe8>
 80093d8:	00000000 	.word	0x00000000
 80093dc:	3fe62e43 	.word	0x3fe62e43
 80093e0:	fefa39ef 	.word	0xfefa39ef
 80093e4:	3fe62e42 	.word	0x3fe62e42
 80093e8:	0ca86c39 	.word	0x0ca86c39
 80093ec:	be205c61 	.word	0xbe205c61
 80093f0:	72bea4d0 	.word	0x72bea4d0
 80093f4:	3e663769 	.word	0x3e663769
 80093f8:	c5d26bf1 	.word	0xc5d26bf1
 80093fc:	3ebbbd41 	.word	0x3ebbbd41
 8009400:	af25de2c 	.word	0xaf25de2c
 8009404:	3f11566a 	.word	0x3f11566a
 8009408:	16bebd93 	.word	0x16bebd93
 800940c:	3f66c16c 	.word	0x3f66c16c
 8009410:	5555553e 	.word	0x5555553e
 8009414:	3fc55555 	.word	0x3fc55555
 8009418:	c2f8f359 	.word	0xc2f8f359
 800941c:	01a56e1f 	.word	0x01a56e1f
 8009420:	3fe00000 	.word	0x3fe00000
 8009424:	000fffff 	.word	0x000fffff
 8009428:	3ff00000 	.word	0x3ff00000
 800942c:	4090cbff 	.word	0x4090cbff
 8009430:	3f6f3400 	.word	0x3f6f3400
 8009434:	652b82fe 	.word	0x652b82fe
 8009438:	3c971547 	.word	0x3c971547

0800943c <__ieee754_sqrt>:
 800943c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009440:	4955      	ldr	r1, [pc, #340]	; (8009598 <__ieee754_sqrt+0x15c>)
 8009442:	ec55 4b10 	vmov	r4, r5, d0
 8009446:	43a9      	bics	r1, r5
 8009448:	462b      	mov	r3, r5
 800944a:	462a      	mov	r2, r5
 800944c:	d112      	bne.n	8009474 <__ieee754_sqrt+0x38>
 800944e:	ee10 2a10 	vmov	r2, s0
 8009452:	ee10 0a10 	vmov	r0, s0
 8009456:	4629      	mov	r1, r5
 8009458:	f7f7 f8ce 	bl	80005f8 <__aeabi_dmul>
 800945c:	4602      	mov	r2, r0
 800945e:	460b      	mov	r3, r1
 8009460:	4620      	mov	r0, r4
 8009462:	4629      	mov	r1, r5
 8009464:	f7f6 ff12 	bl	800028c <__adddf3>
 8009468:	4604      	mov	r4, r0
 800946a:	460d      	mov	r5, r1
 800946c:	ec45 4b10 	vmov	d0, r4, r5
 8009470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009474:	2d00      	cmp	r5, #0
 8009476:	ee10 0a10 	vmov	r0, s0
 800947a:	4621      	mov	r1, r4
 800947c:	dc0f      	bgt.n	800949e <__ieee754_sqrt+0x62>
 800947e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009482:	4330      	orrs	r0, r6
 8009484:	d0f2      	beq.n	800946c <__ieee754_sqrt+0x30>
 8009486:	b155      	cbz	r5, 800949e <__ieee754_sqrt+0x62>
 8009488:	ee10 2a10 	vmov	r2, s0
 800948c:	4620      	mov	r0, r4
 800948e:	4629      	mov	r1, r5
 8009490:	f7f6 fefa 	bl	8000288 <__aeabi_dsub>
 8009494:	4602      	mov	r2, r0
 8009496:	460b      	mov	r3, r1
 8009498:	f7f7 f9d8 	bl	800084c <__aeabi_ddiv>
 800949c:	e7e4      	b.n	8009468 <__ieee754_sqrt+0x2c>
 800949e:	151b      	asrs	r3, r3, #20
 80094a0:	d073      	beq.n	800958a <__ieee754_sqrt+0x14e>
 80094a2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80094a6:	07dd      	lsls	r5, r3, #31
 80094a8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80094ac:	bf48      	it	mi
 80094ae:	0fc8      	lsrmi	r0, r1, #31
 80094b0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80094b4:	bf44      	itt	mi
 80094b6:	0049      	lslmi	r1, r1, #1
 80094b8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80094bc:	2500      	movs	r5, #0
 80094be:	1058      	asrs	r0, r3, #1
 80094c0:	0fcb      	lsrs	r3, r1, #31
 80094c2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80094c6:	0049      	lsls	r1, r1, #1
 80094c8:	2316      	movs	r3, #22
 80094ca:	462c      	mov	r4, r5
 80094cc:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80094d0:	19a7      	adds	r7, r4, r6
 80094d2:	4297      	cmp	r7, r2
 80094d4:	bfde      	ittt	le
 80094d6:	19bc      	addle	r4, r7, r6
 80094d8:	1bd2      	suble	r2, r2, r7
 80094da:	19ad      	addle	r5, r5, r6
 80094dc:	0fcf      	lsrs	r7, r1, #31
 80094de:	3b01      	subs	r3, #1
 80094e0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80094e4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80094e8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80094ec:	d1f0      	bne.n	80094d0 <__ieee754_sqrt+0x94>
 80094ee:	f04f 0c20 	mov.w	ip, #32
 80094f2:	469e      	mov	lr, r3
 80094f4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80094f8:	42a2      	cmp	r2, r4
 80094fa:	eb06 070e 	add.w	r7, r6, lr
 80094fe:	dc02      	bgt.n	8009506 <__ieee754_sqrt+0xca>
 8009500:	d112      	bne.n	8009528 <__ieee754_sqrt+0xec>
 8009502:	428f      	cmp	r7, r1
 8009504:	d810      	bhi.n	8009528 <__ieee754_sqrt+0xec>
 8009506:	2f00      	cmp	r7, #0
 8009508:	eb07 0e06 	add.w	lr, r7, r6
 800950c:	da42      	bge.n	8009594 <__ieee754_sqrt+0x158>
 800950e:	f1be 0f00 	cmp.w	lr, #0
 8009512:	db3f      	blt.n	8009594 <__ieee754_sqrt+0x158>
 8009514:	f104 0801 	add.w	r8, r4, #1
 8009518:	1b12      	subs	r2, r2, r4
 800951a:	428f      	cmp	r7, r1
 800951c:	bf88      	it	hi
 800951e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8009522:	1bc9      	subs	r1, r1, r7
 8009524:	4433      	add	r3, r6
 8009526:	4644      	mov	r4, r8
 8009528:	0052      	lsls	r2, r2, #1
 800952a:	f1bc 0c01 	subs.w	ip, ip, #1
 800952e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8009532:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009536:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800953a:	d1dd      	bne.n	80094f8 <__ieee754_sqrt+0xbc>
 800953c:	430a      	orrs	r2, r1
 800953e:	d006      	beq.n	800954e <__ieee754_sqrt+0x112>
 8009540:	1c5c      	adds	r4, r3, #1
 8009542:	bf13      	iteet	ne
 8009544:	3301      	addne	r3, #1
 8009546:	3501      	addeq	r5, #1
 8009548:	4663      	moveq	r3, ip
 800954a:	f023 0301 	bicne.w	r3, r3, #1
 800954e:	106a      	asrs	r2, r5, #1
 8009550:	085b      	lsrs	r3, r3, #1
 8009552:	07e9      	lsls	r1, r5, #31
 8009554:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8009558:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800955c:	bf48      	it	mi
 800955e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8009562:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8009566:	461c      	mov	r4, r3
 8009568:	e780      	b.n	800946c <__ieee754_sqrt+0x30>
 800956a:	0aca      	lsrs	r2, r1, #11
 800956c:	3815      	subs	r0, #21
 800956e:	0549      	lsls	r1, r1, #21
 8009570:	2a00      	cmp	r2, #0
 8009572:	d0fa      	beq.n	800956a <__ieee754_sqrt+0x12e>
 8009574:	02d6      	lsls	r6, r2, #11
 8009576:	d50a      	bpl.n	800958e <__ieee754_sqrt+0x152>
 8009578:	f1c3 0420 	rsb	r4, r3, #32
 800957c:	fa21 f404 	lsr.w	r4, r1, r4
 8009580:	1e5d      	subs	r5, r3, #1
 8009582:	4099      	lsls	r1, r3
 8009584:	4322      	orrs	r2, r4
 8009586:	1b43      	subs	r3, r0, r5
 8009588:	e78b      	b.n	80094a2 <__ieee754_sqrt+0x66>
 800958a:	4618      	mov	r0, r3
 800958c:	e7f0      	b.n	8009570 <__ieee754_sqrt+0x134>
 800958e:	0052      	lsls	r2, r2, #1
 8009590:	3301      	adds	r3, #1
 8009592:	e7ef      	b.n	8009574 <__ieee754_sqrt+0x138>
 8009594:	46a0      	mov	r8, r4
 8009596:	e7bf      	b.n	8009518 <__ieee754_sqrt+0xdc>
 8009598:	7ff00000 	.word	0x7ff00000
 800959c:	00000000 	.word	0x00000000

080095a0 <atan>:
 80095a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095a4:	ec55 4b10 	vmov	r4, r5, d0
 80095a8:	4bc3      	ldr	r3, [pc, #780]	; (80098b8 <atan+0x318>)
 80095aa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80095ae:	429e      	cmp	r6, r3
 80095b0:	46ab      	mov	fp, r5
 80095b2:	dd18      	ble.n	80095e6 <atan+0x46>
 80095b4:	4bc1      	ldr	r3, [pc, #772]	; (80098bc <atan+0x31c>)
 80095b6:	429e      	cmp	r6, r3
 80095b8:	dc01      	bgt.n	80095be <atan+0x1e>
 80095ba:	d109      	bne.n	80095d0 <atan+0x30>
 80095bc:	b144      	cbz	r4, 80095d0 <atan+0x30>
 80095be:	4622      	mov	r2, r4
 80095c0:	462b      	mov	r3, r5
 80095c2:	4620      	mov	r0, r4
 80095c4:	4629      	mov	r1, r5
 80095c6:	f7f6 fe61 	bl	800028c <__adddf3>
 80095ca:	4604      	mov	r4, r0
 80095cc:	460d      	mov	r5, r1
 80095ce:	e006      	b.n	80095de <atan+0x3e>
 80095d0:	f1bb 0f00 	cmp.w	fp, #0
 80095d4:	f340 8131 	ble.w	800983a <atan+0x29a>
 80095d8:	a59b      	add	r5, pc, #620	; (adr r5, 8009848 <atan+0x2a8>)
 80095da:	e9d5 4500 	ldrd	r4, r5, [r5]
 80095de:	ec45 4b10 	vmov	d0, r4, r5
 80095e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095e6:	4bb6      	ldr	r3, [pc, #728]	; (80098c0 <atan+0x320>)
 80095e8:	429e      	cmp	r6, r3
 80095ea:	dc14      	bgt.n	8009616 <atan+0x76>
 80095ec:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80095f0:	429e      	cmp	r6, r3
 80095f2:	dc0d      	bgt.n	8009610 <atan+0x70>
 80095f4:	a396      	add	r3, pc, #600	; (adr r3, 8009850 <atan+0x2b0>)
 80095f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095fa:	ee10 0a10 	vmov	r0, s0
 80095fe:	4629      	mov	r1, r5
 8009600:	f7f6 fe44 	bl	800028c <__adddf3>
 8009604:	2200      	movs	r2, #0
 8009606:	4baf      	ldr	r3, [pc, #700]	; (80098c4 <atan+0x324>)
 8009608:	f7f7 fa86 	bl	8000b18 <__aeabi_dcmpgt>
 800960c:	2800      	cmp	r0, #0
 800960e:	d1e6      	bne.n	80095de <atan+0x3e>
 8009610:	f04f 3aff 	mov.w	sl, #4294967295
 8009614:	e02b      	b.n	800966e <atan+0xce>
 8009616:	f000 f963 	bl	80098e0 <fabs>
 800961a:	4bab      	ldr	r3, [pc, #684]	; (80098c8 <atan+0x328>)
 800961c:	429e      	cmp	r6, r3
 800961e:	ec55 4b10 	vmov	r4, r5, d0
 8009622:	f300 80bf 	bgt.w	80097a4 <atan+0x204>
 8009626:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800962a:	429e      	cmp	r6, r3
 800962c:	f300 80a0 	bgt.w	8009770 <atan+0x1d0>
 8009630:	ee10 2a10 	vmov	r2, s0
 8009634:	ee10 0a10 	vmov	r0, s0
 8009638:	462b      	mov	r3, r5
 800963a:	4629      	mov	r1, r5
 800963c:	f7f6 fe26 	bl	800028c <__adddf3>
 8009640:	2200      	movs	r2, #0
 8009642:	4ba0      	ldr	r3, [pc, #640]	; (80098c4 <atan+0x324>)
 8009644:	f7f6 fe20 	bl	8000288 <__aeabi_dsub>
 8009648:	2200      	movs	r2, #0
 800964a:	4606      	mov	r6, r0
 800964c:	460f      	mov	r7, r1
 800964e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009652:	4620      	mov	r0, r4
 8009654:	4629      	mov	r1, r5
 8009656:	f7f6 fe19 	bl	800028c <__adddf3>
 800965a:	4602      	mov	r2, r0
 800965c:	460b      	mov	r3, r1
 800965e:	4630      	mov	r0, r6
 8009660:	4639      	mov	r1, r7
 8009662:	f7f7 f8f3 	bl	800084c <__aeabi_ddiv>
 8009666:	f04f 0a00 	mov.w	sl, #0
 800966a:	4604      	mov	r4, r0
 800966c:	460d      	mov	r5, r1
 800966e:	4622      	mov	r2, r4
 8009670:	462b      	mov	r3, r5
 8009672:	4620      	mov	r0, r4
 8009674:	4629      	mov	r1, r5
 8009676:	f7f6 ffbf 	bl	80005f8 <__aeabi_dmul>
 800967a:	4602      	mov	r2, r0
 800967c:	460b      	mov	r3, r1
 800967e:	4680      	mov	r8, r0
 8009680:	4689      	mov	r9, r1
 8009682:	f7f6 ffb9 	bl	80005f8 <__aeabi_dmul>
 8009686:	a374      	add	r3, pc, #464	; (adr r3, 8009858 <atan+0x2b8>)
 8009688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800968c:	4606      	mov	r6, r0
 800968e:	460f      	mov	r7, r1
 8009690:	f7f6 ffb2 	bl	80005f8 <__aeabi_dmul>
 8009694:	a372      	add	r3, pc, #456	; (adr r3, 8009860 <atan+0x2c0>)
 8009696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800969a:	f7f6 fdf7 	bl	800028c <__adddf3>
 800969e:	4632      	mov	r2, r6
 80096a0:	463b      	mov	r3, r7
 80096a2:	f7f6 ffa9 	bl	80005f8 <__aeabi_dmul>
 80096a6:	a370      	add	r3, pc, #448	; (adr r3, 8009868 <atan+0x2c8>)
 80096a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ac:	f7f6 fdee 	bl	800028c <__adddf3>
 80096b0:	4632      	mov	r2, r6
 80096b2:	463b      	mov	r3, r7
 80096b4:	f7f6 ffa0 	bl	80005f8 <__aeabi_dmul>
 80096b8:	a36d      	add	r3, pc, #436	; (adr r3, 8009870 <atan+0x2d0>)
 80096ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096be:	f7f6 fde5 	bl	800028c <__adddf3>
 80096c2:	4632      	mov	r2, r6
 80096c4:	463b      	mov	r3, r7
 80096c6:	f7f6 ff97 	bl	80005f8 <__aeabi_dmul>
 80096ca:	a36b      	add	r3, pc, #428	; (adr r3, 8009878 <atan+0x2d8>)
 80096cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d0:	f7f6 fddc 	bl	800028c <__adddf3>
 80096d4:	4632      	mov	r2, r6
 80096d6:	463b      	mov	r3, r7
 80096d8:	f7f6 ff8e 	bl	80005f8 <__aeabi_dmul>
 80096dc:	a368      	add	r3, pc, #416	; (adr r3, 8009880 <atan+0x2e0>)
 80096de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e2:	f7f6 fdd3 	bl	800028c <__adddf3>
 80096e6:	4642      	mov	r2, r8
 80096e8:	464b      	mov	r3, r9
 80096ea:	f7f6 ff85 	bl	80005f8 <__aeabi_dmul>
 80096ee:	a366      	add	r3, pc, #408	; (adr r3, 8009888 <atan+0x2e8>)
 80096f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f4:	4680      	mov	r8, r0
 80096f6:	4689      	mov	r9, r1
 80096f8:	4630      	mov	r0, r6
 80096fa:	4639      	mov	r1, r7
 80096fc:	f7f6 ff7c 	bl	80005f8 <__aeabi_dmul>
 8009700:	a363      	add	r3, pc, #396	; (adr r3, 8009890 <atan+0x2f0>)
 8009702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009706:	f7f6 fdbf 	bl	8000288 <__aeabi_dsub>
 800970a:	4632      	mov	r2, r6
 800970c:	463b      	mov	r3, r7
 800970e:	f7f6 ff73 	bl	80005f8 <__aeabi_dmul>
 8009712:	a361      	add	r3, pc, #388	; (adr r3, 8009898 <atan+0x2f8>)
 8009714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009718:	f7f6 fdb6 	bl	8000288 <__aeabi_dsub>
 800971c:	4632      	mov	r2, r6
 800971e:	463b      	mov	r3, r7
 8009720:	f7f6 ff6a 	bl	80005f8 <__aeabi_dmul>
 8009724:	a35e      	add	r3, pc, #376	; (adr r3, 80098a0 <atan+0x300>)
 8009726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800972a:	f7f6 fdad 	bl	8000288 <__aeabi_dsub>
 800972e:	4632      	mov	r2, r6
 8009730:	463b      	mov	r3, r7
 8009732:	f7f6 ff61 	bl	80005f8 <__aeabi_dmul>
 8009736:	a35c      	add	r3, pc, #368	; (adr r3, 80098a8 <atan+0x308>)
 8009738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800973c:	f7f6 fda4 	bl	8000288 <__aeabi_dsub>
 8009740:	4632      	mov	r2, r6
 8009742:	463b      	mov	r3, r7
 8009744:	f7f6 ff58 	bl	80005f8 <__aeabi_dmul>
 8009748:	4602      	mov	r2, r0
 800974a:	460b      	mov	r3, r1
 800974c:	4640      	mov	r0, r8
 800974e:	4649      	mov	r1, r9
 8009750:	f7f6 fd9c 	bl	800028c <__adddf3>
 8009754:	4622      	mov	r2, r4
 8009756:	462b      	mov	r3, r5
 8009758:	f7f6 ff4e 	bl	80005f8 <__aeabi_dmul>
 800975c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009760:	4602      	mov	r2, r0
 8009762:	460b      	mov	r3, r1
 8009764:	d14b      	bne.n	80097fe <atan+0x25e>
 8009766:	4620      	mov	r0, r4
 8009768:	4629      	mov	r1, r5
 800976a:	f7f6 fd8d 	bl	8000288 <__aeabi_dsub>
 800976e:	e72c      	b.n	80095ca <atan+0x2a>
 8009770:	ee10 0a10 	vmov	r0, s0
 8009774:	2200      	movs	r2, #0
 8009776:	4b53      	ldr	r3, [pc, #332]	; (80098c4 <atan+0x324>)
 8009778:	4629      	mov	r1, r5
 800977a:	f7f6 fd85 	bl	8000288 <__aeabi_dsub>
 800977e:	2200      	movs	r2, #0
 8009780:	4606      	mov	r6, r0
 8009782:	460f      	mov	r7, r1
 8009784:	4b4f      	ldr	r3, [pc, #316]	; (80098c4 <atan+0x324>)
 8009786:	4620      	mov	r0, r4
 8009788:	4629      	mov	r1, r5
 800978a:	f7f6 fd7f 	bl	800028c <__adddf3>
 800978e:	4602      	mov	r2, r0
 8009790:	460b      	mov	r3, r1
 8009792:	4630      	mov	r0, r6
 8009794:	4639      	mov	r1, r7
 8009796:	f7f7 f859 	bl	800084c <__aeabi_ddiv>
 800979a:	f04f 0a01 	mov.w	sl, #1
 800979e:	4604      	mov	r4, r0
 80097a0:	460d      	mov	r5, r1
 80097a2:	e764      	b.n	800966e <atan+0xce>
 80097a4:	4b49      	ldr	r3, [pc, #292]	; (80098cc <atan+0x32c>)
 80097a6:	429e      	cmp	r6, r3
 80097a8:	dc1d      	bgt.n	80097e6 <atan+0x246>
 80097aa:	ee10 0a10 	vmov	r0, s0
 80097ae:	2200      	movs	r2, #0
 80097b0:	4b47      	ldr	r3, [pc, #284]	; (80098d0 <atan+0x330>)
 80097b2:	4629      	mov	r1, r5
 80097b4:	f7f6 fd68 	bl	8000288 <__aeabi_dsub>
 80097b8:	2200      	movs	r2, #0
 80097ba:	4606      	mov	r6, r0
 80097bc:	460f      	mov	r7, r1
 80097be:	4b44      	ldr	r3, [pc, #272]	; (80098d0 <atan+0x330>)
 80097c0:	4620      	mov	r0, r4
 80097c2:	4629      	mov	r1, r5
 80097c4:	f7f6 ff18 	bl	80005f8 <__aeabi_dmul>
 80097c8:	2200      	movs	r2, #0
 80097ca:	4b3e      	ldr	r3, [pc, #248]	; (80098c4 <atan+0x324>)
 80097cc:	f7f6 fd5e 	bl	800028c <__adddf3>
 80097d0:	4602      	mov	r2, r0
 80097d2:	460b      	mov	r3, r1
 80097d4:	4630      	mov	r0, r6
 80097d6:	4639      	mov	r1, r7
 80097d8:	f7f7 f838 	bl	800084c <__aeabi_ddiv>
 80097dc:	f04f 0a02 	mov.w	sl, #2
 80097e0:	4604      	mov	r4, r0
 80097e2:	460d      	mov	r5, r1
 80097e4:	e743      	b.n	800966e <atan+0xce>
 80097e6:	462b      	mov	r3, r5
 80097e8:	ee10 2a10 	vmov	r2, s0
 80097ec:	2000      	movs	r0, #0
 80097ee:	4939      	ldr	r1, [pc, #228]	; (80098d4 <atan+0x334>)
 80097f0:	f7f7 f82c 	bl	800084c <__aeabi_ddiv>
 80097f4:	f04f 0a03 	mov.w	sl, #3
 80097f8:	4604      	mov	r4, r0
 80097fa:	460d      	mov	r5, r1
 80097fc:	e737      	b.n	800966e <atan+0xce>
 80097fe:	4b36      	ldr	r3, [pc, #216]	; (80098d8 <atan+0x338>)
 8009800:	4e36      	ldr	r6, [pc, #216]	; (80098dc <atan+0x33c>)
 8009802:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8009806:	4456      	add	r6, sl
 8009808:	449a      	add	sl, r3
 800980a:	e9da 2300 	ldrd	r2, r3, [sl]
 800980e:	f7f6 fd3b 	bl	8000288 <__aeabi_dsub>
 8009812:	4622      	mov	r2, r4
 8009814:	462b      	mov	r3, r5
 8009816:	f7f6 fd37 	bl	8000288 <__aeabi_dsub>
 800981a:	4602      	mov	r2, r0
 800981c:	460b      	mov	r3, r1
 800981e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009822:	f7f6 fd31 	bl	8000288 <__aeabi_dsub>
 8009826:	f1bb 0f00 	cmp.w	fp, #0
 800982a:	4604      	mov	r4, r0
 800982c:	460d      	mov	r5, r1
 800982e:	f6bf aed6 	bge.w	80095de <atan+0x3e>
 8009832:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009836:	461d      	mov	r5, r3
 8009838:	e6d1      	b.n	80095de <atan+0x3e>
 800983a:	a51d      	add	r5, pc, #116	; (adr r5, 80098b0 <atan+0x310>)
 800983c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009840:	e6cd      	b.n	80095de <atan+0x3e>
 8009842:	bf00      	nop
 8009844:	f3af 8000 	nop.w
 8009848:	54442d18 	.word	0x54442d18
 800984c:	3ff921fb 	.word	0x3ff921fb
 8009850:	8800759c 	.word	0x8800759c
 8009854:	7e37e43c 	.word	0x7e37e43c
 8009858:	e322da11 	.word	0xe322da11
 800985c:	3f90ad3a 	.word	0x3f90ad3a
 8009860:	24760deb 	.word	0x24760deb
 8009864:	3fa97b4b 	.word	0x3fa97b4b
 8009868:	a0d03d51 	.word	0xa0d03d51
 800986c:	3fb10d66 	.word	0x3fb10d66
 8009870:	c54c206e 	.word	0xc54c206e
 8009874:	3fb745cd 	.word	0x3fb745cd
 8009878:	920083ff 	.word	0x920083ff
 800987c:	3fc24924 	.word	0x3fc24924
 8009880:	5555550d 	.word	0x5555550d
 8009884:	3fd55555 	.word	0x3fd55555
 8009888:	2c6a6c2f 	.word	0x2c6a6c2f
 800988c:	bfa2b444 	.word	0xbfa2b444
 8009890:	52defd9a 	.word	0x52defd9a
 8009894:	3fadde2d 	.word	0x3fadde2d
 8009898:	af749a6d 	.word	0xaf749a6d
 800989c:	3fb3b0f2 	.word	0x3fb3b0f2
 80098a0:	fe231671 	.word	0xfe231671
 80098a4:	3fbc71c6 	.word	0x3fbc71c6
 80098a8:	9998ebc4 	.word	0x9998ebc4
 80098ac:	3fc99999 	.word	0x3fc99999
 80098b0:	54442d18 	.word	0x54442d18
 80098b4:	bff921fb 	.word	0xbff921fb
 80098b8:	440fffff 	.word	0x440fffff
 80098bc:	7ff00000 	.word	0x7ff00000
 80098c0:	3fdbffff 	.word	0x3fdbffff
 80098c4:	3ff00000 	.word	0x3ff00000
 80098c8:	3ff2ffff 	.word	0x3ff2ffff
 80098cc:	40037fff 	.word	0x40037fff
 80098d0:	3ff80000 	.word	0x3ff80000
 80098d4:	bff00000 	.word	0xbff00000
 80098d8:	08009ea8 	.word	0x08009ea8
 80098dc:	08009e88 	.word	0x08009e88

080098e0 <fabs>:
 80098e0:	ec51 0b10 	vmov	r0, r1, d0
 80098e4:	ee10 2a10 	vmov	r2, s0
 80098e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80098ec:	ec43 2b10 	vmov	d0, r2, r3
 80098f0:	4770      	bx	lr

080098f2 <finite>:
 80098f2:	ee10 3a90 	vmov	r3, s1
 80098f6:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80098fa:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80098fe:	0fc0      	lsrs	r0, r0, #31
 8009900:	4770      	bx	lr

08009902 <matherr>:
 8009902:	2000      	movs	r0, #0
 8009904:	4770      	bx	lr
	...

08009908 <nan>:
 8009908:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009910 <nan+0x8>
 800990c:	4770      	bx	lr
 800990e:	bf00      	nop
 8009910:	00000000 	.word	0x00000000
 8009914:	7ff80000 	.word	0x7ff80000

08009918 <rint>:
 8009918:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800991a:	ec51 0b10 	vmov	r0, r1, d0
 800991e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009922:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8009926:	2e13      	cmp	r6, #19
 8009928:	460b      	mov	r3, r1
 800992a:	ee10 4a10 	vmov	r4, s0
 800992e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8009932:	dc56      	bgt.n	80099e2 <rint+0xca>
 8009934:	2e00      	cmp	r6, #0
 8009936:	da2b      	bge.n	8009990 <rint+0x78>
 8009938:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800993c:	4302      	orrs	r2, r0
 800993e:	d023      	beq.n	8009988 <rint+0x70>
 8009940:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8009944:	4302      	orrs	r2, r0
 8009946:	4254      	negs	r4, r2
 8009948:	4314      	orrs	r4, r2
 800994a:	0c4b      	lsrs	r3, r1, #17
 800994c:	0b24      	lsrs	r4, r4, #12
 800994e:	045b      	lsls	r3, r3, #17
 8009950:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8009954:	ea44 0103 	orr.w	r1, r4, r3
 8009958:	460b      	mov	r3, r1
 800995a:	492f      	ldr	r1, [pc, #188]	; (8009a18 <rint+0x100>)
 800995c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8009960:	e9d1 6700 	ldrd	r6, r7, [r1]
 8009964:	4602      	mov	r2, r0
 8009966:	4639      	mov	r1, r7
 8009968:	4630      	mov	r0, r6
 800996a:	f7f6 fc8f 	bl	800028c <__adddf3>
 800996e:	e9cd 0100 	strd	r0, r1, [sp]
 8009972:	463b      	mov	r3, r7
 8009974:	4632      	mov	r2, r6
 8009976:	e9dd 0100 	ldrd	r0, r1, [sp]
 800997a:	f7f6 fc85 	bl	8000288 <__aeabi_dsub>
 800997e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009982:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8009986:	4639      	mov	r1, r7
 8009988:	ec41 0b10 	vmov	d0, r0, r1
 800998c:	b003      	add	sp, #12
 800998e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009990:	4a22      	ldr	r2, [pc, #136]	; (8009a1c <rint+0x104>)
 8009992:	4132      	asrs	r2, r6
 8009994:	ea01 0702 	and.w	r7, r1, r2
 8009998:	4307      	orrs	r7, r0
 800999a:	d0f5      	beq.n	8009988 <rint+0x70>
 800999c:	0852      	lsrs	r2, r2, #1
 800999e:	4011      	ands	r1, r2
 80099a0:	430c      	orrs	r4, r1
 80099a2:	d00b      	beq.n	80099bc <rint+0xa4>
 80099a4:	ea23 0202 	bic.w	r2, r3, r2
 80099a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80099ac:	2e13      	cmp	r6, #19
 80099ae:	fa43 f306 	asr.w	r3, r3, r6
 80099b2:	bf0c      	ite	eq
 80099b4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80099b8:	2400      	movne	r4, #0
 80099ba:	4313      	orrs	r3, r2
 80099bc:	4916      	ldr	r1, [pc, #88]	; (8009a18 <rint+0x100>)
 80099be:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80099c2:	4622      	mov	r2, r4
 80099c4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80099c8:	4620      	mov	r0, r4
 80099ca:	4629      	mov	r1, r5
 80099cc:	f7f6 fc5e 	bl	800028c <__adddf3>
 80099d0:	e9cd 0100 	strd	r0, r1, [sp]
 80099d4:	4622      	mov	r2, r4
 80099d6:	462b      	mov	r3, r5
 80099d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80099dc:	f7f6 fc54 	bl	8000288 <__aeabi_dsub>
 80099e0:	e7d2      	b.n	8009988 <rint+0x70>
 80099e2:	2e33      	cmp	r6, #51	; 0x33
 80099e4:	dd07      	ble.n	80099f6 <rint+0xde>
 80099e6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80099ea:	d1cd      	bne.n	8009988 <rint+0x70>
 80099ec:	ee10 2a10 	vmov	r2, s0
 80099f0:	f7f6 fc4c 	bl	800028c <__adddf3>
 80099f4:	e7c8      	b.n	8009988 <rint+0x70>
 80099f6:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 80099fa:	f04f 32ff 	mov.w	r2, #4294967295
 80099fe:	40f2      	lsrs	r2, r6
 8009a00:	4210      	tst	r0, r2
 8009a02:	d0c1      	beq.n	8009988 <rint+0x70>
 8009a04:	0852      	lsrs	r2, r2, #1
 8009a06:	4210      	tst	r0, r2
 8009a08:	bf1f      	itttt	ne
 8009a0a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8009a0e:	ea20 0202 	bicne.w	r2, r0, r2
 8009a12:	4134      	asrne	r4, r6
 8009a14:	4314      	orrne	r4, r2
 8009a16:	e7d1      	b.n	80099bc <rint+0xa4>
 8009a18:	08009ec8 	.word	0x08009ec8
 8009a1c:	000fffff 	.word	0x000fffff

08009a20 <scalbn>:
 8009a20:	b570      	push	{r4, r5, r6, lr}
 8009a22:	ec55 4b10 	vmov	r4, r5, d0
 8009a26:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8009a2a:	4606      	mov	r6, r0
 8009a2c:	462b      	mov	r3, r5
 8009a2e:	b9aa      	cbnz	r2, 8009a5c <scalbn+0x3c>
 8009a30:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009a34:	4323      	orrs	r3, r4
 8009a36:	d03b      	beq.n	8009ab0 <scalbn+0x90>
 8009a38:	4b31      	ldr	r3, [pc, #196]	; (8009b00 <scalbn+0xe0>)
 8009a3a:	4629      	mov	r1, r5
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	ee10 0a10 	vmov	r0, s0
 8009a42:	f7f6 fdd9 	bl	80005f8 <__aeabi_dmul>
 8009a46:	4b2f      	ldr	r3, [pc, #188]	; (8009b04 <scalbn+0xe4>)
 8009a48:	429e      	cmp	r6, r3
 8009a4a:	4604      	mov	r4, r0
 8009a4c:	460d      	mov	r5, r1
 8009a4e:	da12      	bge.n	8009a76 <scalbn+0x56>
 8009a50:	a327      	add	r3, pc, #156	; (adr r3, 8009af0 <scalbn+0xd0>)
 8009a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a56:	f7f6 fdcf 	bl	80005f8 <__aeabi_dmul>
 8009a5a:	e009      	b.n	8009a70 <scalbn+0x50>
 8009a5c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009a60:	428a      	cmp	r2, r1
 8009a62:	d10c      	bne.n	8009a7e <scalbn+0x5e>
 8009a64:	ee10 2a10 	vmov	r2, s0
 8009a68:	4620      	mov	r0, r4
 8009a6a:	4629      	mov	r1, r5
 8009a6c:	f7f6 fc0e 	bl	800028c <__adddf3>
 8009a70:	4604      	mov	r4, r0
 8009a72:	460d      	mov	r5, r1
 8009a74:	e01c      	b.n	8009ab0 <scalbn+0x90>
 8009a76:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009a7a:	460b      	mov	r3, r1
 8009a7c:	3a36      	subs	r2, #54	; 0x36
 8009a7e:	4432      	add	r2, r6
 8009a80:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009a84:	428a      	cmp	r2, r1
 8009a86:	dd0b      	ble.n	8009aa0 <scalbn+0x80>
 8009a88:	ec45 4b11 	vmov	d1, r4, r5
 8009a8c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8009af8 <scalbn+0xd8>
 8009a90:	f000 f83c 	bl	8009b0c <copysign>
 8009a94:	a318      	add	r3, pc, #96	; (adr r3, 8009af8 <scalbn+0xd8>)
 8009a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a9a:	ec51 0b10 	vmov	r0, r1, d0
 8009a9e:	e7da      	b.n	8009a56 <scalbn+0x36>
 8009aa0:	2a00      	cmp	r2, #0
 8009aa2:	dd08      	ble.n	8009ab6 <scalbn+0x96>
 8009aa4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009aa8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009aac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009ab0:	ec45 4b10 	vmov	d0, r4, r5
 8009ab4:	bd70      	pop	{r4, r5, r6, pc}
 8009ab6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009aba:	da0d      	bge.n	8009ad8 <scalbn+0xb8>
 8009abc:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009ac0:	429e      	cmp	r6, r3
 8009ac2:	ec45 4b11 	vmov	d1, r4, r5
 8009ac6:	dce1      	bgt.n	8009a8c <scalbn+0x6c>
 8009ac8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8009af0 <scalbn+0xd0>
 8009acc:	f000 f81e 	bl	8009b0c <copysign>
 8009ad0:	a307      	add	r3, pc, #28	; (adr r3, 8009af0 <scalbn+0xd0>)
 8009ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad6:	e7e0      	b.n	8009a9a <scalbn+0x7a>
 8009ad8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009adc:	3236      	adds	r2, #54	; 0x36
 8009ade:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009ae2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009ae6:	4620      	mov	r0, r4
 8009ae8:	4629      	mov	r1, r5
 8009aea:	2200      	movs	r2, #0
 8009aec:	4b06      	ldr	r3, [pc, #24]	; (8009b08 <scalbn+0xe8>)
 8009aee:	e7b2      	b.n	8009a56 <scalbn+0x36>
 8009af0:	c2f8f359 	.word	0xc2f8f359
 8009af4:	01a56e1f 	.word	0x01a56e1f
 8009af8:	8800759c 	.word	0x8800759c
 8009afc:	7e37e43c 	.word	0x7e37e43c
 8009b00:	43500000 	.word	0x43500000
 8009b04:	ffff3cb0 	.word	0xffff3cb0
 8009b08:	3c900000 	.word	0x3c900000

08009b0c <copysign>:
 8009b0c:	ec51 0b10 	vmov	r0, r1, d0
 8009b10:	ee11 0a90 	vmov	r0, s3
 8009b14:	ee10 2a10 	vmov	r2, s0
 8009b18:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009b1c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8009b20:	ea41 0300 	orr.w	r3, r1, r0
 8009b24:	ec43 2b10 	vmov	d0, r2, r3
 8009b28:	4770      	bx	lr
	...

08009b2c <_init>:
 8009b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b2e:	bf00      	nop
 8009b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b32:	bc08      	pop	{r3}
 8009b34:	469e      	mov	lr, r3
 8009b36:	4770      	bx	lr

08009b38 <_fini>:
 8009b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b3a:	bf00      	nop
 8009b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b3e:	bc08      	pop	{r3}
 8009b40:	469e      	mov	lr, r3
 8009b42:	4770      	bx	lr
